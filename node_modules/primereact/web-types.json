{
    "$schema": "https://raw.githubusercontent.com/JetBrains/web-types/master/schema/web-types.json",
    "framework": "react",
    "name": "PrimeReact",
    "version": "10.6.5",
    "contributions": {
        "html": {
            "types-syntax": "typescript",
            "description-markup": "markdown",
            "tags": [
                {
                    "name": "Accordion",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Accordion"
                    },
                    "description": "Accordion groups a collection of contents in tabs.\n\n[Live Demo](https://www.primereact.org/accordion/)\n\nHelper Components:\n\n-  AccordionTab",
                    "doc-url": "https://www.primereact.org/accordion/",
                    "attributes": [
                        {
                            "name": "activeIndex",
                            "default": "null",
                            "description": "Active index or indexes of the element. Use an array of numbers for multiple indexes.\nThe  multiple  prop must be set to true in order to specify multiple indexes.",
                            "value": {
                                "kind": "expression",
                                "type": "null | number | number[]"
                            }
                        },
                        {
                            "name": "multiple",
                            "default": "false",
                            "description": "When enabled, multiple tabs can be activated at the same time.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "expandIcon",
                            "default": "null",
                            "description": "Icon of a collapsed tab.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<AccordionProps>"
                            }
                        },
                        {
                            "name": "collapseIcon",
                            "default": "null",
                            "description": "Icon of an expanded tab.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<AccordionProps>"
                            }
                        },
                        {
                            "name": "transitionOptions",
                            "default": "null",
                            "description": "The properties of CSSTransition can be customized, except for \"nodeRef\" and \"in\" properties.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSTransitionProps"
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "AccordionPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        }
                    ],
                    "events": [
                        {
                            "name": "onTabOpen",
                            "description": "Callback to invoke when a tab gets expanded.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "AccordionTabOpenEvent",
                                    "description": "Custom tab open event."
                                }
                            ]
                        },
                        {
                            "name": "onTabClose",
                            "description": "Callback to invoke when an active tab is collapsed by clicking on the header.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "AccordionTabCloseEvent",
                                    "description": "Custom tab close event."
                                }
                            ]
                        },
                        {
                            "name": "onTabChange",
                            "description": "Callback to invoke when state of the accordion changes.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "AccordionTabChangeEvent",
                                    "description": "Custom tab close event."
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "Api",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Api"
                    },
                    "description": "API for PrimeReact components.",
                    "doc-url": ""
                },
                {
                    "name": "Autocomplete",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Autocomplete"
                    },
                    "description": "AutoComplete is an input component that provides real-time suggestions while being typed.\n\n[Live Demo](https://www.primereact.org/autocomplete/)",
                    "doc-url": "https://www.primereact.org/autocomplete/",
                    "attributes": [
                        {
                            "name": "id",
                            "default": "null",
                            "description": "Unique identifier of the element.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "appendTo",
                            "default": "document.body",
                            "description": "DOM element instance where the overlay panel should be mounted. Valid values are any DOM Element and \"self\". The \"self\" value is used to render a component where it is located.",
                            "value": {
                                "kind": "expression",
                                "type": "null | HTMLElement | \"self\" | Function"
                            }
                        },
                        {
                            "name": "autoFocus",
                            "default": "false",
                            "description": "When present, it specifies that the component should automatically get focus on load.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "autoHighlight",
                            "default": "false",
                            "description": "When enabled, highlights the first item in the list by default.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "className",
                            "default": "null",
                            "description": "Style class of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "delay",
                            "default": "300",
                            "description": "Delay between keystrokes to wait before sending a query.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "invalid",
                            "default": "false",
                            "description": "When present, it specifies that the component should have invalid state style.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "disabled",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "variant",
                            "default": "outlined",
                            "description": "Specifies the input variant of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "\"filled\" | \"outlined\""
                            }
                        },
                        {
                            "name": "dropdown",
                            "default": "false",
                            "description": "Displays a button next to the input field when enabled.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "dropdownAriaLabel",
                            "default": "Choose",
                            "description": "ARIA label for the dropdown button. Defaults to placeholder then Locale \"choose\" label.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "dropdownAutoFocus",
                            "default": "true",
                            "description": "Focus the input field when the dropdown button is clicked if enabled.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "dropdownIcon",
                            "default": "null",
                            "description": "Icon of the dropdown.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<AutoCompleteProps>"
                            }
                        },
                        {
                            "name": "dropdownMode",
                            "default": "blank",
                            "description": "Specifies the behavior dropdown button. Default \"blank\" mode sends an empty string and \"current\" mode sends the input value.",
                            "value": {
                                "kind": "expression",
                                "type": "\"blank\" | \"current\""
                            }
                        },
                        {
                            "name": "emptyMessage",
                            "default": "No results found.",
                            "description": "Text to display when there is no data. Defaults to global value in i18n translation configuration.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "field",
                            "default": "null",
                            "description": "Field of a suggested object to resolve and display.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "forceSelection",
                            "default": "false",
                            "description": "When present, autocomplete clears the manual input if it does not match of the suggestions to force only accepting values from the suggestions.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "inputClassName",
                            "default": "null",
                            "description": "Style class of the input field.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "inputId",
                            "default": "null",
                            "description": "Identifier of the input element.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "inputRef",
                            "default": "null",
                            "description": "Reference of the input element.",
                            "value": {
                                "kind": "expression",
                                "type": "Ref<HTMLInputElement>"
                            }
                        },
                        {
                            "name": "inputStyle",
                            "default": "null",
                            "description": "Inline style of the input field.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSProperties"
                            }
                        },
                        {
                            "name": "loadingIcon",
                            "default": "null",
                            "description": "Icon of the loader.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<AutoCompleteProps>"
                            }
                        },
                        {
                            "name": "itemTemplate",
                            "default": "null",
                            "description": "Template of a list item.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "maxLength",
                            "default": "null",
                            "description": "Maximum number of characters to initiate a search.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "minLength",
                            "default": "1",
                            "description": "Minimum number of characters to initiate a search.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "multiple",
                            "default": "false",
                            "description": "Specifies if multiple values can be selected.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "selectionLimit",
                            "default": "null",
                            "description": "Number of maximum options that can be selected.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "name",
                            "default": "null",
                            "description": "Name of the input element.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "optionGroupChildren",
                            "default": "null",
                            "description": "Property name or getter function that refers to the children options of option group.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "optionGroupLabel",
                            "default": "null",
                            "description": "Property name or getter function to use as the label of an option group.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "optionGroupTemplate",
                            "default": "null",
                            "description": "Template of an option group item.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "panelClassName",
                            "default": "null",
                            "description": "Style class of the overlay panel element.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "panelFooterTemplate",
                            "default": "null",
                            "description": "Template of the panel footer.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "panelStyle",
                            "default": "null",
                            "description": "Inline style of the overlay panel element.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSProperties"
                            }
                        },
                        {
                            "name": "placeholder",
                            "default": "null",
                            "description": "Hint text for the input field.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "readOnly",
                            "default": "false",
                            "description": "When present, it specifies that the input cannot be typed.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "required",
                            "default": "false",
                            "description": "When present, it specifies that an input field must be filled out before submitting the form.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "removeTokenIcon",
                            "default": "null",
                            "description": "Icon of the remove chip element in multiple mode.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<AutoCompleteProps>"
                            }
                        },
                        {
                            "name": "scrollHeight",
                            "default": "200px",
                            "description": "Maximum height of the suggestions panel.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "selectedItemTemplate",
                            "default": "null",
                            "description": "Template of a selected item.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "showEmptyMessage",
                            "default": "false",
                            "description": "Whether to show the empty message or not.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "size",
                            "default": "null",
                            "description": "Size of the input field.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "style",
                            "default": "null",
                            "description": "Inline style of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSProperties"
                            }
                        },
                        {
                            "name": "suggestions",
                            "default": "null",
                            "description": "An array of suggestions to display.",
                            "value": {
                                "kind": "expression",
                                "type": "any[]"
                            }
                        },
                        {
                            "name": "tabIndex",
                            "default": "null",
                            "description": "Index of the element in tabbing order.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "tooltip",
                            "default": "null",
                            "description": "Content of the tooltip.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "tooltipOptions",
                            "default": "null",
                            "description": "Configuration of the tooltip, refer to the tooltip documentation for more information.",
                            "value": {
                                "kind": "expression",
                                "type": "TooltipOptions"
                            }
                        },
                        {
                            "name": "transitionOptions",
                            "default": "null",
                            "description": "The properties of CSSTransition can be customized, except for \"nodeRef\" and \"in\" properties.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSTransitionProps"
                            }
                        },
                        {
                            "name": "type",
                            "default": "null",
                            "description": "Type of the input element.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "value",
                            "default": "null",
                            "description": "Value of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "any"
                            }
                        },
                        {
                            "name": "virtualScrollerOptions",
                            "default": "null",
                            "description": "Whether to use the virtualScroller feature. The properties of VirtualScroller component can be used like an object in it.",
                            "value": {
                                "kind": "expression",
                                "type": "VirtualScrollerProps"
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "AutoCompletePassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": [
                        {
                            "name": "completeMethod",
                            "description": "Callback to invoke to search for suggestions.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "AutoCompleteCompleteEvent",
                                    "description": "Custom complete method event."
                                }
                            ]
                        },
                        {
                            "name": "onBlur",
                            "description": "Callback to invoke when autocomplete loses focus.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "FocusEvent<HTMLInputElement, Element>",
                                    "description": "Browser event."
                                }
                            ]
                        },
                        {
                            "name": "onChange",
                            "description": "Callback to invoke when autocomplete value changes.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "AutoCompleteChangeEvent",
                                    "description": "Custom change event."
                                }
                            ]
                        },
                        {
                            "name": "onClear",
                            "description": "Callback to invoke when input is cleared by the user.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "SyntheticEvent<Element, Event>",
                                    "description": "Browser event."
                                }
                            ]
                        },
                        {
                            "name": "onClick",
                            "description": "Callback to invoke on click.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "MouseEvent<HTMLElement, MouseEvent>",
                                    "description": "Browser event."
                                }
                            ]
                        },
                        {
                            "name": "onContextMenu",
                            "description": "Callback to invoke on right-click.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "MouseEvent<HTMLElement, MouseEvent>",
                                    "description": "Browser event."
                                }
                            ]
                        },
                        {
                            "name": "onDblClick",
                            "description": "Callback to invoke on double click.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "MouseEvent<HTMLElement, MouseEvent>",
                                    "description": "Browser event."
                                }
                            ]
                        },
                        {
                            "name": "onDropdownClick",
                            "description": "Callback to invoke to when dropdown button is clicked.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "AutoCompleteDropdownClickEvent",
                                    "description": "Custom click event."
                                }
                            ]
                        },
                        {
                            "name": "onFocus",
                            "description": "Callback to invoke when autocomplete gets focus.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "FocusEvent<HTMLInputElement, Element>",
                                    "description": "Browser event."
                                }
                            ]
                        },
                        {
                            "name": "onHide",
                            "description": "Callback to invoke when overlay panel becomes hidden.",
                            "arguments": []
                        },
                        {
                            "name": "onKeyPress",
                            "description": "Callback to invoke to when a key is pressed.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "KeyboardEvent<HTMLInputElement>",
                                    "description": "Browser event."
                                }
                            ]
                        },
                        {
                            "name": "onKeyUp",
                            "description": "Callback to invoke to when a key is released.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "KeyboardEvent<HTMLInputElement>",
                                    "description": "Browser event."
                                }
                            ]
                        },
                        {
                            "name": "onMouseDown",
                            "description": "Callback to invoke to when a mouse button is pressed.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "MouseEvent<HTMLElement, MouseEvent>",
                                    "description": "Browser event."
                                }
                            ]
                        },
                        {
                            "name": "onSelect",
                            "description": "Callback to invoke when a suggestion is selected.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "AutoCompleteSelectEvent",
                                    "description": "Custom select event."
                                }
                            ]
                        },
                        {
                            "name": "onShow",
                            "description": "Callback to invoke when overlay panel becomes visible.",
                            "arguments": []
                        },
                        {
                            "name": "onUnselect",
                            "description": "Callback to invoke when a selected value is removed.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "AutoCompleteUnselectEvent",
                                    "description": "Custom unselect event."
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "Avatar",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Avatar"
                    },
                    "description": "Avatar represents people using icons, labels and images.\n\n[Live Demo](https://www.primereact.org/avatar)",
                    "doc-url": "https://www.primereact.org/avatar",
                    "attributes": [
                        {
                            "name": "icon",
                            "default": "null",
                            "description": "Defines the icon to display.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<AvatarProps>"
                            }
                        },
                        {
                            "name": "image",
                            "default": "null",
                            "description": "Defines the image to display.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "imageAlt",
                            "default": "avatar",
                            "description": "It specifies an alternate text for an image, if the image cannot be displayed.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "imageFallback",
                            "default": "default",
                            "description": "Defines a fallback image or URL if the main image fails to load. If \"default\" will fallback to label then icon.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "label",
                            "default": "null",
                            "description": "Defines the text to display.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "shape",
                            "default": "square",
                            "description": "Shape of the element.",
                            "value": {
                                "kind": "expression",
                                "type": "\"square\" | \"circle\""
                            }
                        },
                        {
                            "name": "size",
                            "default": "normal",
                            "description": "Size of the element.",
                            "value": {
                                "kind": "expression",
                                "type": "\"normal\" | \"large\" | \"xlarge\""
                            }
                        },
                        {
                            "name": "template",
                            "default": "null",
                            "description": "Template of the content.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "AvatarPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": [
                        {
                            "name": "onImageError",
                            "description": "This event is triggered if an error occurs while loading an image file.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "SyntheticEvent<Element, Event>",
                                    "description": "Browser event."
                                }
                            ]
                        },
                        {
                            "name": "onClick",
                            "description": "Callback to invoke on click.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "MouseEvent<HTMLElement, MouseEvent>",
                                    "description": "Browser event."
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "Avatargroup",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Avatargroup"
                    },
                    "description": "A set of Avatars can be displayed together using the AvatarGroup component.\n\n[Live Demo](https://www.primereact.org/avatar/)",
                    "doc-url": "https://www.primereact.org/avatar/",
                    "attributes": [
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "AvatarGroupPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": []
                },
                {
                    "name": "Badge",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Badge"
                    },
                    "description": "Badge represents people using icons, labels and images.\n\n[Live Demo](https://www.primereact.org/badge)",
                    "doc-url": "https://www.primereact.org/badge",
                    "attributes": [
                        {
                            "name": "value",
                            "default": "null",
                            "description": "Value to display inside the badge.",
                            "value": {
                                "kind": "expression",
                                "type": "any"
                            }
                        },
                        {
                            "name": "severity",
                            "default": "null",
                            "description": "Severity type of the badge.",
                            "value": {
                                "kind": "expression",
                                "type": "null | \"success\" | \"warning\" | \"info\" | \"danger\""
                            }
                        },
                        {
                            "name": "size",
                            "default": "null",
                            "description": "Size of the badge, valid options are \"large\" and \"xlarge\".",
                            "value": {
                                "kind": "expression",
                                "type": "null | \"normal\" | \"large\" | \"xlarge\""
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "BadgePassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": []
                },
                {
                    "name": "Blockui",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Blockui"
                    },
                    "description": "BlockUI represents people using icons, labels and images.\n\n[Live Demo](https://www.primereact.org/blockui)",
                    "doc-url": "https://www.primereact.org/blockui",
                    "attributes": [
                        {
                            "name": "autoZIndex",
                            "default": "true",
                            "description": "Whether to automatically manage layering.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "baseZIndex",
                            "default": "0",
                            "description": "Base zIndex value to use in layering.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "blocked",
                            "default": "false",
                            "description": "Controls the blocked state.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "containerClassName",
                            "default": "null",
                            "description": "Style class of the container element.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "containerStyle",
                            "default": "null",
                            "description": "Inline style of the container element.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSProperties"
                            }
                        },
                        {
                            "name": "fullScreen",
                            "default": "false",
                            "description": "When enabled, the whole document gets blocked.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "template",
                            "default": "null",
                            "description": "Template of mask.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "BlockUIPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": [
                        {
                            "name": "onBlocked",
                            "description": "Fired when the element gets blocked.",
                            "arguments": []
                        },
                        {
                            "name": "onUnblocked",
                            "description": "Fired when the element gets unblocked.",
                            "arguments": []
                        }
                    ]
                },
                {
                    "name": "Breadcrumb",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Breadcrumb"
                    },
                    "description": "Breadcrumb provides contextual information about page hierarchy.\n\n[Live Demo](https://www.primereact.org/breadcrumb/)",
                    "doc-url": "https://www.primereact.org/breadcrumb/",
                    "attributes": [
                        {
                            "name": "model",
                            "default": "null",
                            "description": "An array of menuitems.",
                            "value": {
                                "kind": "expression",
                                "type": "MenuItem[]"
                            }
                        },
                        {
                            "name": "home",
                            "default": "null",
                            "description": "MenuItem configuration for the home icon.",
                            "value": {
                                "kind": "expression",
                                "type": "MenuItem"
                            }
                        },
                        {
                            "name": "separatorIcon",
                            "default": "null",
                            "description": "Icon of the separator.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<BreadCrumbProps>"
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "BreadCrumbPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": []
                },
                {
                    "name": "Button",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Button"
                    },
                    "description": "Button is an extension to standard button element with icons and theming.\n\n[Live Demo](https://www.primereact.org/button/)",
                    "doc-url": "https://www.primereact.org/button/",
                    "attributes": [
                        {
                            "name": "badge",
                            "default": "null",
                            "description": "Value of the badge.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "badgeClassName",
                            "default": "null",
                            "description": "Style class of the badge.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "disabled",
                            "default": "false",
                            "description": "When present, it specifies that the element should be disabled.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "icon",
                            "default": "null",
                            "description": "Name of the icon or JSX.Element for icon.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<ButtonProps>"
                            }
                        },
                        {
                            "name": "text",
                            "default": "false",
                            "description": "Add a textual class to the button without a background initially.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "rounded",
                            "default": "false",
                            "description": "Add a circular border radius to the button.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "raised",
                            "default": "false",
                            "description": "Add a shadow to indicate elevation.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "outlined",
                            "default": "false",
                            "description": "Add a border class without a background initially.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "link",
                            "default": "false",
                            "description": "Add a link style to the button.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "severity",
                            "default": "null",
                            "description": "Defines the style of the button, valid values are \"secondary\", \"success\", \"info\", \"warning\", \"danger\", \"help\".",
                            "value": {
                                "kind": "expression",
                                "type": "\"success\" | \"help\" | \"warning\" | \"secondary\" | \"info\" | \"danger\""
                            }
                        },
                        {
                            "name": "size",
                            "default": "null",
                            "description": "Defines the size of the button, valid values are \"small\" and \"large\".",
                            "value": {
                                "kind": "expression",
                                "type": "\"small\" | \"large\""
                            }
                        },
                        {
                            "name": "iconPos",
                            "default": "left",
                            "description": "Position of the icon, valid values are \"left\", \"right\", \"top\" and \"bottom\".",
                            "value": {
                                "kind": "expression",
                                "type": "\"left\" | \"top\" | \"bottom\" | \"right\""
                            }
                        },
                        {
                            "name": "label",
                            "default": "null",
                            "description": "Text of the button.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "loading",
                            "default": "false",
                            "description": "Display loading icon of the button",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "loadingIcon",
                            "default": "null",
                            "description": "Name of the loading icon or JSX.Element for loading icon.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<ButtonProps>"
                            }
                        },
                        {
                            "name": "plain",
                            "default": "false",
                            "description": "Add a plain textual class to the button without a background initially.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "tooltip",
                            "default": "null",
                            "description": "Content of the tooltip.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "tooltipOptions",
                            "default": "null",
                            "description": "Configuration of the tooltip, refer to the tooltip documentation for more information.",
                            "value": {
                                "kind": "expression",
                                "type": "TooltipOptions"
                            }
                        },
                        {
                            "name": "visible",
                            "default": "true",
                            "description": "When present, it specifies that the element should be visible.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ButtonPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": []
                },
                {
                    "name": "Buttongroup",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Buttongroup"
                    },
                    "description": "A set of Buttons can be displayed together using the ButtonGroup component.\n\n[Live Demo](https://www.primereact.org/button/)",
                    "doc-url": "https://www.primereact.org/button/",
                    "attributes": [],
                    "events": []
                },
                {
                    "name": "Calendar",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Calendar"
                    },
                    "description": "Calendar also known as DatePicker, is a form component to work with dates.\n\n[Live Demo](https://www.primereact.org/calendar/)",
                    "doc-url": "https://www.primereact.org/calendar/",
                    "attributes": [],
                    "events": []
                },
                {
                    "name": "Card",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Card"
                    },
                    "description": "Card is a flexible container component.\n\n[Live Demo](https://www.primereact.org/card/)",
                    "doc-url": "https://www.primereact.org/card/",
                    "attributes": [
                        {
                            "name": "header",
                            "default": "null",
                            "description": "Header of the card.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "footer",
                            "default": "null",
                            "description": "Footer of the card.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "title",
                            "default": "null",
                            "description": "Title of the card.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "subTitle",
                            "default": "null",
                            "description": "Secondary title of the card.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "CardPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": []
                },
                {
                    "name": "Carousel",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Carousel"
                    },
                    "description": "Carousel is a content slider featuring various customization options.\n\n[Live Demo](https://www.primereact.org/carousel)",
                    "doc-url": "https://www.primereact.org/carousel",
                    "attributes": [
                        {
                            "name": "value",
                            "default": "null",
                            "description": "An array of objects to display.",
                            "value": {
                                "kind": "expression",
                                "type": "any[]"
                            }
                        },
                        {
                            "name": "page",
                            "default": "null",
                            "description": "Index of the first item.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "header",
                            "default": "null",
                            "description": "Label of header.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "footer",
                            "default": "null",
                            "description": "Label of footer.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "circular",
                            "default": "false",
                            "description": "Defines if scrolling would be infinite.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "showIndicators",
                            "default": "true",
                            "description": "Whether to display indicator container.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "showNavigators",
                            "default": "true",
                            "description": "Whether to display navigation buttons in container.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "autoplayInterval",
                            "default": "null",
                            "description": "Time in milliseconds to scroll items automatically.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "numVisible",
                            "default": "1",
                            "description": "Number of items per page.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "numScroll",
                            "default": "1",
                            "description": "Number of items to scroll.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "prevIcon",
                            "default": "null",
                            "description": "Icon for the previous button by orientation.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<CarouselProps>"
                            }
                        },
                        {
                            "name": "nextIcon",
                            "default": "null",
                            "description": "Icon for the next button by orientation.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<CarouselProps>"
                            }
                        },
                        {
                            "name": "responsiveOptions",
                            "default": "null",
                            "description": "An array of options for responsive design.",
                            "value": {
                                "kind": "expression",
                                "type": "CarouselResponsiveOption[]"
                            }
                        },
                        {
                            "name": "orientation",
                            "default": "horizontal",
                            "description": "Specifies the layout of the component, valid values are \"horizontal\" and \"vertical\".",
                            "value": {
                                "kind": "expression",
                                "type": "\"horizontal\" | \"vertical\""
                            }
                        },
                        {
                            "name": "verticalViewPortHeight",
                            "default": "300px",
                            "description": "Height of the viewport in vertical layout.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "contentClassName",
                            "default": "null",
                            "description": "Style class of main content.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "containerClassName",
                            "default": "null",
                            "description": "Style class of the viewport container.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "indicatorsContentClassName",
                            "default": "null",
                            "description": "Style class of the paginator items.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "CarouselPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": [
                        {
                            "name": "itemTemplate",
                            "description": "Function that gets an item in the value and returns the content for it.",
                            "arguments": [
                                {
                                    "name": "item",
                                    "type": "any",
                                    "description": "Current item"
                                }
                            ]
                        },
                        {
                            "name": "onPageChange",
                            "description": "Callback to invoke after scroll.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "CarouselPageChangeEvent",
                                    "description": "Custom change event."
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "Cascadeselect",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Cascadeselect"
                    },
                    "description": "CascadeSelect is a form component to select a value from a nested structure of options.\n\n[Live Demo](https://www.primereact.org/cascadeselect/)",
                    "doc-url": "https://www.primereact.org/cascadeselect/",
                    "attributes": [
                        {
                            "name": "id",
                            "default": "null",
                            "description": "Unique identifier of the element.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "autoFocus",
                            "default": "false",
                            "description": "When present, it specifies that the component should automatically get focus on load.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "inputRef",
                            "default": "null",
                            "description": "Reference of the input element.",
                            "value": {
                                "kind": "expression",
                                "type": "Ref<HTMLInputElement>"
                            }
                        },
                        {
                            "name": "style",
                            "default": "null",
                            "description": "Inline style of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSProperties"
                            }
                        },
                        {
                            "name": "className",
                            "default": "null",
                            "description": "Style class of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "value",
                            "default": "null",
                            "description": "Value of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "any"
                            }
                        },
                        {
                            "name": "name",
                            "default": "null",
                            "description": "Name of the input element.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "options",
                            "default": "null",
                            "description": "An array of selectitems to display as the available options.",
                            "value": {
                                "kind": "expression",
                                "type": "SelectItemOptionsType"
                            }
                        },
                        {
                            "name": "optionLabel",
                            "default": "null",
                            "description": "Property name or getter function to use as the label of an option.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "optionValue",
                            "default": "null",
                            "description": "Property name or getter function to use as the value of an option, defaults to the option itself when not defined.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "optionGroupIcon",
                            "default": "null",
                            "description": "Icon of the option group.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<CascadeSelectProps>"
                            }
                        },
                        {
                            "name": "optionGroupLabel",
                            "default": "null",
                            "description": "Property name or getter function to use as the label of an option group.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "optionGroupChildren",
                            "default": "null",
                            "description": "Property name or getter function to retrieve the items of a group.",
                            "value": {
                                "kind": "expression",
                                "type": "string[]"
                            }
                        },
                        {
                            "name": "placeholder",
                            "default": "null",
                            "description": "Default text to display when no option is selected.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "itemTemplate",
                            "default": "null",
                            "description": "The template of items.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "invalid",
                            "default": "false",
                            "description": "When present, it specifies that the component should have invalid state style.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "disabled",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "variant",
                            "default": "outlined",
                            "description": "Specifies the input variant of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "\"filled\" | \"outlined\""
                            }
                        },
                        {
                            "name": "dataKey",
                            "default": "null",
                            "description": "A property to uniquely identify an option.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "breakpoint",
                            "default": "null",
                            "description": "The breakpoint to define the maximum width boundary when responsiveness is enabled.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "inputId",
                            "default": "null",
                            "description": "Identifier of the underlying input element.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "tabIndex",
                            "default": "null",
                            "description": "Index of the element in tabbing order.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "ariaLabelledBy",
                            "default": "null",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "appendTo",
                            "default": "document.body",
                            "description": "DOM element instance where the overlay panel should be mounted. Valid values are any DOM Element and \"self\". The \"self\" value is used to render a component where it is located.",
                            "value": {
                                "kind": "expression",
                                "type": "null | HTMLElement | \"self\" | Function"
                            }
                        },
                        {
                            "name": "transitionOptions",
                            "default": "null",
                            "description": "The properties of CSSTransition can be customized, except for \"nodeRef\" and \"in\" properties.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSTransitionProps"
                            }
                        },
                        {
                            "name": "dropdownIcon",
                            "default": "null",
                            "description": "Icon of the dropdown icon.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<CascadeSelectProps>"
                            }
                        },
                        {
                            "name": "scrollHeight",
                            "default": "400px",
                            "description": "Maximum height of the options panel on responsive mode.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "CascadeSelectPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": [
                        {
                            "name": "onChange",
                            "description": "Callback to invoke on value change",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "CascadeSelectChangeEvent",
                                    "description": "Custom change event"
                                }
                            ]
                        },
                        {
                            "name": "onGroupChange",
                            "description": "Callback to invoke when a group changes.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "CascadeSelectGroupChangeEvent",
                                    "description": "Custom group change event"
                                }
                            ]
                        },
                        {
                            "name": "onBeforeShow",
                            "description": "Callback to invoke before the overlay is shown.",
                            "arguments": []
                        },
                        {
                            "name": "onBeforeHide",
                            "description": "Callback to invoke before the overlay is hidden.",
                            "arguments": []
                        },
                        {
                            "name": "onShow",
                            "description": "Callback to invoke when the overlay is shown.",
                            "arguments": []
                        },
                        {
                            "name": "onHide",
                            "description": "Callback to invoke when the overlay is hidden.",
                            "arguments": []
                        }
                    ]
                },
                {
                    "name": "Chart",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Chart"
                    },
                    "description": "Chart components are based on Chart.js, an open source HTML5 based charting library.\n\n[Live Demo](https://www.primereact.org/chart)",
                    "doc-url": "https://www.primereact.org/chart",
                    "attributes": [
                        {
                            "name": "id",
                            "default": "null",
                            "description": "Unique identifier of the element.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "type",
                            "default": "null",
                            "description": "Type of the chart.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "data",
                            "default": "null",
                            "description": "Data to display.",
                            "value": {
                                "kind": "expression",
                                "type": "object"
                            }
                        },
                        {
                            "name": "options",
                            "default": "null",
                            "description": "Options to customize the chart.",
                            "value": {
                                "kind": "expression",
                                "type": "object"
                            }
                        },
                        {
                            "name": "plugins",
                            "default": "null",
                            "description": "Used to custom plugins of the chart.",
                            "value": {
                                "kind": "expression",
                                "type": "any[]"
                            }
                        },
                        {
                            "name": "width",
                            "default": "null",
                            "description": "Width of the chart in non-responsive mode.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "height",
                            "default": "null",
                            "description": "Height of the chart in non-responsive mode.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "style",
                            "default": "null",
                            "description": "Inline style of the element.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSProperties"
                            }
                        },
                        {
                            "name": "className",
                            "default": "null",
                            "description": "Style class of the element.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "ariaLabel",
                            "default": "null",
                            "description": "ARIA label for the chart canvas. Defaults to options.plugins.title.text if available.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ChartPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": []
                },
                {
                    "name": "Checkbox",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Checkbox"
                    },
                    "description": "Checkbox is an extension to standard checkbox element with skinning capabilities.\n\n[Live Demo](https://www.primereact.org/checkbox/)",
                    "doc-url": "https://www.primereact.org/checkbox/",
                    "attributes": [
                        {
                            "name": "id",
                            "default": "null",
                            "description": "Unique identifier of the element.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "autoFocus",
                            "default": "false",
                            "description": "When present, it specifies that the component should automatically get focus on load.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "inputRef",
                            "default": "null",
                            "description": "Reference of the input element.",
                            "value": {
                                "kind": "expression",
                                "type": "Ref<HTMLInputElement>"
                            }
                        },
                        {
                            "name": "inputId",
                            "default": "null",
                            "description": "Identifier of the input element.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "value",
                            "default": "null",
                            "description": "Value of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "any"
                            }
                        },
                        {
                            "name": "name",
                            "default": "null",
                            "description": "Name of the checkbox element .",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "checked",
                            "default": "false",
                            "description": "Specifies whether a checkbox should be checked or not.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "trueValue",
                            "default": "true",
                            "description": "Value in checked state.",
                            "value": {
                                "kind": "expression",
                                "type": "any"
                            }
                        },
                        {
                            "name": "falseValue",
                            "default": "false",
                            "description": "Value in unchecked state.",
                            "value": {
                                "kind": "expression",
                                "type": "any"
                            }
                        },
                        {
                            "name": "style",
                            "default": "null",
                            "description": "Inline style of the element.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSProperties"
                            }
                        },
                        {
                            "name": "className",
                            "default": "null",
                            "description": "Style class of the element.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "invalid",
                            "default": "false",
                            "description": "When present, it specifies that the component should have invalid state style.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "disabled",
                            "default": "false",
                            "description": "When present, it specifies that the element value cannot be altered.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "variant",
                            "default": "outlined",
                            "description": "Specifies the input variant of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "\"filled\" | \"outlined\""
                            }
                        },
                        {
                            "name": "required",
                            "default": "false",
                            "description": "When present, it specifies that an input field must be filled out before submitting the form.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "readOnly",
                            "default": "false",
                            "description": "When present, it specifies that the value cannot be changed.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "tabIndex",
                            "default": "false",
                            "description": "Index of the element in tabbing order.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "icon",
                            "default": "null",
                            "description": "Icon to display in checkbox.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<CheckboxProps>"
                            }
                        },
                        {
                            "name": "tooltip",
                            "default": "null",
                            "description": "Content of the tooltip.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "tooltipOptions",
                            "default": "null",
                            "description": "Configuration of the tooltip, refer to the tooltip documentation for more information.",
                            "value": {
                                "kind": "expression",
                                "type": "TooltipOptions"
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "CheckboxPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": [
                        {
                            "name": "onClick",
                            "description": "Callback to invoke on click.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "MouseEvent<HTMLInputElement, MouseEvent> & Object",
                                    "description": "click event"
                                }
                            ]
                        },
                        {
                            "name": "onChange",
                            "description": "Callback to invoke on value change",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "CheckboxChangeEvent",
                                    "description": "Custom change event"
                                }
                            ]
                        },
                        {
                            "name": "onMouseDown",
                            "description": "Callback to invoke to when a mouse button is pressed.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "MouseEvent<HTMLElement, MouseEvent>",
                                    "description": "Browser event"
                                }
                            ]
                        },
                        {
                            "name": "onContextMenu",
                            "description": "Callback to invoke on right-click.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "MouseEvent<HTMLElement, MouseEvent>",
                                    "description": "Browser event"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "Chip",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Chip"
                    },
                    "description": "Chip represents people using icons, labels and images.\n\n[Live Demo](https://www.primereact.org/chip)",
                    "doc-url": "https://www.primereact.org/chip",
                    "attributes": [
                        {
                            "name": "label",
                            "default": "null",
                            "description": "Defines the text to display.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "icon",
                            "default": "null",
                            "description": "Defines the icon to display.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<ChipProps>"
                            }
                        },
                        {
                            "name": "image",
                            "default": "null",
                            "description": "Defines the image to display.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "removable",
                            "default": "false",
                            "description": "Whether to display a remove icon.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "removeIcon",
                            "default": "null",
                            "description": "Icon of the remove element.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<ChipProps>"
                            }
                        },
                        {
                            "name": "template",
                            "default": "null",
                            "description": "Template of an item.",
                            "value": {
                                "kind": "expression",
                                "type": "TemplateType<ChipProps>"
                            }
                        },
                        {
                            "name": "imageAlt",
                            "default": "null",
                            "description": "It specifies an alternate text for an image, if the image cannot be displayed.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ChipPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": [
                        {
                            "name": "onImageError",
                            "description": "This event is triggered if an error occurs while loading an image file.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "SyntheticEvent<Element, Event>",
                                    "description": "Browser event."
                                }
                            ]
                        },
                        {
                            "name": "onRemove",
                            "description": "Callback to invoke when a chip is removed.\n*",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "ChipRemoveEvent",
                                    "description": "Custom remove event"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "Chips",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Chips"
                    },
                    "description": "Chips is used to enter multiple values on an input field.\n\n[Live Demo](https://www.primereact.org/chips/)",
                    "doc-url": "https://www.primereact.org/chips/",
                    "attributes": [
                        {
                            "name": "autoFocus",
                            "default": "false",
                            "description": "When present, it specifies that the component should automatically get focus on load.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "inputRef",
                            "default": "null",
                            "description": "Reference of the input element.",
                            "value": {
                                "kind": "expression",
                                "type": "Ref<HTMLInputElement>"
                            }
                        },
                        {
                            "name": "inputId",
                            "default": "null",
                            "description": "Identifier of the input element.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "name",
                            "default": "null",
                            "description": "Name of the input field.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "placeholder",
                            "default": "null",
                            "description": "Advisory information to display on input.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "value",
                            "default": "null",
                            "description": "Value of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "string[]"
                            }
                        },
                        {
                            "name": "max",
                            "default": "null",
                            "description": "Maximum number of entries allowed.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "invalid",
                            "default": "false",
                            "description": "When present, it specifies that the component should have invalid state style.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "disabled",
                            "default": "false",
                            "description": "When present, it specifies that the element should be disabled.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "variant",
                            "default": "outlined",
                            "description": "Specifies the input variant of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "\"filled\" | \"outlined\""
                            }
                        },
                        {
                            "name": "readOnly",
                            "default": "false",
                            "description": "When present, it specifies that the element should be read-only.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "removable",
                            "default": "true",
                            "description": "Whether an item is removable.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean | Function"
                            }
                        },
                        {
                            "name": "removeIcon",
                            "default": "null",
                            "description": "Icon of the remove element.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<ChipsProps>"
                            }
                        },
                        {
                            "name": "tooltip",
                            "default": "null",
                            "description": "Content of the tooltip.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "tooltipOptions",
                            "default": "null",
                            "description": "Configuration of the tooltip, refer to the tooltip documentation for more information.",
                            "value": {
                                "kind": "expression",
                                "type": "TooltipOptions"
                            }
                        },
                        {
                            "name": "ariaLabelledBy",
                            "default": "null",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "separator",
                            "default": "null",
                            "description": "Separator char to add an item when pressed in addition to the enter key.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "allowDuplicate",
                            "default": "true",
                            "description": "Whether to allow duplicate values or not.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "keyfilter",
                            "default": "null",
                            "description": "Format definition of the keys to block.",
                            "value": {
                                "kind": "expression",
                                "type": "KeyFilterType"
                            }
                        },
                        {
                            "name": "addOnBlur",
                            "default": "false",
                            "description": "Whether to add an item when the input loses focus.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ChipsPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": [
                        {
                            "name": "itemTemplate",
                            "description": "The template of each item",
                            "arguments": [
                                {
                                    "name": "item",
                                    "type": "any",
                                    "description": "Current item"
                                }
                            ]
                        },
                        {
                            "name": "onAdd",
                            "description": "Callback to invoke when a chip is added. Return 'false' to prevent the item from being added.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "ChipsAddEvent",
                                    "description": "Custom add event"
                                }
                            ]
                        },
                        {
                            "name": "onRemove",
                            "description": "Callback to invoke when a chip is removed.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "ChipsRemoveEvent",
                                    "description": "Custom remove event"
                                }
                            ]
                        },
                        {
                            "name": "onChange",
                            "description": "Callback to invoke when a chip is added or removed.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "ChipsChangeEvent",
                                    "description": "Custom change event"
                                }
                            ]
                        },
                        {
                            "name": "onFocus",
                            "description": "Callback to invoke when the component gets focus.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "FocusEvent<HTMLInputElement, Element>",
                                    "description": "Browser event"
                                }
                            ]
                        },
                        {
                            "name": "onBlur",
                            "description": "Callback to invoke when the component loses focus.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "FocusEvent<HTMLInputElement, Element>",
                                    "description": "Browser event"
                                }
                            ]
                        },
                        {
                            "name": "onKeyDown",
                            "description": "Callback to invoke when the key pressed.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "KeyboardEvent<HTMLInputElement>",
                                    "description": "Browser event"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "Colorpicker",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Colorpicker"
                    },
                    "description": "ColorPicker is an input component to select a color.\n\n[Live Demo](https://www.primereact.org/colorpicker/)",
                    "doc-url": "https://www.primereact.org/colorpicker/",
                    "attributes": [
                        {
                            "name": "appendTo",
                            "default": "document.body",
                            "description": "DOM element instance where the overlay panel should be mounted. Valid values are any DOM Element and \"self\". The \"self\" value is used to render a component where it is located.",
                            "value": {
                                "kind": "expression",
                                "type": "null | HTMLElement | \"self\" | Function"
                            }
                        },
                        {
                            "name": "autoFocus",
                            "default": "false",
                            "description": "When present, it specifies that the component should automatically get focus on load.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "defaultColor",
                            "default": "ff0000",
                            "description": "Default color to display when value is null.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "format",
                            "default": "hex",
                            "description": "Format to use in value binding.",
                            "value": {
                                "kind": "expression",
                                "type": "\"rgb\" | \"hex\" | \"hsb\""
                            }
                        },
                        {
                            "name": "inline",
                            "default": "false",
                            "description": "Whether to display as an overlay or not.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "inputId",
                            "default": "null",
                            "description": "Identifier of the focus input to match a label defined for the dropdown.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "inputRef",
                            "default": "null",
                            "description": "Reference of the input element.",
                            "value": {
                                "kind": "expression",
                                "type": "Ref<HTMLInputElement>"
                            }
                        },
                        {
                            "name": "inputStyle",
                            "default": "null",
                            "description": "Inline style of the input field.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSProperties"
                            }
                        },
                        {
                            "name": "inputClassName",
                            "default": "null",
                            "description": "Inline style of the input field.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "panelClassName",
                            "default": "null",
                            "description": "Style class of the overlay panel.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "panelStyle",
                            "default": "null",
                            "description": "Inline style of the overlay panel.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSProperties"
                            }
                        },
                        {
                            "name": "tooltip",
                            "default": "null",
                            "description": "Content of the tooltip.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "tooltipOptions",
                            "default": "null",
                            "description": "Configuration of the tooltip, refer to the tooltip documentation for more information.",
                            "value": {
                                "kind": "expression",
                                "type": "TooltipOptions"
                            }
                        },
                        {
                            "name": "transitionOptions",
                            "default": "null",
                            "description": "The properties of CSSTransition can be customized, except for \"nodeRef\" and \"in\" properties.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSTransitionProps"
                            }
                        },
                        {
                            "name": "value",
                            "default": "null",
                            "description": "Value of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "string | ColorPickerRGBType | ColorPickerHSBType"
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ColorPickerPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": [
                        {
                            "name": "onChange",
                            "description": "Callback to invoke when a color is selected.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "ColorPickerChangeEvent",
                                    "description": "Custom change event."
                                }
                            ]
                        },
                        {
                            "name": "onShow",
                            "description": "Callback to invoke when overlay panel becomes visible.",
                            "arguments": []
                        },
                        {
                            "name": "onHide",
                            "description": "Callback to invoke when overlay panel becomes hidden.",
                            "arguments": []
                        }
                    ]
                },
                {
                    "name": "Column",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Column"
                    },
                    "description": "Column component defines various options to specify corresponding features.\nIt is a helper component for DataTable and TreeTable.\n\n[Live Demo](https://www.primereact.org/datatable/)",
                    "doc-url": "https://www.primereact.org/datatable/",
                    "attributes": [
                        {
                            "name": "align",
                            "default": "null",
                            "description": "Aligns the content of the column, valid values are left, right and center.",
                            "value": {
                                "kind": "expression",
                                "type": "null | \"center\" | \"left\" | \"right\""
                            }
                        },
                        {
                            "name": "alignFrozen",
                            "default": "null",
                            "description": "Position of a frozen column, valid values are left and right.",
                            "value": {
                                "kind": "expression",
                                "type": "\"left\" | \"right\""
                            }
                        },
                        {
                            "name": "alignHeader",
                            "default": "null",
                            "description": "Aligns the header of the column, valid values are left, right and center.",
                            "value": {
                                "kind": "expression",
                                "type": "null | \"center\" | \"left\" | \"right\""
                            }
                        },
                        {
                            "name": "body",
                            "default": "null",
                            "description": "Body content of the column.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "bodyClassName",
                            "default": "null",
                            "description": "Style class of the body. If using a function must return a string.",
                            "value": {
                                "kind": "expression",
                                "type": "string | Function"
                            }
                        },
                        {
                            "name": "bodyStyle",
                            "default": "null",
                            "description": "Inline style of the body.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSProperties"
                            }
                        },
                        {
                            "name": "cellEditValidatorEvent",
                            "default": "click",
                            "description": "Event to trigger the validation, possible values are \"click\" and \"blur\".",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ColumnPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "className",
                            "default": "null",
                            "description": "Style class of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "colSpan",
                            "default": "null",
                            "description": "Number of columns to span for grouping.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "columnKey",
                            "default": "null",
                            "description": "Identifier of a column if field property is not defined. Only utilized by reorderableColumns feature at the moment.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "dataType",
                            "default": "null",
                            "description": "Depending on the dataType of the column, suitable match modes are displayed.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "editor",
                            "default": "null",
                            "description": "Function to provide the cell editor input.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "excludeGlobalFilter",
                            "default": "false",
                            "description": "Whether to exclude from global filtering or not.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "expander",
                            "default": "false",
                            "description": "Displays an icon to toggle row expansion.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean | Function"
                            }
                        },
                        {
                            "name": "exportable",
                            "default": "true",
                            "description": "Defines whether the column is exported or not.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "exportField",
                            "default": "null",
                            "description": "Property of a row data used for exporting, defaults to field.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "exportHeader",
                            "default": "null",
                            "description": "Custom export header of the column to be exported.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "field",
                            "default": "null",
                            "description": "Property of a row data.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "filter",
                            "default": "false",
                            "description": "Defines if a column can be filtered.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "filterApply",
                            "default": "null",
                            "description": "Template of apply element in menu.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "filterClear",
                            "default": "null",
                            "description": "Template of clear element in menu.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "filterElement",
                            "default": "null",
                            "description": "Element for custom filtering.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "filterField",
                            "default": "null",
                            "description": "Property of a row data used for filtering, defaults to field.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "filterFooter",
                            "default": "null",
                            "description": "Template of footer element in menu.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "filterHeader",
                            "default": "null",
                            "description": "Template of header element in menu.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "filterHeaderClassName",
                            "default": "null",
                            "description": "Style class of the filter header.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "filterHeaderStyle",
                            "default": "null",
                            "description": "Inline style of the filter header.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSProperties"
                            }
                        },
                        {
                            "name": "filterMatchMode",
                            "default": "null",
                            "description": "Defines filterMatchMode; \"startsWith\", \"contains\", \"endsWith\", \"equals\", \"notEquals\", \"in\", \"notIn\", \"lt\", \"lte\", \"gt\", \"gte\" and \"custom\".",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "filterMatchModeOptions",
                            "default": "null",
                            "description": "An array of label-value pairs to override the global match mode options.",
                            "value": {
                                "kind": "expression",
                                "type": "ColumnFilterMatchModeOptions[]"
                            }
                        },
                        {
                            "name": "filterMaxLength",
                            "default": "null",
                            "description": "Specifies the maximum number of characters allowed in the filter element.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "filterMenuClassName",
                            "default": "null",
                            "description": "Style class of the column filter overlay.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "filterMenuStyle",
                            "default": "null",
                            "description": "Inline style of the column filter overlay.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSProperties"
                            }
                        },
                        {
                            "name": "filterPlaceholder",
                            "default": "null",
                            "description": "Defines placeholder of the input fields.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "filterType",
                            "default": "text",
                            "description": "Type of the filter input field.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "footer",
                            "default": "null",
                            "description": "Footer content of the table.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "footerClassName",
                            "default": "null",
                            "description": "Style class of the footer.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "footerStyle",
                            "default": "null",
                            "description": "Inline style of the footer.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSProperties"
                            }
                        },
                        {
                            "name": "frozen",
                            "default": "false",
                            "description": "Whether the column is fixed in horizontal scrolling or not.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "header",
                            "default": "null",
                            "description": "Header content of the table.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "headerClassName",
                            "default": "null",
                            "description": "Style class of the header.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "headerStyle",
                            "default": "null",
                            "description": "Inline style of the header.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSProperties"
                            }
                        },
                        {
                            "name": "headerTooltip",
                            "default": "null",
                            "description": "Content of the header tooltip.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "headerTooltipOptions",
                            "default": "null",
                            "description": "Configuration of the header tooltip, refer to the tooltip documentation for more information.",
                            "value": {
                                "kind": "expression",
                                "type": "TooltipOptions"
                            }
                        },
                        {
                            "name": "hidden",
                            "default": "false",
                            "description": "Whether the column is rendered.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "maxConstraints",
                            "default": "2",
                            "description": "Maximum number of constraints for a column filter.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "reorderable",
                            "default": "null",
                            "description": "Used to defined reorderableColumns per column when reorderableColumns of table is enabled, defaults to value of reorderableColumns.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "resizeable",
                            "default": "null",
                            "description": "Used to defined resizeableColumns per column when resizeableColumns of table is enabled, defaults to value of resizeableColumns.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "rowEditor",
                            "default": "false",
                            "description": "Displays icons to edit row.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean | Function"
                            }
                        },
                        {
                            "name": "rowReorder",
                            "default": "false",
                            "description": "Whether this column displays an icon to reorder the rows.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "rowReorderIcon",
                            "default": "null",
                            "description": "Icon of the drag handle to reorder rows.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<ColumnProps>"
                            }
                        },
                        {
                            "name": "rowSpan",
                            "default": "null",
                            "description": "Number of rows to span for grouping.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "selectionMode",
                            "default": "null",
                            "description": "Specifies the selection mode, valid values are \"single\", \"multiple\", \"radiobutton\" and \"checkbox\".",
                            "value": {
                                "kind": "expression",
                                "type": "\"multiple\" | \"single\""
                            }
                        },
                        {
                            "name": "showAddButton",
                            "default": "true",
                            "description": "When enabled, a button is displayed to add more rules.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "showApplyButton",
                            "default": "true",
                            "description": "Displays a button to apply the column filtering.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "showClearButton",
                            "default": "true",
                            "description": "Displays a button to clear the column filtering.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "showFilterMatchModes",
                            "default": "true",
                            "description": "Whether to show the match modes selector.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "showFilterMenu",
                            "default": "true",
                            "description": "Whether to display the filter overlay.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "showFilterMenuOptions",
                            "default": "true",
                            "description": "Whether to show the match modes selector and match operator selector.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "showFilterOperator",
                            "default": "true",
                            "description": "When enabled, match all and match any operator selector is displayed.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "sortField",
                            "default": "null",
                            "description": "Name of the field to sort data by default.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "sortable",
                            "default": "false",
                            "description": "Defines if a column is sortable.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "sortableDisabled",
                            "default": "false",
                            "description": "When enabled, the data of columns with this property cannot be sorted or changed by the user.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "style",
                            "default": "null",
                            "description": "Inline style of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSProperties"
                            }
                        }
                    ],
                    "events": [
                        {
                            "name": "cellEditValidator",
                            "description": "Validator function to validate the cell input value.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "ColumnEvent",
                                    "description": "Custom event."
                                }
                            ]
                        },
                        {
                            "name": "filterFunction",
                            "description": "Custom filter function.",
                            "arguments": [
                                {
                                    "name": "value",
                                    "type": "any",
                                    "description": "Value of the filter event."
                                },
                                {
                                    "name": "filter",
                                    "type": "any",
                                    "description": "Filter of the filter event."
                                },
                                {
                                    "name": "filterLocale",
                                    "type": "string",
                                    "description": "Filter locale of the event."
                                },
                                {
                                    "name": "params",
                                    "type": "ColumnFilterEvent",
                                    "description": "Params of the filter event."
                                }
                            ]
                        },
                        {
                            "name": "onBeforeCellEditHide",
                            "description": "Callback to invoke before the cell editor is hidden.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "ColumnEvent",
                                    "description": "Custom event."
                                }
                            ]
                        },
                        {
                            "name": "onBeforeCellEditShow",
                            "description": "Callback to invoke before the cell editor is shown. To prevent editor from showing return false or originalEvent.preventDefault().",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "ColumnEvent",
                                    "description": "Custom event."
                                }
                            ]
                        },
                        {
                            "name": "onCellEditCancel",
                            "description": "Callback to execute when editor is cancelled.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "ColumnEvent",
                                    "description": "Custom event."
                                }
                            ]
                        },
                        {
                            "name": "onCellEditComplete",
                            "description": "Callback to execute when editor is submitted.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "ColumnEvent",
                                    "description": "Custom event."
                                }
                            ]
                        },
                        {
                            "name": "onCellEditInit",
                            "description": "Callback to invoke when cell edit is initiated. To prevent editor from showing return false or originalEvent.preventDefault().",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "ColumnEvent",
                                    "description": "Custom event."
                                }
                            ]
                        },
                        {
                            "name": "onFilterApplyClick",
                            "description": "Callback to invoke when the apply button is clicked.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "ColumnFilterApplyClickEvent",
                                    "description": "Custom filter event."
                                }
                            ]
                        },
                        {
                            "name": "onFilterClear",
                            "description": "Callback to invoke when the filter meta is cleared.",
                            "arguments": []
                        },
                        {
                            "name": "onFilterConstraintAdd",
                            "description": "Callback to invoke when a new constraint is added.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "ColumnFilterConstraintAddEvent",
                                    "description": "Custom filter event."
                                }
                            ]
                        },
                        {
                            "name": "onFilterConstraintRemove",
                            "description": "Callback to invoke when a constraint is removed.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "ColumnFilterConstraintRemoveEvent",
                                    "description": "Custom filter event."
                                }
                            ]
                        },
                        {
                            "name": "onFilterMatchModeChange",
                            "description": "Callback to invoke when the match mode option is changed.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "ColumnFilterMatchModeChangeEvent",
                                    "description": "Custom filter event."
                                }
                            ]
                        },
                        {
                            "name": "onFilterOperatorChange",
                            "description": "Callback to invoke when the filter operator option is changed.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "ColumnFilterOperatorChangeEvent",
                                    "description": "Custom filter event."
                                }
                            ]
                        },
                        {
                            "name": "sortFunction",
                            "description": "Sort function for custom sorting.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "ColumnSortEvent",
                                    "description": "Custom sort event."
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "Columngroup",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Columngroup"
                    },
                    "description": "Columns can be grouped at header and footer sections by defining a ColumnGroup component.\nIt is a helper component for DataTable.\n\n[Live Demo](https://www.primereact.org/datatable/)",
                    "doc-url": "https://www.primereact.org/datatable/",
                    "attributes": [
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ColumnGroupPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": []
                },
                {
                    "name": "Componentbase/componentbase",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Componentbase/componentbase"
                    },
                    "doc-url": ""
                },
                {
                    "name": "Confirmdialog",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Confirmdialog"
                    },
                    "description": "ConfirmDialog uses a Dialog UI with confirmDialog method or <ConfirmDialog> tag.\n\n[Live Demo](https://www.primereact.org/confirmdialog)",
                    "doc-url": "https://www.primereact.org/confirmdialog",
                    "attributes": [
                        {
                            "name": "tagKey",
                            "default": "null",
                            "description": "Unique tag key used to separate the confirmDialog components in the page.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "visible",
                            "default": "false",
                            "description": "Specifies the visibility of the confirm dialog.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "message",
                            "default": "null",
                            "description": "Message of the confirmation.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "rejectLabel",
                            "default": "No",
                            "description": "Label of the reject button.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "acceptLabel",
                            "default": "Yes",
                            "description": "Label of the accept button.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "icon",
                            "default": "null",
                            "description": "Icon to display next to the message.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<ConfirmDialogProps>"
                            }
                        },
                        {
                            "name": "rejectIcon",
                            "default": "null",
                            "description": "Icon of the reject button.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<ConfirmDialogProps>"
                            }
                        },
                        {
                            "name": "acceptIcon",
                            "default": "null",
                            "description": "Icon of the accept button.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<ConfirmDialogProps>"
                            }
                        },
                        {
                            "name": "rejectClassName",
                            "default": "null",
                            "description": "Style class of the reject button.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "acceptClassName",
                            "default": "null",
                            "description": "Style class of the accept button.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "defaultFocus",
                            "default": "accept",
                            "description": "Element to receive the focus when the dialog gets visible, valid values are \"accept\" and \"reject\".",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "appendTo",
                            "default": "document.body",
                            "description": "DOM element instance where the overlay panel should be mounted. Valid values are any DOM Element and \"self\". The \"self\" value is used to render a component where it is located.",
                            "value": {
                                "kind": "expression",
                                "type": "null | HTMLElement | \"self\" | Function"
                            }
                        },
                        {
                            "name": "className",
                            "default": "null",
                            "description": "Style class of the element.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "footer",
                            "default": "null",
                            "description": "Footer content of the confirm dialog.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ConfirmDialogPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "ariaCloseIconLabel",
                            "default": "null",
                            "description": "Defines a string that labels the close icon.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "baseZIndex",
                            "default": "0",
                            "description": "Base zIndex value to use in layering.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "blockScroll",
                            "default": "false",
                            "description": "Whether background scroll should be blocked when dialog is visible.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "breakpoints",
                            "default": "null",
                            "description": "Object literal to define widths per screen size.",
                            "value": {
                                "kind": "expression",
                                "type": "DialogBreakpoints"
                            }
                        },
                        {
                            "name": "closable",
                            "default": "true",
                            "description": "Adds a close icon to the header to hide the dialog.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "closeOnEscape",
                            "default": "true",
                            "description": "Specifies if pressing escape key should hide the dialog.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "contentClassName",
                            "default": "null",
                            "description": "Style class of the content section.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "contentStyle",
                            "default": "null",
                            "description": "Style of the content section.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSProperties"
                            }
                        },
                        {
                            "name": "dismissableMask",
                            "default": "false",
                            "description": "Specifies if clicking the modal background should hide the dialog.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "draggable",
                            "default": "true",
                            "description": "Enables dragging to change the position using header.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "focusOnShow",
                            "default": "true",
                            "description": "When enabled, first button receives focus on show.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "header",
                            "default": "null",
                            "description": "Title content of the dialog.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "headerClassName",
                            "default": "null",
                            "description": "Style class of the header section.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "closeIcon",
                            "default": "null",
                            "description": "Icon to display in the dialog close button.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<DialogProps>"
                            }
                        },
                        {
                            "name": "headerStyle",
                            "default": "null",
                            "description": "Style of the header section.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSProperties"
                            }
                        },
                        {
                            "name": "icons",
                            "default": "null",
                            "description": "Custom icons template for the header.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "id",
                            "default": "null",
                            "description": "Unique identifier of the element.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "keepInViewport",
                            "default": "true",
                            "description": "Keeps dialog in the viewport.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "maskClassName",
                            "default": "null",
                            "description": "Style class of the mask.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "maskStyle",
                            "default": "null",
                            "description": "Inline style of the mask.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSProperties"
                            }
                        },
                        {
                            "name": "maximizable",
                            "default": "false",
                            "description": "Whether the dialog can be displayed full screen.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "maximized",
                            "default": "false",
                            "description": "When enabled, the dialog is initially displayed full screen.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "minX",
                            "default": "0",
                            "description": "Minimum value for the left coordinate of dialog in dragging.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "minY",
                            "default": "0",
                            "description": "Minimum value for the top coordinate of dialog in dragging.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "modal",
                            "default": "true",
                            "description": "Defines if background should be blocked when dialog is displayed.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "position",
                            "default": "center",
                            "description": "Position of the dialog, options are \"center\", \"top\", \"bottom\", \"left\", \"right\", \"top-left\", \"top-right\", \"bottom-left\" or \"bottom-right\".",
                            "value": {
                                "kind": "expression",
                                "type": "\"center\" | \"left\" | \"top\" | \"bottom\" | \"right\" | \"bottom-right\" | \"bottom-left\" | \"top-right\" | \"top-left\""
                            }
                        },
                        {
                            "name": "resizable",
                            "default": "true",
                            "description": "Enables resizing of the content.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "rtl",
                            "default": "false",
                            "description": "When enabled dialog is displayed in RTL direction.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "showHeader",
                            "default": "true",
                            "description": "Whether to show the header or not.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "maximizeIcon",
                            "default": "null",
                            "description": "Icon to display in the dialog maximize button when dialog is not maximized.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<DialogProps>"
                            }
                        },
                        {
                            "name": "minimizeIcon",
                            "default": "null",
                            "description": "Icon to display in the dialog maximize button when dialog is maximized.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<DialogProps>"
                            }
                        },
                        {
                            "name": "style",
                            "default": "null",
                            "description": "Inline style of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSProperties"
                            }
                        },
                        {
                            "name": "transitionOptions",
                            "default": "null",
                            "description": "The properties of CSSTransition can be customized, except for \"nodeRef\" and \"in\" properties.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSTransitionProps"
                            }
                        },
                        {
                            "name": "content",
                            "default": "null",
                            "description": "Specifies a custom content for the dialog. For more complex markup, use the \"content\" slot instead.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        }
                    ],
                    "events": [
                        {
                            "name": "onHide",
                            "description": "Callback to invoke when confirm dialog is hidden.",
                            "arguments": [
                                {
                                    "name": "result",
                                    "type": "string"
                                }
                            ]
                        },
                        {
                            "name": "accept",
                            "description": "Callback to execute when action is confirmed.",
                            "arguments": []
                        },
                        {
                            "name": "reject",
                            "description": "Callback to execute when action is rejected.",
                            "arguments": []
                        },
                        {
                            "name": "onClick",
                            "description": "Callback to invoke when dialog is clicked.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "PointerEvent<HTMLElement>",
                                    "description": "Browser event."
                                }
                            ]
                        },
                        {
                            "name": "onDrag",
                            "description": "Callback to invoke when dragging dialog.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "DragEvent<HTMLElement>",
                                    "description": "Browser event."
                                }
                            ]
                        },
                        {
                            "name": "onDragEnd",
                            "description": "Callback to invoke when dialog dragging is completed.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "DragEvent<HTMLElement>",
                                    "description": "Browser event."
                                }
                            ]
                        },
                        {
                            "name": "onDragStart",
                            "description": "Callback to invoke when dialog dragging is initiated.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "DragEvent<HTMLElement>",
                                    "description": "Browser event."
                                }
                            ]
                        },
                        {
                            "name": "onMaskClick",
                            "description": "Callback to invoke when the mask is clicked.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "MouseEvent<HTMLElement, MouseEvent>",
                                    "description": "Browser event."
                                }
                            ]
                        },
                        {
                            "name": "onMaximize",
                            "description": "Callback to invoke when toggle maximize icon is clicked.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "DialogMaximizeEvent",
                                    "description": "Custom click event."
                                }
                            ]
                        },
                        {
                            "name": "onResize",
                            "description": "Callback to invoke while resizing dialog.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "MouseEvent<HTMLElement, MouseEvent>",
                                    "description": "Browser event."
                                }
                            ]
                        },
                        {
                            "name": "onResizeEnd",
                            "description": "Callback to invoke when dialog resizing is completed.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "MouseEvent<HTMLElement, MouseEvent>",
                                    "description": "Browser event."
                                }
                            ]
                        },
                        {
                            "name": "onResizeStart",
                            "description": "Callback to invoke when dialog resizing is initiated.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "MouseEvent<HTMLElement, MouseEvent>",
                                    "description": "Browser event."
                                }
                            ]
                        },
                        {
                            "name": "onShow",
                            "description": "Callback to invoke when dialog is showed.",
                            "arguments": []
                        }
                    ]
                },
                {
                    "name": "Confirmpopup",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Confirmpopup"
                    },
                    "description": "ConfirmPopup displays a confirmation overlay displayed relatively to its target.\n\n[Live Demo](https://www.primereact.org/confirmpopup)",
                    "doc-url": "https://www.primereact.org/confirmpopup",
                    "attributes": [
                        {
                            "name": "tagKey",
                            "default": "null",
                            "description": "Unique tag key used to separate the confirmPopup components in the page.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "target",
                            "default": "null",
                            "description": "Target element to align the popup.",
                            "value": {
                                "kind": "expression",
                                "type": "HTMLElement"
                            }
                        },
                        {
                            "name": "visible",
                            "default": "false",
                            "description": "Specifies the visibility of the confirm popup.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "defaultFocus",
                            "default": "accept",
                            "description": "Element to receive the focus when the dialog gets visible, valid values are \"accept\" and \"reject\".",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "message",
                            "default": "null",
                            "description": "Message of the confirmation.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "rejectLabel",
                            "default": "No",
                            "description": "Label of the reject button.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "acceptLabel",
                            "default": "Yes",
                            "description": "Label of the accept button.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "icon",
                            "default": "null",
                            "description": "Icon to display next to the message.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<ConfirmPopupProps>"
                            }
                        },
                        {
                            "name": "rejectIcon",
                            "default": "null",
                            "description": "Icon of the reject button.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<ConfirmPopupProps>"
                            }
                        },
                        {
                            "name": "acceptIcon",
                            "default": "null",
                            "description": "Icon of the accept button.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<ConfirmPopupProps>"
                            }
                        },
                        {
                            "name": "rejectClassName",
                            "default": "null",
                            "description": "Style class of the reject button.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "acceptClassName",
                            "default": "null",
                            "description": "Style class of the accept button.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "className",
                            "default": "null",
                            "description": "Style class of the element.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "style",
                            "default": "null",
                            "description": "Inline style of the element.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSProperties"
                            }
                        },
                        {
                            "name": "appendTo",
                            "default": "document.body",
                            "description": "DOM element instance where the overlay panel should be mounted. Valid values are any DOM Element and 'self'. The self value is used to render a component where it is located.",
                            "value": {
                                "kind": "expression",
                                "type": "null | HTMLElement | \"self\" | Function"
                            }
                        },
                        {
                            "name": "dismissable",
                            "default": "true",
                            "description": "Enables to hide the popup when outside is clicked.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "closeOnEscape",
                            "default": "true",
                            "description": "Specifies if pressing escape key should hide the popup.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "footer",
                            "default": "null",
                            "description": "Footer content of the confirm popup.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "transitionOptions",
                            "default": "null",
                            "description": "The properties of CSSTransition can be customized, except for \"nodeRef\" and \"in\" properties.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSTransitionProps"
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ConfirmPopupPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "content",
                            "default": "null",
                            "description": "Specifies a custom content for the dialog. For more complex markup, use the \"content\" slot instead.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        }
                    ],
                    "events": [
                        {
                            "name": "onShow",
                            "description": "Callback to invoke when overlay panel becomes visible.",
                            "arguments": []
                        },
                        {
                            "name": "onHide",
                            "description": "Callback to invoke when confirm popup is hidden.",
                            "arguments": [
                                {
                                    "name": "result",
                                    "type": "string"
                                }
                            ]
                        },
                        {
                            "name": "accept",
                            "description": "Callback to execute when action is confirmed.",
                            "arguments": []
                        },
                        {
                            "name": "reject",
                            "description": "Callback to execute when action is rejected.",
                            "arguments": []
                        }
                    ]
                },
                {
                    "name": "Contextmenu",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Contextmenu"
                    },
                    "description": "ContextMenu displays an overlay menu on right click of its target. Note that components like DataTable has special integration with ContextMenu. Refer to documentation of the individual documentation of the components having a special integration.\n\n[Live Demo](https://www.primereact.org/contextmenu/)",
                    "doc-url": "https://www.primereact.org/contextmenu/",
                    "attributes": [
                        {
                            "name": "model",
                            "default": "null",
                            "description": "An array of menuitems.",
                            "value": {
                                "kind": "expression",
                                "type": "MenuItem[]"
                            }
                        },
                        {
                            "name": "global",
                            "default": "false",
                            "description": "Attaches the menu to document instead of a particular item.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "autoZIndex",
                            "default": "true",
                            "description": "Whether to automatically manage layering.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "ariaLabel",
                            "default": "null",
                            "description": "Used to define a string that labels the component.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "ariaLabelledBy",
                            "default": "null",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "baseZIndex",
                            "default": "0",
                            "description": "Base zIndex value to use in layering.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "breakpoint",
                            "default": "null",
                            "description": "The breakpoint to define the maximum width boundary when responsiveness is enabled.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "scrollHeight",
                            "default": "400px",
                            "description": "Maximum height of the options panel on responsive mode.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "appendTo",
                            "default": "document.body",
                            "description": "DOM element instance where the overlay panel should be mounted. Valid values are any DOM Element and 'self'. The self value is used to render a component where it is located.",
                            "value": {
                                "kind": "expression",
                                "type": "null | HTMLElement | \"self\" | Function"
                            }
                        },
                        {
                            "name": "transitionOptions",
                            "default": "null",
                            "description": "The properties of CSSTransition can be customized, except for \"nodeRef\" and \"in\" properties.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSTransitionProps"
                            }
                        },
                        {
                            "name": "submenuIcon",
                            "default": "null",
                            "description": "Icon of the submenu.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<ContextMenuProps>"
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ContextMenuPassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": [
                        {
                            "name": "onShow",
                            "description": "Callback to invoke when a popup menu is shown.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "SyntheticEvent<Element, Event>",
                                    "description": "Browser event."
                                }
                            ]
                        },
                        {
                            "name": "onHide",
                            "description": "Callback to invoke when a popup menu is hidden.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "SyntheticEvent<Element, Event>",
                                    "description": "Browser event."
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "Csstransition",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Csstransition"
                    },
                    "description": "CSSTransition component wraps [ReactCSSTransition](https://reactcommunity.org/react-transition-group/css-transition) API.\nIt allows us to easily manage animations. All PrimeReact components use this component.\n\n[Live Demo](https://www.primereact.org/dropdown/)",
                    "doc-url": "https://www.primereact.org/dropdown/",
                    "attributes": [],
                    "events": []
                },
                {
                    "name": "Datascroller",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Datascroller"
                    },
                    "description": "DataScroller displays data with on demand loading using scroll.\n\n[Live Demo](https://www.primereact.org/datascroller/)",
                    "doc-url": "https://www.primereact.org/datascroller/",
                    "attributes": [
                        {
                            "name": "buffer",
                            "default": "0.9",
                            "description": "Number of buffer size.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "emptyMessage",
                            "default": "No records found",
                            "description": "Text to display when there is no data.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "footer",
                            "default": "null",
                            "description": "Label of footer.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "header",
                            "default": "null",
                            "description": "Label of header.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "inline",
                            "default": "false",
                            "description": "Defines if the event target to listen the scroll event is the element itself.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "lazy",
                            "default": "false",
                            "description": "Defines if data is loaded and interacted with in lazy manner.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "loader",
                            "default": "null",
                            "description": "Determines whether data is loaded by a target element.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "rows",
                            "default": "null",
                            "description": "Number of rows to fetch in a load event.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "scrollHeight",
                            "default": "null",
                            "description": "Max height of the content area in inline mode.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "value",
                            "default": "null",
                            "description": "An array of objects to display.",
                            "value": {
                                "kind": "expression",
                                "type": "any[]"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "DataScrollerPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": [
                        {
                            "name": "itemTemplate",
                            "description": "Function that gets an item in the value and returns the content for it.",
                            "arguments": [
                                {
                                    "name": "item",
                                    "type": "any",
                                    "description": "Current item"
                                }
                            ]
                        },
                        {
                            "name": "onLazyLoad",
                            "description": "Callback to invoke in lazy mode to load new data.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "DataScrollerLazyLoadEvents",
                                    "description": "Custom lazy event"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "Datatable",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Datatable"
                    },
                    "description": "DataTable displays data in tabular format.\n\n[Live Demo](https://www.primereact.org/datatable/)",
                    "doc-url": "https://www.primereact.org/datatable/",
                    "attributes": [],
                    "events": []
                },
                {
                    "name": "Dataview",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Dataview"
                    },
                    "description": "DataView displays data in grid or list layout with pagination and sorting features.\n\n[Live Demo](https://www.primereact.org/dataview/)",
                    "doc-url": "https://www.primereact.org/dataview/",
                    "attributes": [
                        {
                            "name": "header",
                            "default": "null",
                            "description": "Header content of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "footer",
                            "default": "null",
                            "description": "Footer content of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "value",
                            "default": "null",
                            "description": "An array of objects to display.",
                            "value": {
                                "kind": "expression",
                                "type": "any[]"
                            }
                        },
                        {
                            "name": "layout",
                            "default": "list",
                            "description": "Layout of the items, valid values are \"list\" and \"grid\".",
                            "value": {
                                "kind": "expression",
                                "type": "\"grid\" | \"list\" | string & Record<string, unknown>"
                            }
                        },
                        {
                            "name": "dataKey",
                            "default": "null",
                            "description": "Name of the field that uniquely identifies a record in the data. Should be a unique business key to prevent re-rendering.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "rows",
                            "default": "null",
                            "description": "Number of rows to display per page.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "first",
                            "default": "0",
                            "description": "Index of the first record to render.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "totalRecords",
                            "default": "null",
                            "description": "Number of total records, defaults to length of value when not defined.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "paginator",
                            "default": "false",
                            "description": "When specified as true, enables the pagination.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "paginatorPosition",
                            "default": "bottom",
                            "description": "Position of the paginator, options are \"top\",\"bottom\" or \"both\".",
                            "value": {
                                "kind": "expression",
                                "type": "\"both\" | \"top\" | \"bottom\""
                            }
                        },
                        {
                            "name": "alwaysShowPaginator",
                            "default": "true",
                            "description": "Whether to show it even there is only one page.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "paginatorClassName",
                            "default": "null",
                            "description": "Style class of the paginator element.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "paginatorTemplate",
                            "default": "FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown",
                            "description": "Template of the paginator. For details, refer to the template section of the paginator documentation for further options.",
                            "value": {
                                "kind": "expression",
                                "type": "PaginatorTemplate"
                            }
                        },
                        {
                            "name": "paginatorLeft",
                            "default": "null",
                            "description": "Content for the left side of the paginator.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "paginatorRight",
                            "default": "null",
                            "description": "Content for the right side of the paginator.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "pageLinkSize",
                            "default": "5",
                            "description": "Number of page links to display.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "paginatorDropdownAppendTo",
                            "default": "document.body",
                            "description": "DOM element instance where the overlay panel should be mounted. Valid values are any DOM Element and 'self'. The self value is used to render a component where it is located.",
                            "value": {
                                "kind": "expression",
                                "type": "null | HTMLElement | \"self\" | Function"
                            }
                        },
                        {
                            "name": "rowsPerPageOptions",
                            "default": "null",
                            "description": "Array of integer values to display inside rows per page dropdown.",
                            "value": {
                                "kind": "expression",
                                "type": "number[]"
                            }
                        },
                        {
                            "name": "currentPageReportTemplate",
                            "default": "({currentPage} of {totalPages})",
                            "description": "Template of the current page report element.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "emptyMessage",
                            "default": "No records found.",
                            "description": "Text to display when there is no data.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "sortField",
                            "default": "null",
                            "description": "Name of the field to sort data by default.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "sortOrder",
                            "default": "null",
                            "description": "Order to sort the data by default.",
                            "value": {
                                "kind": "expression",
                                "type": "null | 0 | 1 | -1"
                            }
                        },
                        {
                            "name": "lazy",
                            "default": "false",
                            "description": "Defines if data is loaded and interacted with in lazy manner.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "loading",
                            "default": "null",
                            "description": "Display loading icon of the button.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "loadingIcon",
                            "default": "null",
                            "description": "Name of the loading icon or JSX.Element for loading icon.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<DataViewProps>"
                            }
                        },
                        {
                            "name": "gutter",
                            "default": "false",
                            "description": "Whether the grid structure in the container has gutter. Default value is false.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "DataViewPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": [
                        {
                            "name": "onPage",
                            "description": "Callback to invoke on pagination.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "DataViewPageEvent",
                                    "description": "Custom page event."
                                }
                            ]
                        },
                        {
                            "name": "itemTemplate",
                            "description": "Function that gets the option along with the layout mode and returns the content.",
                            "arguments": [
                                {
                                    "name": "item",
                                    "type": "any",
                                    "description": "Current item."
                                },
                                {
                                    "name": "layout",
                                    "type": "\"grid\" | \"list\" | string & Record<string, unknown>",
                                    "description": "Current layout."
                                }
                            ]
                        },
                        {
                            "name": "listTemplate",
                            "description": "Function that gets the options along with the layout mode and returns the content.",
                            "arguments": [
                                {
                                    "name": "items",
                                    "type": "any[]"
                                },
                                {
                                    "name": "layout",
                                    "type": "\"grid\" | \"list\" | string & Record<string, unknown>",
                                    "description": "Current layout."
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "Deferredcontent",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Deferredcontent"
                    },
                    "description": "DeferredContent postpones the loading the content that is initially not in the viewport until it becomes visible on scroll.\n\n[Live Demo](https://www.primereact.org/deferredcontent/)",
                    "doc-url": "https://www.primereact.org/deferredcontent/",
                    "attributes": [
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "DeferredContentPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        }
                    ],
                    "events": [
                        {
                            "name": "onLoad",
                            "description": "Callback to invoke when deferred content is loaded.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "SyntheticEvent<Element, Event>",
                                    "description": "Event object"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "Dialog",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Dialog"
                    },
                    "description": "Dialog is a container to display content in an overlay window.\n\n[Live Demo](https://www.primereact.org/dialog)",
                    "doc-url": "https://www.primereact.org/dialog",
                    "attributes": [
                        {
                            "name": "appendTo",
                            "default": "document.body",
                            "description": "DOM element instance where the overlay panel should be mounted. Valid values are any DOM Element and 'self'. The self value is used to render a component where it is located.",
                            "value": {
                                "kind": "expression",
                                "type": "null | HTMLElement | \"self\" | Function"
                            }
                        },
                        {
                            "name": "ariaCloseIconLabel",
                            "default": "null",
                            "description": "Defines a string that labels the close icon.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "baseZIndex",
                            "default": "0",
                            "description": "Base zIndex value to use in layering.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "blockScroll",
                            "default": "false",
                            "description": "Whether background scroll should be blocked when dialog is visible.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "breakpoints",
                            "default": "null",
                            "description": "Object literal to define widths per screen size.",
                            "value": {
                                "kind": "expression",
                                "type": "DialogBreakpoints"
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "className",
                            "default": "null",
                            "description": "Style class of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "closable",
                            "default": "true",
                            "description": "Adds a close icon to the header to hide the dialog.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "closeOnEscape",
                            "default": "true",
                            "description": "Specifies if pressing escape key should hide the dialog.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "contentClassName",
                            "default": "null",
                            "description": "Style class of the content section.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "contentStyle",
                            "default": "null",
                            "description": "Style of the content section.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSProperties"
                            }
                        },
                        {
                            "name": "dismissableMask",
                            "default": "false",
                            "description": "Specifies if clicking the modal background should hide the dialog.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "draggable",
                            "default": "true",
                            "description": "Enables dragging to change the position using header.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "focusOnShow",
                            "default": "true",
                            "description": "When enabled, first button receives focus on show.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "footer",
                            "default": "null",
                            "description": "Footer content of the dialog.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "header",
                            "default": "null",
                            "description": "Title content of the dialog.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "headerClassName",
                            "default": "null",
                            "description": "Style class of the header section.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "closeIcon",
                            "default": "null",
                            "description": "Icon to display in the dialog close button.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<DialogProps>"
                            }
                        },
                        {
                            "name": "headerStyle",
                            "default": "null",
                            "description": "Style of the header section.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSProperties"
                            }
                        },
                        {
                            "name": "icons",
                            "default": "null",
                            "description": "Custom icons template for the header.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "id",
                            "default": "null",
                            "description": "Unique identifier of the element.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "keepInViewport",
                            "default": "true",
                            "description": "Keeps dialog in the viewport.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "maskClassName",
                            "default": "null",
                            "description": "Style class of the mask.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "maskStyle",
                            "default": "null",
                            "description": "Inline style of the mask.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSProperties"
                            }
                        },
                        {
                            "name": "maximizable",
                            "default": "false",
                            "description": "Whether the dialog can be displayed full screen.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "maximized",
                            "default": "false",
                            "description": "When enabled, the dialog is initially displayed full screen.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "minX",
                            "default": "0",
                            "description": "Minimum value for the left coordinate of dialog in dragging.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "minY",
                            "default": "0",
                            "description": "Minimum value for the top coordinate of dialog in dragging.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "modal",
                            "default": "true",
                            "description": "Defines if background should be blocked when dialog is displayed.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "position",
                            "default": "center",
                            "description": "Position of the dialog, options are \"center\", \"top\", \"bottom\", \"left\", \"right\", \"top-left\", \"top-right\", \"bottom-left\" or \"bottom-right\".",
                            "value": {
                                "kind": "expression",
                                "type": "\"center\" | \"left\" | \"top\" | \"bottom\" | \"right\" | \"bottom-right\" | \"bottom-left\" | \"top-right\" | \"top-left\""
                            }
                        },
                        {
                            "name": "resizable",
                            "default": "true",
                            "description": "Enables resizing of the content.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "rtl",
                            "default": "false",
                            "description": "When enabled dialog is displayed in RTL direction.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "showHeader",
                            "default": "true",
                            "description": "Whether to show the header or not.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "maximizeIcon",
                            "default": "null",
                            "description": "Icon to display in the dialog maximize button when dialog is not maximized.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<DialogProps>"
                            }
                        },
                        {
                            "name": "minimizeIcon",
                            "default": "null",
                            "description": "Icon to display in the dialog maximize button when dialog is maximized.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<DialogProps>"
                            }
                        },
                        {
                            "name": "style",
                            "default": "null",
                            "description": "Inline style of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSProperties"
                            }
                        },
                        {
                            "name": "transitionOptions",
                            "default": "null",
                            "description": "The properties of CSSTransition can be customized, except for \"nodeRef\" and \"in\" properties.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSTransitionProps"
                            }
                        },
                        {
                            "name": "visible",
                            "default": "false",
                            "description": "Specifies the visibility of the dialog.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "DialogPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "content",
                            "default": "null",
                            "description": "Specifies a custom content for the dialog. For more complex markup, use the \"content\" slot instead.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        }
                    ],
                    "events": [
                        {
                            "name": "onClick",
                            "description": "Callback to invoke when dialog is clicked.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "PointerEvent<HTMLElement>",
                                    "description": "Browser event."
                                }
                            ]
                        },
                        {
                            "name": "onDrag",
                            "description": "Callback to invoke when dragging dialog.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "DragEvent<HTMLElement>",
                                    "description": "Browser event."
                                }
                            ]
                        },
                        {
                            "name": "onDragEnd",
                            "description": "Callback to invoke when dialog dragging is completed.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "DragEvent<HTMLElement>",
                                    "description": "Browser event."
                                }
                            ]
                        },
                        {
                            "name": "onDragStart",
                            "description": "Callback to invoke when dialog dragging is initiated.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "DragEvent<HTMLElement>",
                                    "description": "Browser event."
                                }
                            ]
                        },
                        {
                            "name": "onHide",
                            "description": "Callback to invoke when dialog is hidden (Required).",
                            "arguments": []
                        },
                        {
                            "name": "onMaskClick",
                            "description": "Callback to invoke when the mask is clicked.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "MouseEvent<HTMLElement, MouseEvent>",
                                    "description": "Browser event."
                                }
                            ]
                        },
                        {
                            "name": "onMaximize",
                            "description": "Callback to invoke when toggle maximize icon is clicked.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "DialogMaximizeEvent",
                                    "description": "Custom click event."
                                }
                            ]
                        },
                        {
                            "name": "onResize",
                            "description": "Callback to invoke while resizing dialog.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "MouseEvent<HTMLElement, MouseEvent>",
                                    "description": "Browser event."
                                }
                            ]
                        },
                        {
                            "name": "onResizeEnd",
                            "description": "Callback to invoke when dialog resizing is completed.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "MouseEvent<HTMLElement, MouseEvent>",
                                    "description": "Browser event."
                                }
                            ]
                        },
                        {
                            "name": "onResizeStart",
                            "description": "Callback to invoke when dialog resizing is initiated.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "MouseEvent<HTMLElement, MouseEvent>",
                                    "description": "Browser event."
                                }
                            ]
                        },
                        {
                            "name": "onShow",
                            "description": "Callback to invoke when dialog is showed.",
                            "arguments": []
                        }
                    ]
                },
                {
                    "name": "Divider",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Divider"
                    },
                    "description": "Divider is used to separate contents.\n\n[Live Demo](https://www.primereact.org/divider/)",
                    "doc-url": "https://www.primereact.org/divider/",
                    "attributes": [
                        {
                            "name": "align",
                            "default": "null",
                            "description": "Alignment of the content, options are \"left\", \"center\", \"right\" for horizontal layout and \"top\", \"center\", \"bottom\" for vertical.",
                            "value": {
                                "kind": "expression",
                                "type": "\"center\" | \"left\" | \"top\" | \"bottom\" | \"right\""
                            }
                        },
                        {
                            "name": "layout",
                            "default": "horizontal",
                            "description": "Specifies the orientation, valid values are \"horizontal\" and \"vertical\".",
                            "value": {
                                "kind": "expression",
                                "type": "\"horizontal\" | \"vertical\""
                            }
                        },
                        {
                            "name": "type",
                            "default": "solid",
                            "description": "Border style type, default is \"solid\" and other options are \"dashed\" and \"dotted\".",
                            "value": {
                                "kind": "expression",
                                "type": "\"dashed\" | \"dotted\" | \"solid\""
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "DividerPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": []
                },
                {
                    "name": "Dock",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Dock"
                    },
                    "description": "Dock is a navigation component consisting of menuitems.\n\n[Live Demo](https://www.primereact.org/dock/)",
                    "doc-url": "https://www.primereact.org/dock/",
                    "attributes": [
                        {
                            "name": "model",
                            "default": "null",
                            "description": "MenuModel instance to define the action items.",
                            "value": {
                                "kind": "expression",
                                "type": "MenuItem[]"
                            }
                        },
                        {
                            "name": "position",
                            "default": "bottom",
                            "description": "Position of element. Valid values are 'bottom', 'top', 'left' and 'right'.",
                            "value": {
                                "kind": "expression",
                                "type": "\"left\" | \"top\" | \"bottom\" | \"right\""
                            }
                        },
                        {
                            "name": "magnification",
                            "default": "null",
                            "description": "Whether to allow scale animation.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "header",
                            "default": "null",
                            "description": "Template of header element.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "footer",
                            "default": "null",
                            "description": "Template of footer element.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "DockPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "tabIndex",
                            "default": "null",
                            "description": "Index of the element in tabbing order.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": [
                        {
                            "name": "onFocus",
                            "description": "Callback to invoke when dock receives focus.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "SyntheticEvent<Element, Event>",
                                    "description": "Browser event."
                                }
                            ]
                        },
                        {
                            "name": "onBlur",
                            "description": "Callback to invoke when dock loses focus.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "SyntheticEvent<Element, Event>",
                                    "description": "Browser event."
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "Dropdown",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Dropdown"
                    },
                    "description": "Dropdown also known as Select, is used to choose an item from a collection of options.\n\n[Live Demo](https://www.primereact.org/dropdown/)",
                    "doc-url": "https://www.primereact.org/dropdown/",
                    "attributes": [
                        {
                            "name": "appendTo",
                            "default": "document.body",
                            "description": "DOM element instance where the overlay panel should be mounted. Valid values are any DOM Element and \"self\". The \"self\" value is used to render a component where it is located.",
                            "value": {
                                "kind": "expression",
                                "type": "null | HTMLElement | \"self\" | Function"
                            }
                        },
                        {
                            "name": "ariaLabel",
                            "default": "null",
                            "description": "Used to define a string that labels the component.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "ariaLabelledBy",
                            "default": "null",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "autoFocus",
                            "default": "false",
                            "description": "When present, it specifies that the component should automatically get focus on load.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "className",
                            "default": "null",
                            "description": "Style class of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "clearIcon",
                            "default": "null",
                            "description": "Icon of the dropdown.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<DropdownProps>"
                            }
                        },
                        {
                            "name": "dataKey",
                            "default": "null",
                            "description": "A property to uniquely match the value in options for better performance.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "invalid",
                            "default": "false",
                            "description": "When present, it specifies that the component should have invalid state style.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "disabled",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "variant",
                            "default": "outlined",
                            "description": "Specifies the input variant of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "\"filled\" | \"outlined\""
                            }
                        },
                        {
                            "name": "dropdownIcon",
                            "default": "null",
                            "description": "Icon of the dropdown.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<DropdownProps>"
                            }
                        },
                        {
                            "name": "editable",
                            "default": "false",
                            "description": "When present, custom value instead of predefined options can be entered using the editable input field.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "highlightOnSelect",
                            "default": "true",
                            "description": "Whether the selected option will be add highlight class.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "checkmark",
                            "default": "false",
                            "description": "Whether the selected option will be shown with a check mark.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "emptyFilterMessage",
                            "default": "No available options",
                            "description": "Template to display when filtering does not return any results.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "emptyMessage",
                            "default": "No results found",
                            "description": "Text to display when there are no options available.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "filter",
                            "default": "false",
                            "description": "When specified, displays an input field to filter the items on keyup.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "filterIcon",
                            "default": "null",
                            "description": "Icon of the filter to search.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<DropdownProps>"
                            }
                        },
                        {
                            "name": "filterBy",
                            "default": "label",
                            "description": "When filtering is enabled, filterBy decides which field or fields (comma separated) to search against.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "filterClearIcon",
                            "default": "null",
                            "description": "Icon of the filter to clear.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<DropdownProps>"
                            }
                        },
                        {
                            "name": "filterInputAutoFocus",
                            "default": "false",
                            "description": "When the panel is opened, it specifies that the filter input should focus automatically.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "filterLocale",
                            "default": "null",
                            "description": "Locale to use in filtering. The default locale is the host environment's current locale.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "filterMatchMode",
                            "default": "contains",
                            "description": "Defines how the items are filtered, valid values are \"contains\", (default) \"startsWith\", \"endsWith\", \"equals\" and \"notEquals\".",
                            "value": {
                                "kind": "expression",
                                "type": "\"endsWith\" | \"startsWith\" | \"contains\" | \"equals\" | \"notEquals\""
                            }
                        },
                        {
                            "name": "filterPlaceholder",
                            "default": "null",
                            "description": "Placeholder text to show when filter input is empty.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "filterTemplate",
                            "default": "null",
                            "description": "The template of filter element.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "focusInputRef",
                            "default": "null",
                            "description": "Reference of the focusable input element.",
                            "value": {
                                "kind": "expression",
                                "type": "Ref<HTMLInputElement>"
                            }
                        },
                        {
                            "name": "id",
                            "default": "null",
                            "description": "Unique identifier of the element.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "selectOnFocus",
                            "default": "false",
                            "description": "When enabled, the focused tab is activated.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "focusOnHover",
                            "default": "true",
                            "description": "When enabled, the focus is placed on the hovered option.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "autoOptionFocus",
                            "default": "false",
                            "description": "Whether to focus on the first visible or selected element.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "inputId",
                            "default": "null",
                            "description": "Identifier of the focusable input.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "inputRef",
                            "default": "null",
                            "description": "Reference of the input element.",
                            "value": {
                                "kind": "expression",
                                "type": "Ref<HTMLSelectElement>"
                            }
                        },
                        {
                            "name": "itemTemplate",
                            "default": "null",
                            "description": "The template of items.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "loading",
                            "default": "false",
                            "description": "Displays a loader to indicate data load is in progress.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "loadingIcon",
                            "default": "null",
                            "description": "The icon to show while indicating data load is in progress.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<DropdownProps>"
                            }
                        },
                        {
                            "name": "maxLength",
                            "default": "null",
                            "description": "Maximum number of characters to be typed on an editable input.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "name",
                            "default": "null",
                            "description": "Name of the input element.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "optionDisabled",
                            "default": "null",
                            "description": "Property name or getter function to use as the disabled flag of an option, defaults to false when not defined.",
                            "value": {
                                "kind": "expression",
                                "type": "string | Function"
                            }
                        },
                        {
                            "name": "optionGroupChildren",
                            "default": "items",
                            "description": "Property name or getter function that refers to the children options of option group.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "optionGroupLabel",
                            "default": "null",
                            "description": "Property name or getter function to use as the label of an option group.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "optionGroupTemplate",
                            "default": "null",
                            "description": "Template of an option group item.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "optionLabel",
                            "default": "null",
                            "description": "Name of the label field of an option when arbitrary objects are used as options instead of SelectItems.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "optionValue",
                            "default": "null",
                            "description": "Name of the value field of an option when arbitrary objects are used as options instead of SelectItems.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "options",
                            "default": "null",
                            "description": "An array of selectitems to display as the available options.",
                            "value": {
                                "kind": "expression",
                                "type": "SelectItemOptionsType"
                            }
                        },
                        {
                            "name": "panelClassName",
                            "default": "null",
                            "description": "Style class of the overlay panel element.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "panelFooterTemplate",
                            "default": "null",
                            "description": "Template of the panel footer.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "panelStyle",
                            "default": "null",
                            "description": "Inline style of the overlay panel element.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSProperties"
                            }
                        },
                        {
                            "name": "placeholder",
                            "default": "null",
                            "description": "Default text to display when no option is selected.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "required",
                            "default": "false",
                            "description": "When present, it specifies that an input field must be filled out before submitting the form.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "resetFilterOnHide",
                            "default": "false",
                            "description": "Clears the filter value when hiding the dropdown.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "scrollHeight",
                            "default": "200px",
                            "description": "Height of the viewport in pixels, a scrollbar is defined if height of list exceeds this value.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "showClear",
                            "default": "false",
                            "description": "When enabled, a clear icon is displayed to clear the value.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "showFilterClear",
                            "default": "false",
                            "description": "When enabled, a clear icon is displayed to clear the filtered value.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "showOnFocus",
                            "default": "false",
                            "description": "When enabled, overlay panel will be visible with input focus.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "style",
                            "default": "null",
                            "description": "Inline style of the element.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSProperties"
                            }
                        },
                        {
                            "name": "tabIndex",
                            "default": "null",
                            "description": "Index of the element in tabbing order.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "tooltip",
                            "default": "null",
                            "description": "Content of the tooltip.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "tooltipOptions",
                            "default": "null",
                            "description": "Configuration of the tooltip, refer to the tooltip documentation for more information.",
                            "value": {
                                "kind": "expression",
                                "type": "TooltipOptions"
                            }
                        },
                        {
                            "name": "transitionOptions",
                            "default": "null",
                            "description": "The properties of CSSTransition can be customized, except for \"nodeRef\" and \"in\" properties.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSTransitionProps"
                            }
                        },
                        {
                            "name": "value",
                            "default": "null",
                            "description": "Value of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "any"
                            }
                        },
                        {
                            "name": "valueTemplate",
                            "default": "null",
                            "description": "The template of selected item.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "virtualScrollerOptions",
                            "default": "null",
                            "description": "Whether to use the virtualScroller feature. The properties of VirtualScroller component can be used like an object in it.",
                            "value": {
                                "kind": "expression",
                                "type": "VirtualScrollerProps"
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "DropdownPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": [
                        {
                            "name": "onChange",
                            "description": "Callback to invoke on value change",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "DropdownChangeEvent",
                                    "description": "Custom change event"
                                }
                            ]
                        },
                        {
                            "name": "onFocus",
                            "description": "Callback to invoke when the element receives focus.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "FocusEvent<HTMLInputElement, Element>",
                                    "description": "Browser event"
                                }
                            ]
                        },
                        {
                            "name": "onBlur",
                            "description": "Callback to invoke when the element loses focus.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "FocusEvent<HTMLInputElement, Element>",
                                    "description": "Browser event"
                                }
                            ]
                        },
                        {
                            "name": "onMouseDown",
                            "description": "Callback to invoke to when a mouse button is pressed.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "MouseEvent<HTMLElement, MouseEvent>",
                                    "description": "Browser event"
                                }
                            ]
                        },
                        {
                            "name": "onContextMenu",
                            "description": "Callback to invoke on right-click.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "MouseEvent<HTMLElement, MouseEvent>",
                                    "description": "Browser event"
                                }
                            ]
                        },
                        {
                            "name": "onShow",
                            "description": "Callback to invoke when the overlay is shown.",
                            "arguments": []
                        },
                        {
                            "name": "onHide",
                            "description": "Callback to invoke when the overlay is hidden.",
                            "arguments": []
                        },
                        {
                            "name": "onFilter",
                            "description": "Callback to invoke when the value is filtered.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "DropdownFilterEvent",
                                    "description": "Custom filter event"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "Editor",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Editor"
                    },
                    "description": "Editor is rich text editor component based on Quill.\n\n[Live Demo](https://www.primereact.org/editor/)",
                    "doc-url": "https://www.primereact.org/editor/",
                    "attributes": [
                        {
                            "name": "value",
                            "default": "null",
                            "description": "Value of the content.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "placeholder",
                            "default": "null",
                            "description": "Placeholder text to show when editor is empty.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "readOnly",
                            "default": "false",
                            "description": "Whether to instantiate the editor to read-only mode.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "modules",
                            "default": "null",
                            "description": "Modules configuration, see [here](https://quilljs.com/docs/modules/) for available options.",
                            "value": {
                                "kind": "expression",
                                "type": "any"
                            }
                        },
                        {
                            "name": "formats",
                            "default": "null",
                            "description": "Whitelist of formats to display, see [here](https://quilljs.com/docs/formats/) for available options.",
                            "value": {
                                "kind": "expression",
                                "type": "string[]"
                            }
                        },
                        {
                            "name": "theme",
                            "default": "null",
                            "description": "The theme of editor",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "showHeader",
                            "default": "false",
                            "description": "Whether to show the header of editor.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "headerTemplate",
                            "default": "null",
                            "description": "Style and modules of the toolbar.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "EditorPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": [
                        {
                            "name": "onTextChange",
                            "description": "Callback to invoke when text of editor changes.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "EditorTextChangeEvent",
                                    "description": "Custom text change event"
                                }
                            ]
                        },
                        {
                            "name": "onSelectionChange",
                            "description": "Callback to invoke when selected text of editor changes.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "EditorSelectionChangeEvent",
                                    "description": "Custom selection change event"
                                }
                            ]
                        },
                        {
                            "name": "onLoad",
                            "description": "Callback to invoke when the quill modules are loaded.",
                            "arguments": [
                                {
                                    "name": "quill",
                                    "type": "any",
                                    "description": "Quill instance"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "Fieldset",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Fieldset"
                    },
                    "description": "Fieldset is an input component that provides real-time suggestions when being typed.\n\n[Live Demo](https://www.primereact.org/fieldset/)",
                    "doc-url": "https://www.primereact.org/fieldset/",
                    "attributes": [
                        {
                            "name": "legend",
                            "default": "null",
                            "description": "Header text of the fieldset.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "toggleable",
                            "default": "false",
                            "description": "When specified, content can toggled by clicking the legend.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "collapsed",
                            "default": "false",
                            "description": "Defines the default visibility state of the content.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "collapseIcon",
                            "default": "null",
                            "description": "Icon of an expanded tab.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<FieldsetProps>"
                            }
                        },
                        {
                            "name": "transitionOptions",
                            "default": "null",
                            "description": "The properties of CSSTransition can be customized, except for \"nodeRef\" and \"in\" properties.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSTransitionProps"
                            }
                        },
                        {
                            "name": "expandIcon",
                            "default": "null",
                            "description": "Icon of an collapsed tab.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<FieldsetProps>"
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "FieldsetPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": [
                        {
                            "name": "onExpand",
                            "description": "Callback to invoke when a tab gets expanded.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "MouseEvent<HTMLElement, MouseEvent>",
                                    "description": "Browser event."
                                }
                            ]
                        },
                        {
                            "name": "onCollapse",
                            "description": "Callback to invoke when an active tab is collapsed by clicking on the header.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "MouseEvent<HTMLElement, MouseEvent>",
                                    "description": "Browser event."
                                }
                            ]
                        },
                        {
                            "name": "onToggle",
                            "description": "Callback to invoke when a tab gets expanded.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "FieldsetToggleEvent",
                                    "description": "Custom toggle event."
                                }
                            ]
                        },
                        {
                            "name": "onClick",
                            "description": "Callback to invoke when fieldset is clicked.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "MouseEvent<HTMLElement, MouseEvent>",
                                    "description": "Browser event."
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "Fileupload",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Fileupload"
                    },
                    "description": "FileUpload is an advanced uploader with dragdrop support, multi file uploads, auto uploading, progress tracking and validations.\n\n[Live Demo](https://www.primereact.org/fileupload)",
                    "doc-url": "https://www.primereact.org/fileupload",
                    "attributes": [
                        {
                            "name": "id",
                            "default": "null",
                            "description": "Unique identifier of the element.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "name",
                            "default": "null",
                            "description": "Name of the request parameter to identify the files at backend.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "url",
                            "default": "null",
                            "description": "Remote url to upload the files.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "mode",
                            "default": "advanced",
                            "description": "Defines the UI of the component, possible values are \"advanced\" and \"basic\".",
                            "value": {
                                "kind": "expression",
                                "type": "\"basic\" | \"advanced\""
                            }
                        },
                        {
                            "name": "multiple",
                            "default": "false",
                            "description": "Used to select multiple files at once from file dialog.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "accept",
                            "default": "false",
                            "description": "Pattern to restrict the allowed file types such as \"image/*\".",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "removeIcon",
                            "default": "null",
                            "description": "Icon of the remove element.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<FileUploadProps>"
                            }
                        },
                        {
                            "name": "disabled",
                            "default": "false",
                            "description": "Disables the upload functionality.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "auto",
                            "default": "false",
                            "description": "When enabled, upload begins automatically after selection is completed.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "maxFileSize",
                            "default": "null",
                            "description": "Maximum file size allowed in bytes.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "invalidFileSizeMessageSummary",
                            "default": "Invalid file size",
                            "description": "Summary message of the invalid fize size.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "invalidFileSizeMessageDetail",
                            "default": "\"Maximum upload size is.\"",
                            "description": "Detail message of the invalid fize size.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "style",
                            "default": "null",
                            "description": "Inline style of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSProperties"
                            }
                        },
                        {
                            "name": "className",
                            "default": "null",
                            "description": "Style class of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "withCredentials",
                            "default": "false",
                            "description": "Cross-site Access-Control requests should be made using credentials such as cookies, authorization headers or TLS client certificates.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "previewWidth",
                            "default": "50",
                            "description": "Width of the image thumbnail in pixels.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "chooseLabel",
                            "default": "null",
                            "description": "Label of the choose button. Defaults to global value in Locale configuration.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "uploadLabel",
                            "default": "null",
                            "description": "Label of the upload button. Defaults to global value in Locale configuration.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "cancelLabel",
                            "default": "null",
                            "description": "Label of the cancel button. Defaults to global value in Locale configuration.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "chooseOptions",
                            "default": "null",
                            "description": "Options used to customize the choose button. These options have \"label\", \"icon\", \"className\" and \"style\" properties.",
                            "value": {
                                "kind": "expression",
                                "type": "FileUploadOptions"
                            }
                        },
                        {
                            "name": "uploadOptions",
                            "default": "null",
                            "description": "Options used to customize the upload button. These options have \"label\", \"icon\", \"className\" and \"style\" properties.",
                            "value": {
                                "kind": "expression",
                                "type": "FileUploadOptions"
                            }
                        },
                        {
                            "name": "cancelOptions",
                            "default": "null",
                            "description": "Options used to customize the cancel button. These options have \"label\", \"icon\", \"className\" and \"style\" properties.",
                            "value": {
                                "kind": "expression",
                                "type": "FileUploadOptions"
                            }
                        },
                        {
                            "name": "customUpload",
                            "default": "false",
                            "description": "Whether to use the default upload or a manual implementation defined in uploadHandler callback.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "headerClassName",
                            "default": "null",
                            "description": "Custom template of the header.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "headerStyle",
                            "default": "null",
                            "description": "Inline style of the header.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSProperties"
                            }
                        },
                        {
                            "name": "contentClassName",
                            "default": "null",
                            "description": "Style class of the content.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "contentStyle",
                            "default": "null",
                            "description": "Inline style of the content.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSProperties"
                            }
                        },
                        {
                            "name": "headerTemplate",
                            "default": "null",
                            "description": "Custom template of the header.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "itemTemplate",
                            "default": "null",
                            "description": "Custom template of each item content in the container.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "emptyTemplate",
                            "default": "null",
                            "description": "Custom template of empty content in the container.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "progressBarTemplate",
                            "default": "null",
                            "description": "Custom template of progressBar content in the container.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "FileUploadPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": [
                        {
                            "name": "onBeforeUpload",
                            "description": "Callback to invoke before file upload begins to customize the request such as post parameters before the files.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "FileUploadBeforeUploadEvent",
                                    "description": "Custom beforeUpload."
                                }
                            ]
                        },
                        {
                            "name": "onBeforeSend",
                            "description": "Callback to invoke before file send begins to customize the request such as adding headers.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "FileUploadBeforeSendEvent",
                                    "description": "Browser event."
                                }
                            ]
                        },
                        {
                            "name": "onBeforeDrop",
                            "description": "Callback to invoke before files dropped. Return false from callback to prevent drop.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "DragEvent",
                                    "description": "DragEvent instance."
                                }
                            ]
                        },
                        {
                            "name": "onBeforeSelect",
                            "description": "Callback to invoke before files are selected. Return false from callback to prevent selection.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "FileUploadSelectEvent",
                                    "description": "Custom select event."
                                }
                            ]
                        },
                        {
                            "name": "onUpload",
                            "description": "Callback to invoke when file upload is complete.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "FileUploadUploadEvent",
                                    "description": "Custom upload event."
                                }
                            ]
                        },
                        {
                            "name": "onError",
                            "description": "Callback to invoke if file upload fails.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "FileUploadErrorEvent",
                                    "description": "Custom error event."
                                }
                            ]
                        },
                        {
                            "name": "onClear",
                            "description": "Callback to invoke when files in queue are removed without uploading.",
                            "arguments": []
                        },
                        {
                            "name": "onSelect",
                            "description": "Callback to invoke when files are selected.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "FileUploadSelectEvent",
                                    "description": "Custom select event."
                                }
                            ]
                        },
                        {
                            "name": "onProgress",
                            "description": "Callback to invoke when files are being uploaded.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "FileUploadProgressEvent",
                                    "description": "Custom progress event."
                                }
                            ]
                        },
                        {
                            "name": "onValidationFail",
                            "description": "Callback to invoke when a validation file fails.",
                            "arguments": [
                                {
                                    "name": "file",
                                    "type": "File",
                                    "description": "Invalid file."
                                }
                            ]
                        },
                        {
                            "name": "uploadHandler",
                            "description": "Callback to invoke in custom upload mode to upload the files manually.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "FileUploadHandlerEvent",
                                    "description": "Custom uploadHandler event"
                                }
                            ]
                        },
                        {
                            "name": "onRemove",
                            "description": "Callback to invoke when a file is removed without uploading using clear button of a file.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "FileUploadRemoveEvent",
                                    "description": "Custom remove event."
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "Floatlabel",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Floatlabel"
                    },
                    "description": "FloatLabel appears on top of the input field when focused.\n\n[Live Demo](https://www.primereact.org/floatlabel/)",
                    "doc-url": "https://www.primereact.org/floatlabel/",
                    "attributes": [
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode[]"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Used to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "FloatLabelPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": []
                },
                {
                    "name": "Galleria",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Galleria"
                    },
                    "description": "Galleria is a content gallery component.\n\n[Live Demo](https://www.primereact.org/galleria)",
                    "doc-url": "https://www.primereact.org/galleria",
                    "attributes": [
                        {
                            "name": "value",
                            "default": "null",
                            "description": "An array of objects to display.",
                            "value": {
                                "kind": "expression",
                                "type": "any[]"
                            }
                        },
                        {
                            "name": "activeIndex",
                            "default": "0",
                            "description": "Index of the first item.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "fullScreen",
                            "default": "false",
                            "description": "Whether to display the component on fullscreen.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "closeIcon",
                            "default": "null",
                            "description": "Icon to display in the galleria close button.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<GalleriaProps>"
                            }
                        },
                        {
                            "name": "header",
                            "default": "null",
                            "description": "Custom header template.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "footer",
                            "default": "null",
                            "description": "Custom footer template.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "numVisible",
                            "default": "3",
                            "description": "Number of items per page.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "responsiveOptions",
                            "default": "null",
                            "description": "An array of options for responsive design.",
                            "value": {
                                "kind": "expression",
                                "type": "GalleriaResponsiveOptions[]"
                            }
                        },
                        {
                            "name": "showItemNavigators",
                            "default": "false",
                            "description": "Whether to display navigation buttons in item container.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "showThumbnailNavigators",
                            "default": "true",
                            "description": "Whether to display navigation buttons in thumbnail container.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "showItemNavigatorsOnHover",
                            "default": "false",
                            "description": "Whether to display navigation buttons on item container's hover.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "changeItemOnIndicatorHover",
                            "default": "false",
                            "description": "When enabled, item is changed on indicator item's hover.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "circular",
                            "default": "false",
                            "description": "Defines if scrolling would be infinite.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "autoPlay",
                            "default": "false",
                            "description": "Items are displayed with a slideshow in autoPlay mode.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "transitionInterval",
                            "default": "4000",
                            "description": "Time in milliseconds to scroll items.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "showThumbnails",
                            "default": "true",
                            "description": "Whether to display thumbnail container.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "itemNextIcon",
                            "default": "null",
                            "description": "Icon to show in the next item button.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<GalleriaProps>"
                            }
                        },
                        {
                            "name": "itemPrevIcon",
                            "default": "null",
                            "description": "Icon to show in the previous item button.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<GalleriaProps>"
                            }
                        },
                        {
                            "name": "nextThumbnailIcon",
                            "default": "null",
                            "description": "Icon to show in the next thumbnail button.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<GalleriaProps>"
                            }
                        },
                        {
                            "name": "prevThumbnailIcon",
                            "default": "null",
                            "description": "Icon to show in the previous thumbnail button.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<GalleriaProps>"
                            }
                        },
                        {
                            "name": "thumbnailsPosition",
                            "default": "bottom",
                            "description": "Position of thumbnails. Valid values are \"bottom\", \"top\", \"left\" and \"right\".",
                            "value": {
                                "kind": "expression",
                                "type": "\"left\" | \"top\" | \"bottom\" | \"right\""
                            }
                        },
                        {
                            "name": "showIndicators",
                            "default": "false",
                            "description": "Whether to display indicator container.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "showIndicatorsOnItem",
                            "default": "false",
                            "description": "When enabled, indicator container is displayed on item container.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "indicatorsPosition",
                            "default": "bottom",
                            "description": "Position of indicators. Valid values are \"bottom\", \"top\", \"left\" and \"right\".",
                            "value": {
                                "kind": "expression",
                                "type": "\"left\" | \"top\" | \"bottom\" | \"right\""
                            }
                        },
                        {
                            "name": "baseZIndex",
                            "default": "0",
                            "description": "Base zIndex value to use in layering.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "transitionOptions",
                            "default": "null",
                            "description": "The properties of CSSTransition can be customized, except for \"nodeRef\" and \"in\" properties.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSTransitionProps"
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "GalleriaPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": [
                        {
                            "name": "item",
                            "description": "Function that gets an item in the value and returns the content for preview item.",
                            "arguments": [
                                {
                                    "name": "item",
                                    "type": "any",
                                    "description": "Current item."
                                }
                            ]
                        },
                        {
                            "name": "thumbnail",
                            "description": "Function that gets an item in the value and returns the content for thumbnail item.",
                            "arguments": [
                                {
                                    "name": "item",
                                    "type": "any",
                                    "description": "Current thumbnail item."
                                }
                            ]
                        },
                        {
                            "name": "indicator",
                            "description": "Function that gets an item in the value and returns the content for indicator item.",
                            "arguments": [
                                {
                                    "name": "index",
                                    "type": "number",
                                    "description": "Index of the indicator."
                                }
                            ]
                        },
                        {
                            "name": "caption",
                            "description": "Function that gets an item in the value and returns the content for caption item.",
                            "arguments": [
                                {
                                    "name": "item",
                                    "type": "any",
                                    "description": "Browser event."
                                }
                            ]
                        },
                        {
                            "name": "onItemChange",
                            "description": "Callback to invoke after changing item.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "GalleriaItemChangeEvent",
                                    "description": "Custom change item."
                                }
                            ]
                        },
                        {
                            "name": "onShow",
                            "description": "Callback to invoke when modal becomes visible.",
                            "arguments": []
                        },
                        {
                            "name": "onHide",
                            "description": "Callback to invoke when modal becomes hidden.",
                            "arguments": []
                        }
                    ]
                },
                {
                    "name": "Hooks",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Hooks"
                    },
                    "description": "The module includes custom hook methods to create shorthands for users.",
                    "doc-url": ""
                },
                {
                    "name": "Iconbase/iconbase",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Iconbase/iconbase"
                    },
                    "doc-url": ""
                },
                {
                    "name": "Iconfield",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Iconfield"
                    },
                    "description": "IconField wraps an input and an icon.\n\n[Live Demo](https://www.primereact.org/iconfield/)",
                    "doc-url": "https://www.primereact.org/iconfield/",
                    "attributes": [
                        {
                            "name": "iconPosition",
                            "default": "right",
                            "description": "Position of the icon",
                            "value": {
                                "kind": "expression",
                                "type": "\"left\" | \"right\""
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "IconFieldPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": []
                },
                {
                    "name": "Icons/angledoubledown",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Icons/angledoubledown"
                    },
                    "doc-url": "",
                    "attributes": [
                        {
                            "name": "className",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "label",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "spin",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": []
                },
                {
                    "name": "Icons/angledoubleleft",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Icons/angledoubleleft"
                    },
                    "doc-url": "",
                    "attributes": [
                        {
                            "name": "className",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "label",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "spin",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": []
                },
                {
                    "name": "Icons/angledoubleright",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Icons/angledoubleright"
                    },
                    "doc-url": "",
                    "attributes": [
                        {
                            "name": "className",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "label",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "spin",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": []
                },
                {
                    "name": "Icons/angledoubleup",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Icons/angledoubleup"
                    },
                    "doc-url": "",
                    "attributes": [
                        {
                            "name": "className",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "label",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "spin",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": []
                },
                {
                    "name": "Icons/angledown",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Icons/angledown"
                    },
                    "doc-url": "",
                    "attributes": [
                        {
                            "name": "className",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "label",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "spin",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": []
                },
                {
                    "name": "Icons/angleleft",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Icons/angleleft"
                    },
                    "doc-url": "",
                    "attributes": [
                        {
                            "name": "className",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "label",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "spin",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": []
                },
                {
                    "name": "Icons/angleright",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Icons/angleright"
                    },
                    "doc-url": "",
                    "attributes": [
                        {
                            "name": "className",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "label",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "spin",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": []
                },
                {
                    "name": "Icons/angleup",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Icons/angleup"
                    },
                    "doc-url": "",
                    "attributes": [
                        {
                            "name": "className",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "label",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "spin",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": []
                },
                {
                    "name": "Icons/arrowdown",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Icons/arrowdown"
                    },
                    "doc-url": "",
                    "attributes": [
                        {
                            "name": "className",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "label",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "spin",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": []
                },
                {
                    "name": "Icons/arrowup",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Icons/arrowup"
                    },
                    "doc-url": "",
                    "attributes": [
                        {
                            "name": "className",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "label",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "spin",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": []
                },
                {
                    "name": "Icons/ban",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Icons/ban"
                    },
                    "doc-url": "",
                    "attributes": [
                        {
                            "name": "className",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "label",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "spin",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": []
                },
                {
                    "name": "Icons/bars",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Icons/bars"
                    },
                    "doc-url": "",
                    "attributes": [
                        {
                            "name": "className",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "label",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "spin",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": []
                },
                {
                    "name": "Icons/blank",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Icons/blank"
                    },
                    "doc-url": "",
                    "attributes": [
                        {
                            "name": "className",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "label",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "spin",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": []
                },
                {
                    "name": "Icons/calendar",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Icons/calendar"
                    },
                    "doc-url": "",
                    "attributes": [
                        {
                            "name": "className",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "label",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "spin",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": []
                },
                {
                    "name": "Icons/check",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Icons/check"
                    },
                    "doc-url": "",
                    "attributes": [
                        {
                            "name": "className",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "label",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "spin",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": []
                },
                {
                    "name": "Icons/chevrondown",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Icons/chevrondown"
                    },
                    "doc-url": "",
                    "attributes": [
                        {
                            "name": "className",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "label",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "spin",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": []
                },
                {
                    "name": "Icons/chevronleft",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Icons/chevronleft"
                    },
                    "doc-url": "",
                    "attributes": [
                        {
                            "name": "className",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "label",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "spin",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": []
                },
                {
                    "name": "Icons/chevronright",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Icons/chevronright"
                    },
                    "doc-url": "",
                    "attributes": [
                        {
                            "name": "className",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "label",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "spin",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": []
                },
                {
                    "name": "Icons/chevronup",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Icons/chevronup"
                    },
                    "doc-url": "",
                    "attributes": [
                        {
                            "name": "className",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "label",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "spin",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": []
                },
                {
                    "name": "Icons/download",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Icons/download"
                    },
                    "doc-url": "",
                    "attributes": [
                        {
                            "name": "className",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "label",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "spin",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": []
                },
                {
                    "name": "Icons/exclamationtriangle",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Icons/exclamationtriangle"
                    },
                    "doc-url": "",
                    "attributes": [
                        {
                            "name": "className",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "label",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "spin",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": []
                },
                {
                    "name": "Icons/eye",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Icons/eye"
                    },
                    "doc-url": "",
                    "attributes": [
                        {
                            "name": "className",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "label",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "spin",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": []
                },
                {
                    "name": "Icons/eyeslash",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Icons/eyeslash"
                    },
                    "doc-url": "",
                    "attributes": [
                        {
                            "name": "className",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "label",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "spin",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": []
                },
                {
                    "name": "Icons/filter",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Icons/filter"
                    },
                    "doc-url": "",
                    "attributes": [
                        {
                            "name": "className",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "label",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "spin",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": []
                },
                {
                    "name": "Icons/filterslash",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Icons/filterslash"
                    },
                    "doc-url": "",
                    "attributes": [
                        {
                            "name": "className",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "label",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "spin",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": []
                },
                {
                    "name": "Icons/infocircle",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Icons/infocircle"
                    },
                    "doc-url": "",
                    "attributes": [
                        {
                            "name": "className",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "label",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "spin",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": []
                },
                {
                    "name": "Icons/minus",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Icons/minus"
                    },
                    "doc-url": "",
                    "attributes": [
                        {
                            "name": "className",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "label",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "spin",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": []
                },
                {
                    "name": "Icons/pencil",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Icons/pencil"
                    },
                    "doc-url": "",
                    "attributes": [
                        {
                            "name": "className",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "label",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "spin",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": []
                },
                {
                    "name": "Icons/plus",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Icons/plus"
                    },
                    "doc-url": "",
                    "attributes": [
                        {
                            "name": "className",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "label",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "spin",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": []
                },
                {
                    "name": "Icons/refresh",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Icons/refresh"
                    },
                    "doc-url": "",
                    "attributes": [
                        {
                            "name": "className",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "label",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "spin",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": []
                },
                {
                    "name": "Icons/search",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Icons/search"
                    },
                    "doc-url": "",
                    "attributes": [
                        {
                            "name": "className",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "label",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "spin",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": []
                },
                {
                    "name": "Icons/searchminus",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Icons/searchminus"
                    },
                    "doc-url": "",
                    "attributes": [
                        {
                            "name": "className",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "label",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "spin",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": []
                },
                {
                    "name": "Icons/searchplus",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Icons/searchplus"
                    },
                    "doc-url": "",
                    "attributes": [
                        {
                            "name": "className",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "label",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "spin",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": []
                },
                {
                    "name": "Icons/sortalt",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Icons/sortalt"
                    },
                    "doc-url": "",
                    "attributes": [
                        {
                            "name": "className",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "label",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "spin",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": []
                },
                {
                    "name": "Icons/sortamountdown",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Icons/sortamountdown"
                    },
                    "doc-url": "",
                    "attributes": [
                        {
                            "name": "className",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "label",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "spin",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": []
                },
                {
                    "name": "Icons/sortamountupalt",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Icons/sortamountupalt"
                    },
                    "doc-url": "",
                    "attributes": [
                        {
                            "name": "className",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "label",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "spin",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": []
                },
                {
                    "name": "Icons/spinner",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Icons/spinner"
                    },
                    "doc-url": "",
                    "attributes": [
                        {
                            "name": "className",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "label",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "spin",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": []
                },
                {
                    "name": "Icons/star",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Icons/star"
                    },
                    "doc-url": "",
                    "attributes": [
                        {
                            "name": "className",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "label",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "spin",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": []
                },
                {
                    "name": "Icons/starfill",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Icons/starfill"
                    },
                    "doc-url": "",
                    "attributes": [
                        {
                            "name": "className",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "label",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "spin",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": []
                },
                {
                    "name": "Icons/thlarge",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Icons/thlarge"
                    },
                    "doc-url": "",
                    "attributes": [
                        {
                            "name": "className",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "label",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "spin",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": []
                },
                {
                    "name": "Icons/times",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Icons/times"
                    },
                    "doc-url": "",
                    "attributes": [
                        {
                            "name": "className",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "label",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "spin",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": []
                },
                {
                    "name": "Icons/timescircle",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Icons/timescircle"
                    },
                    "doc-url": "",
                    "attributes": [
                        {
                            "name": "className",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "label",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "spin",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": []
                },
                {
                    "name": "Icons/trash",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Icons/trash"
                    },
                    "doc-url": "",
                    "attributes": [
                        {
                            "name": "className",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "label",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "spin",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": []
                },
                {
                    "name": "Icons/undo",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Icons/undo"
                    },
                    "doc-url": "",
                    "attributes": [
                        {
                            "name": "className",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "label",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "spin",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": []
                },
                {
                    "name": "Icons/upload",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Icons/upload"
                    },
                    "doc-url": "",
                    "attributes": [
                        {
                            "name": "className",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "label",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "spin",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": []
                },
                {
                    "name": "Icons/windowmaximize",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Icons/windowmaximize"
                    },
                    "doc-url": "",
                    "attributes": [
                        {
                            "name": "className",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "label",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "spin",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": []
                },
                {
                    "name": "Icons/windowminimize",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Icons/windowminimize"
                    },
                    "doc-url": "",
                    "attributes": [
                        {
                            "name": "className",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "label",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "spin",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": []
                },
                {
                    "name": "Image",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Image"
                    },
                    "description": "Displays a single image with preview and tranformation options.\n\n[Live Demo](https://www.primereact.org/image/)",
                    "doc-url": "https://www.primereact.org/image/",
                    "attributes": [
                        {
                            "name": "alt",
                            "default": "null",
                            "description": "Specifies an alternate text for an area, if the image cannot be displayed.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "closeOnEscape",
                            "default": "true",
                            "description": "Specifies if pressing escape key should hide the preview.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "crossOrigin",
                            "default": "null",
                            "description": "The crossorigin content attribute on media elements is a CORS settings attribute.",
                            "value": {
                                "kind": "expression",
                                "type": "\"\" | \"anonymous\" | \"use-credentials\""
                            }
                        },
                        {
                            "name": "downloadable",
                            "default": "null",
                            "description": "Adds a download button to the preview control menu.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "downloadIcon",
                            "default": "null",
                            "description": "Icon of the download button.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<ImageProps>"
                            }
                        },
                        {
                            "name": "loading",
                            "default": "null",
                            "description": "Specifies whether a browser should load an image immediately or to defer loading of off-screen images until for example the user scrolls near them.",
                            "value": {
                                "kind": "expression",
                                "type": "\"eager\" | \"lazy\""
                            }
                        },
                        {
                            "name": "rotateRightIcon",
                            "default": "null",
                            "description": "Icon of the rotate right button.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<ImageProps>"
                            }
                        },
                        {
                            "name": "rotateLeftIcon",
                            "default": "null",
                            "description": "Icon of the rotate left button.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<ImageProps>"
                            }
                        },
                        {
                            "name": "referrerPolicy",
                            "default": "null",
                            "description": "HTTP header controls how much referrer information (sent with the Referer header) should be included with requests.",
                            "value": {
                                "kind": "expression",
                                "type": "HTMLAttributeReferrerPolicy"
                            }
                        },
                        {
                            "name": "useMap",
                            "default": "null",
                            "description": "Specifies an image as a client-side image map (an image map is an image with clickable areas)",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "zoomOutIcon",
                            "default": "null",
                            "description": "Icon of the zoom out button.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<ImageProps>"
                            }
                        },
                        {
                            "name": "zoomInIcon",
                            "default": "null",
                            "description": "Icon of the zoom in button.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<ImageProps>"
                            }
                        },
                        {
                            "name": "closeIcon",
                            "default": "null",
                            "description": "Icon of the close button.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<ImageProps>"
                            }
                        },
                        {
                            "name": "height",
                            "default": "null",
                            "description": "Height of the image element.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "imageClassName",
                            "default": "null",
                            "description": "Style class of the image element.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "imageStyle",
                            "default": "null",
                            "description": "Inline style of the image element.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSProperties"
                            }
                        },
                        {
                            "name": "preview",
                            "default": "null",
                            "description": "Controls the preview functionality.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "indicatorIcon",
                            "default": "null",
                            "description": "Changing the default icon when the image is hovered in preview mode.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<ImageProps>"
                            }
                        },
                        {
                            "name": "src",
                            "default": "null",
                            "description": "Specifies the path to the image.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "template",
                            "default": "null",
                            "description": "Changing the default icon when the image is hovered in preview mode. Since v9, use  `indicatorIcon`  instead.",
                            "value": {
                                "kind": "expression",
                                "type": "any"
                            }
                        },
                        {
                            "name": "width",
                            "default": "null",
                            "description": "Width of the image element.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "zoomSrc",
                            "default": "null",
                            "description": "Zoomed image that may be different than \"src\" image.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ImagePassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": [
                        {
                            "name": "onHide",
                            "description": "Triggered when the preview overlay is hidden.",
                            "arguments": []
                        },
                        {
                            "name": "onShow",
                            "description": "Triggered when the preview overlay is shown.",
                            "arguments": []
                        }
                    ]
                },
                {
                    "name": "Inplace",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Inplace"
                    },
                    "description": "Inplace provides an easy to do editing and display at the same time where clicking the output displays the actual content.\n\n[Live Demo](https://www.primereact.org/inplace)\n\nHelper Components:\n\n-  InplaceDisplay \n\n-  InplaceContent",
                    "doc-url": "https://www.primereact.org/inplace",
                    "attributes": [
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        }
                    ],
                    "events": []
                },
                {
                    "name": "Inputicon",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Inputicon"
                    },
                    "description": "InputIcon displays an icon.\n\n[Live Demo](https://www.primereact.org/iconfield/)",
                    "doc-url": "https://www.primereact.org/iconfield/",
                    "attributes": [
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "InputIconPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "data-pr-tooltip",
                            "default": "null",
                            "description": "Content to be displayed in tooltip.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "data-pr-disabled",
                            "default": "false",
                            "description": "When present, it specifies that the tooltip should be hidden.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "data-pr-classname",
                            "default": "null",
                            "description": "Style class of the tooltip.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "data-pr-position",
                            "default": "right",
                            "description": "Position of the tooltip.",
                            "value": {
                                "kind": "expression",
                                "type": "\"left\" | \"top\" | \"bottom\" | \"right\" | \"mouse\""
                            }
                        },
                        {
                            "name": "data-pr-my",
                            "default": "null",
                            "description": "Defines which position on the tooltip being positioned to align with the target element.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "data-pr-at",
                            "default": "null",
                            "description": "Defines which position on the target element to align the positioned tooltip.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "data-pr-event",
                            "default": "hover",
                            "description": "Event to show the tooltip.",
                            "value": {
                                "kind": "expression",
                                "type": "\"both\" | \"focus\" | \"hover\""
                            }
                        },
                        {
                            "name": "data-pr-showevent",
                            "default": "mouseenter",
                            "description": "Event to show the tooltip if the event property is empty.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "data-pr-hideevent",
                            "default": "mouseleave",
                            "description": "Event to hide the tooltip if the event property is empty.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "data-pr-mousetrack",
                            "default": "false",
                            "description": "Whether the tooltip will follow the mouse.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "data-pr-mousetracktop",
                            "default": "5",
                            "description": "Defines top position of the tooltip in relation to the mouse when the mouseTrack is enabled.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "data-pr-mousetrackleft",
                            "default": "5",
                            "description": "Defines left position of the tooltip in relation to the mouse when the mouseTrack is enabled.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "data-pr-showdelay",
                            "default": "0",
                            "description": "Delay to show the tooltip in milliseconds.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "data-pr-updatedelay",
                            "default": "0",
                            "description": "Delay to update the tooltip in milliseconds.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "data-pr-hidedelay",
                            "default": "0",
                            "description": "Delay to hide the tooltip in milliseconds.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "data-pr-autohide",
                            "default": "true",
                            "description": "Whether to hide tooltip when hovering over tooltip content.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "data-pr-showondisabled",
                            "default": "false",
                            "description": "Whether to show tooltip for disabled elements.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": []
                },
                {
                    "name": "Inputmask",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Inputmask"
                    },
                    "description": "InputMask component is used to enter input in a certain format such as numeric, date, currency, email and phone.\n\n[Live Demo](https://www.primereact.org/inputmask/)",
                    "doc-url": "https://www.primereact.org/inputmask/",
                    "attributes": [
                        {
                            "name": "mask",
                            "default": "null",
                            "description": "Mask pattern.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "slotChar",
                            "default": "_",
                            "description": "Placeholder character in mask.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "autoClear",
                            "default": "true",
                            "description": "Clears the incomplete value on blur.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "unmask",
                            "default": "false",
                            "description": "Defines if model sets the raw unmasked value to bound value or the formatted mask value.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "disabled",
                            "default": "false",
                            "description": "When present, it specifies that the element value cannot be altered.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "invalid",
                            "default": "false",
                            "description": "When present, it specifies that the component should have invalid state style.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "variant",
                            "default": "outlined",
                            "description": "Specifies the input variant of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "\"filled\" | \"outlined\""
                            }
                        },
                        {
                            "name": "readOnly",
                            "default": "false",
                            "description": "When present, it specifies that an input field is read-only.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "required",
                            "default": "false",
                            "description": "When present, it specifies that the element must be filled out before submitting the form.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "tooltip",
                            "default": "null",
                            "description": "Content of the tooltip.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "tooltipOptions",
                            "default": "null",
                            "description": "Configuration of the tooltip, refer to the tooltip documentation for more information.",
                            "value": {
                                "kind": "expression",
                                "type": "TooltipOptions"
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "InputTextPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "keyfilter",
                            "default": "null",
                            "description": "Format definition of the keys to block.",
                            "value": {
                                "kind": "expression",
                                "type": "KeyFilterType"
                            }
                        },
                        {
                            "name": "size",
                            "default": "null",
                            "description": "Size of the input.",
                            "value": {
                                "kind": "expression",
                                "type": "string | number"
                            }
                        },
                        {
                            "name": "validateOnly",
                            "default": "false",
                            "description": "When enabled, instead of blocking keys, input is validated internally to test against the regular expression.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "value",
                            "default": "null",
                            "description": "The value of component",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        }
                    ],
                    "events": [
                        {
                            "name": "onComplete",
                            "description": "Callback to invoke on when user completes the mask pattern.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "InputMaskCompleteEvent",
                                    "description": "Custom complete event"
                                }
                            ]
                        },
                        {
                            "name": "onChange",
                            "description": "Callback to invoke on value change.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "InputMaskChangeEvent",
                                    "description": "Custom change event"
                                }
                            ]
                        },
                        {
                            "name": "onFocus",
                            "description": "Callback to invoke when input receives focus.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "FocusEvent<HTMLInputElement, Element>",
                                    "description": "Browser event"
                                }
                            ]
                        },
                        {
                            "name": "onBlur",
                            "description": "Callback to invoke when input loses focus.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "FocusEvent<HTMLInputElement, Element>",
                                    "description": "Browser event"
                                }
                            ]
                        },
                        {
                            "name": "onInput",
                            "description": "Callback to invoke while typing value on input",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "FormEvent<HTMLInputElement>",
                                    "description": "Browser event"
                                },
                                {
                                    "name": "validatePattern",
                                    "type": "boolean",
                                    "description": "Whether to validate the value"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "Inputnumber",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Inputnumber"
                    },
                    "description": "InputNumber is an input component to provide numerical input.\n\n[Live Demo](https://www.primereact.org/inputnumber/)",
                    "doc-url": "https://www.primereact.org/inputnumber/",
                    "attributes": [
                        {
                            "name": "value",
                            "default": "null",
                            "description": "Value of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "null | number"
                            }
                        },
                        {
                            "name": "inputRef",
                            "default": "null",
                            "description": "Reference of the input element.",
                            "value": {
                                "kind": "expression",
                                "type": "Ref<HTMLInputElement>"
                            }
                        },
                        {
                            "name": "format",
                            "default": "true",
                            "description": "Whether to format the value.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "showButtons",
                            "default": "false",
                            "description": "Displays spinner buttons.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "buttonLayout",
                            "default": "stacked",
                            "description": "Layout of the buttons.",
                            "value": {
                                "kind": "expression",
                                "type": "\"horizontal\" | \"vertical\" | \"stacked\""
                            }
                        },
                        {
                            "name": "incrementButtonClassName",
                            "default": "null",
                            "description": "Style class of the increment button.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "decrementButtonClassName",
                            "default": "null",
                            "description": "Style class of the decrement button.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "incrementButtonIcon",
                            "default": "null",
                            "description": "Style class of the increment button.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<InputNumberProps>"
                            }
                        },
                        {
                            "name": "decrementButtonIcon",
                            "default": "null",
                            "description": "Style class of the decrement button.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<InputNumberProps>"
                            }
                        },
                        {
                            "name": "locale",
                            "default": "null",
                            "description": "Locale to be used in formatting.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "localeMatcher",
                            "default": "best fit",
                            "description": "The locale matching algorithm to use. See [Locale Negotation](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl#Locale_negotiation) for details.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "mode",
                            "default": "decimal",
                            "description": "Defines the behavior of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "\"decimal\" | \"currency\""
                            }
                        },
                        {
                            "name": "suffix",
                            "default": "null",
                            "description": "Text to display after the value.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "prefix",
                            "default": "null",
                            "description": "Text to display before the value.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "currency",
                            "default": "null",
                            "description": "The currency to use in currency formatting. Possible values are the [ISO 4217 currency codes](https://www.six-group.com/en/products-services/financial-information/data-standards.html#scrollTo=maintenance-agency), such as \"USD\" for the US dollar, \"EUR\" for the euro, or \"CNY\" for the Chinese RMB.\nThere is no default value; if the style is \"currency\", the currency property must be provided.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "currencyDisplay",
                            "default": "symbol",
                            "description": "How to display the currency in currency formatting. Possible values are \"symbol\" to use a localized currency symbol such as €, ü\"code\" to use the ISO currency code, \"name\" to use a localized currency name such as \"dollar\"; the default is \"symbol\".",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "useGrouping",
                            "default": "true",
                            "description": "Whether to use grouping separators, such as thousands separators or thousand/lakh/crore separators.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "minFractionDigits",
                            "default": "null",
                            "description": "The minimum number of fraction digits to use. Possible values are from 0 to 20; the default for plain number and percent formatting is 0;\nthe default for currency formatting is the number of minor unit digits provided by the [ISO 4217 currency code list](https://www.six-group.com/en/products-services/financial-information/data-standards.html#scrollTo=maintenance-agency) (2 if the list doesn't provide that information).",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "maxFractionDigits",
                            "default": "null",
                            "description": "The maximum number of fraction digits to use. Possible values are from 0 to 20; the default for plain number formatting is the larger of minimumFractionDigits and 3;\nthe default for currency formatting is the larger of minimumFractionDigits and the number of minor unit digits provided by the [ISO 4217 currency code list](https://www.six-group.com/en/products-services/financial-information/data-standards.html#scrollTo=maintenance-agency) (2 if the list doesn't provide that information).",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "roundingMode",
                            "default": "halfExpand",
                            "description": "How decimals should be rounded. [further information](https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Intl/NumberFormat/NumberFormat#roundingmode).",
                            "value": {
                                "kind": "expression",
                                "type": "RoundingMode"
                            }
                        },
                        {
                            "name": "name",
                            "default": "null",
                            "description": "Name of the input element.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "type",
                            "default": "text",
                            "description": "Type of the input element.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "allowEmpty",
                            "default": "true",
                            "description": "Determines whether the input field is empty.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "step",
                            "default": "1",
                            "description": "Step factor to increment/decrement the value.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "min",
                            "default": "null",
                            "description": "Mininum boundary value.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "max",
                            "default": "null",
                            "description": "Maximum boundary value.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "maxLength",
                            "default": "null",
                            "description": "Maximum value length.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "invalid",
                            "default": "false",
                            "description": "When present, it specifies that the component should have invalid state style.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "disabled",
                            "default": "null",
                            "description": "When present, it specifies that the element should be disabled.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "variant",
                            "default": "outlined",
                            "description": "Specifies the input variant of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "\"filled\" | \"outlined\""
                            }
                        },
                        {
                            "name": "required",
                            "default": "false",
                            "description": "When present, it specifies that the element must be filled out before submitting the form.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "tabIndex",
                            "default": "null",
                            "description": "Index of the element in tabbing order.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "pattern",
                            "default": "null",
                            "description": "The pattern attribute specifies a regular expression that the element's value is checked against on form submission.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "placeholder",
                            "default": "null",
                            "description": "Hint text for the input field.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "readOnly",
                            "default": "null",
                            "description": "When present, it specifies that the element should be read-only.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "size",
                            "default": "null",
                            "description": "Size of the input field.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "inputId",
                            "default": "null",
                            "description": "Identifier of the input element.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "autoFocus",
                            "default": "false",
                            "description": "When present, it specifies that the component should automatically get focus on load.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "inputStyle",
                            "default": "null",
                            "description": "Inline style of the input field.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSProperties"
                            }
                        },
                        {
                            "name": "inputClassName",
                            "default": "null",
                            "description": "Inline style of the input field.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "tooltip",
                            "default": "null",
                            "description": "Content of the tooltip.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "tooltipOptions",
                            "default": "null",
                            "description": "Configuration of the tooltip, refer to the tooltip documentation for more information.",
                            "value": {
                                "kind": "expression",
                                "type": "TooltipOptions"
                            }
                        },
                        {
                            "name": "ariaLabelledBy",
                            "default": "null",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "InputNumberPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": [
                        {
                            "name": "onValueChange",
                            "description": "Callback to invoke after validation check and value change.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "InputNumberValueChangeEvent",
                                    "description": "Custom value change event"
                                }
                            ]
                        },
                        {
                            "name": "onChange",
                            "description": "Callback to invoke on value change.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "InputNumberChangeEvent",
                                    "description": "Custom change event"
                                }
                            ]
                        },
                        {
                            "name": "onFocus",
                            "description": "Callback to invoke when input receives focus.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "FocusEvent<HTMLInputElement, Element>",
                                    "description": "Browser event"
                                }
                            ]
                        },
                        {
                            "name": "onBlur",
                            "description": "Callback to invoke when input loses focus.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "FocusEvent<HTMLInputElement, Element>",
                                    "description": "Browser event"
                                }
                            ]
                        },
                        {
                            "name": "onKeyDown",
                            "description": "Callback to invoke when the key pressed down.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "KeyboardEvent<HTMLInputElement>",
                                    "description": "Browser event"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "Inputotp",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Inputotp"
                    },
                    "description": "InputOtp is an extension to standard input element with theming and keyfiltering.\n\n[Live Demo](https://www.primereact.org/inputotp/)",
                    "doc-url": "https://www.primereact.org/inputotp/",
                    "attributes": [
                        {
                            "name": "value",
                            "default": "null",
                            "description": "Specifies the value of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "null | string | number"
                            }
                        },
                        {
                            "name": "invalid",
                            "default": "false",
                            "description": "When present, it specifies that the component should have invalid state style.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "disabled",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "readonly",
                            "default": "false",
                            "description": "When present, it specifies that an input field is read-only.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "variant",
                            "default": "outlined",
                            "description": "Specifies the input variant of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "\"filled\" | \"outlined\""
                            }
                        },
                        {
                            "name": "tabindex",
                            "default": "null",
                            "description": "Index of the element in tabbing order.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "length",
                            "default": "4",
                            "description": "Number of characters to initiate.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "mask",
                            "default": "false",
                            "description": "Mask pattern.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "integerOnly",
                            "default": "false",
                            "description": "When present, it specifies that an input field is integer-only.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "inputTemplate",
                            "default": "null",
                            "description": "Template of an item.",
                            "value": {
                                "kind": "expression",
                                "type": "TemplateType<InputOtpProps>"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "InputOtpPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": [
                        {
                            "name": "onInput",
                            "description": "Callback to invoke while typing value on input",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "FormEvent<HTMLInputElement>",
                                    "description": "Browser event"
                                }
                            ]
                        },
                        {
                            "name": "onFocus",
                            "description": "Callback to invoke when autocomplete gets focus.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "FocusEvent<HTMLInputElement, Element>",
                                    "description": "Browser event."
                                }
                            ]
                        },
                        {
                            "name": "onBlur",
                            "description": "Callback to invoke when autocomplete loses focus.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "FocusEvent<HTMLInputElement, Element>",
                                    "description": "Browser event."
                                }
                            ]
                        },
                        {
                            "name": "onChange",
                            "description": "Callback to invoke on value change.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "InputOtpChangeEvent",
                                    "description": "Custom change event"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "Inputswitch",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Inputswitch"
                    },
                    "description": "InputSwitch is used to select a boolean value.\n\n[Live Demo](https://www.primereact.org/inputswitch/)",
                    "doc-url": "https://www.primereact.org/inputswitch/",
                    "attributes": [
                        {
                            "name": "id",
                            "default": "null",
                            "description": "Unique identifier of the element.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "autoFocus",
                            "default": "false",
                            "description": "When present, it specifies that the component should automatically get focus on load.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "inputRef",
                            "default": "null",
                            "description": "Reference of the input element.",
                            "value": {
                                "kind": "expression",
                                "type": "Ref<HTMLInputElement>"
                            }
                        },
                        {
                            "name": "style",
                            "default": "null",
                            "description": "Inline style of the element.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSProperties"
                            }
                        },
                        {
                            "name": "className",
                            "default": "null",
                            "description": "Style class of the element.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "inputId",
                            "default": "null",
                            "description": "Identifier of the input element.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "name",
                            "default": "null",
                            "description": "Name of the input element.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "tabIndex",
                            "default": "null",
                            "description": "Index of the element in tabbing order.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "checked",
                            "default": "false",
                            "description": "Specifies whether a inputswitch should be checked or not.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "trueValue",
                            "default": "true",
                            "description": "Value in checked state.",
                            "value": {
                                "kind": "expression",
                                "type": "any"
                            }
                        },
                        {
                            "name": "falseValue",
                            "default": "false",
                            "description": "Value in unchecked state.",
                            "value": {
                                "kind": "expression",
                                "type": "any"
                            }
                        },
                        {
                            "name": "invalid",
                            "default": "false",
                            "description": "When present, it specifies that the component should have invalid state style.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "disabled",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "tooltip",
                            "default": "null",
                            "description": "Content of the tooltip.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "tooltipOptions",
                            "default": "null",
                            "description": "Configuration of the tooltip, refer to the tooltip documentation for more information.",
                            "value": {
                                "kind": "expression",
                                "type": "TooltipOptions"
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "InputSwitchPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": [
                        {
                            "name": "onChange",
                            "description": "Callback to invoke on value change.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "InputSwitchChangeEvent",
                                    "description": "Custom change event"
                                }
                            ]
                        },
                        {
                            "name": "onFocus",
                            "description": "Callback to invoke when the element receives focus.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "FocusEvent<HTMLInputElement, Element>",
                                    "description": "Browser event"
                                }
                            ]
                        },
                        {
                            "name": "onBlur",
                            "description": "Callback to invoke when the element loses focus.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "FocusEvent<HTMLInputElement, Element>",
                                    "description": "Browser event"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "Inputtext",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Inputtext"
                    },
                    "description": "InputText is an extension to standard input element with theming and keyfiltering.\n\n[Live Demo](https://www.primereact.org/inputtext/)",
                    "doc-url": "https://www.primereact.org/inputtext/",
                    "attributes": [
                        {
                            "name": "keyfilter",
                            "default": "null",
                            "description": "Format definition of the keys to block.",
                            "value": {
                                "kind": "expression",
                                "type": "KeyFilterType"
                            }
                        },
                        {
                            "name": "size",
                            "default": "null",
                            "description": "Size of the input.",
                            "value": {
                                "kind": "expression",
                                "type": "string | number"
                            }
                        },
                        {
                            "name": "invalid",
                            "default": "false",
                            "description": "When present, it specifies that the component should have invalid state style.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "variant",
                            "default": "outlined",
                            "description": "Specifies the input variant of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "\"filled\" | \"outlined\""
                            }
                        },
                        {
                            "name": "tooltip",
                            "default": "null",
                            "description": "Content of the tooltip.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "tooltipOptions",
                            "default": "null",
                            "description": "Configuration of the tooltip, refer to the tooltip documentation for more information.",
                            "value": {
                                "kind": "expression",
                                "type": "TooltipOptions"
                            }
                        },
                        {
                            "name": "validateOnly",
                            "default": "false",
                            "description": "When enabled, instead of blocking keys, input is validated internally to test against the regular expression.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "value",
                            "default": "null",
                            "description": "The value of component",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "InputTextPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": [
                        {
                            "name": "onInput",
                            "description": "Callback to invoke while typing value on input",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "FormEvent<HTMLInputElement>",
                                    "description": "Browser event"
                                },
                                {
                                    "name": "validatePattern",
                                    "type": "boolean",
                                    "description": "Whether to validate the value"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "Inputtextarea",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Inputtextarea"
                    },
                    "description": "Inputtextarea add styling and autoResize functionality to standard textarea element.\n\n[Live Demo](https://www.primereact.org/inputtextarea/)",
                    "doc-url": "https://www.primereact.org/inputtextarea/",
                    "attributes": [
                        {
                            "name": "autoResize",
                            "default": "false",
                            "description": "When present, height of textarea changes as being typed.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "invalid",
                            "default": "false",
                            "description": "When present, it specifies that the component should have invalid state style.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "variant",
                            "default": "outlined",
                            "description": "Specifies the input variant of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "\"filled\" | \"outlined\""
                            }
                        },
                        {
                            "name": "keyfilter",
                            "default": "null",
                            "description": "Format definition of the keys to block.",
                            "value": {
                                "kind": "expression",
                                "type": "KeyFilterType"
                            }
                        },
                        {
                            "name": "tooltip",
                            "default": "null",
                            "description": "Content of the tooltip.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "tooltipOptions",
                            "default": "null",
                            "description": "Configuration of the tooltip, refer to the tooltip documentation for more information.",
                            "value": {
                                "kind": "expression",
                                "type": "TooltipOptions"
                            }
                        },
                        {
                            "name": "value",
                            "default": "null",
                            "description": "The value of component",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "InputTextareaPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": []
                },
                {
                    "name": "Keyfilter",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Keyfilter"
                    },
                    "description": "This module contains common options and types of components that use KeyFilter.",
                    "doc-url": ""
                },
                {
                    "name": "Knob",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Knob"
                    },
                    "description": "Knob is a form component to define number inputs with a dial.\n\n[Live Demo](https://www.primereact.org/knob/)",
                    "doc-url": "https://www.primereact.org/knob/",
                    "attributes": [
                        {
                            "name": "id",
                            "default": "null",
                            "description": "Unique identifier of the element.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "style",
                            "default": "null",
                            "description": "Inline style of the element.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSProperties"
                            }
                        },
                        {
                            "name": "className",
                            "default": "null",
                            "description": "Style class of the element.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "value",
                            "default": "null",
                            "description": "Value of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "size",
                            "default": "100",
                            "description": "Size of the component in pixels.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "disabled",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "readOnly",
                            "default": "false",
                            "description": "When present, it specifies that the component value cannot be edited.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "showValue",
                            "default": "true",
                            "description": "Whether the show the value inside the knob.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "step",
                            "default": "1",
                            "description": "Step factor to increment/decrement the value.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "min",
                            "default": "0",
                            "description": "Mininum boundary value.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "max",
                            "default": "100",
                            "description": "Maximum boundary value.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "strokeWidth",
                            "default": "14",
                            "description": "Width of the knob stroke.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "name",
                            "default": "null",
                            "description": "Name of the input element.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "valueColor",
                            "default": "var(--primary-color, Black)",
                            "description": "Background of the value.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "rangeColor",
                            "default": "var(--surface-border, LightGray)",
                            "description": "Background color of the range.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "textColor",
                            "default": "var(--text-color-secondary, Black)",
                            "description": "Color of the value text.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "valueTemplate",
                            "default": "{value}",
                            "description": "Template string of the value.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "KnobPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": [
                        {
                            "name": "onChange",
                            "description": "Callback to invoke on value change.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "KnobChangeEvent",
                                    "description": "Custom change event"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "Listbox",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Listbox"
                    },
                    "description": "ListBox is used to select one or more values from a list of items.\n\n[Live Demo](https://www.primereact.org/listbox/)",
                    "doc-url": "https://www.primereact.org/listbox/",
                    "attributes": [
                        {
                            "name": "ariaLabelledBy",
                            "default": "null",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "dataKey",
                            "default": "false",
                            "description": "A property to uniquely match the value in options for better performance.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "disabled",
                            "default": "false",
                            "description": "When specified, disables the component.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "emptyMessage",
                            "default": "null",
                            "description": "Text to display when there is no data.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "emptyFilterMessage",
                            "default": "null",
                            "description": "Template to display when filtering does not return any results.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "filter",
                            "default": "false",
                            "description": "When specified, displays a filter input at header.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "filterBy",
                            "default": "label",
                            "description": "When filtering is enabled, filterBy decides which field or fields (comma separated) to search against.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "filterInputProps",
                            "default": "undefined",
                            "description": "Props for the filter input, any prop is passed implicity to the filter input element.",
                            "value": {
                                "kind": "expression",
                                "type": "any"
                            }
                        },
                        {
                            "name": "filterLocale",
                            "default": "undefined",
                            "description": "Locale to use in filtering. The default locale is the host environment's current locale.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "filterMatchMode",
                            "default": "contains",
                            "description": "Defines how the items are filtered, valid values are \"contains\", (default) \"startsWith\", \"endsWith\", \"equals\" and \"notEquals\".",
                            "value": {
                                "kind": "expression",
                                "type": "\"endsWith\" | \"startsWith\" | \"contains\" | \"equals\" | \"notEquals\""
                            }
                        },
                        {
                            "name": "filterPlaceholder",
                            "default": "null",
                            "description": "Placeholder text to show when filter input is empty.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "filterTemplate",
                            "default": "null",
                            "description": "Custom template for the filter element.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "filterValue",
                            "default": "null",
                            "description": "When specified, filter displays with this value.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "itemTemplate",
                            "default": "null",
                            "description": "Custom template for the items.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "listClassName",
                            "default": "null",
                            "description": "Inline style class of inner list element.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "listStyle",
                            "default": "null",
                            "description": "Inline style of inner list element.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSProperties"
                            }
                        },
                        {
                            "name": "invalid",
                            "default": "false",
                            "description": "When present, it specifies that the component should have invalid state style.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "metaKeySelection",
                            "default": "true",
                            "description": "Defines how multiple items can be selected, when true metaKey needs to be pressed to select or unselect an item and when set to false selection of each item can be toggled individually. On touch enabled devices, metaKeySelection is turned off automatically.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "multiple",
                            "default": "false",
                            "description": "When specified, allows selecting multiple values.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "optionDisabled",
                            "default": "null",
                            "description": "Property name or getter function to use as the disabled flag of an option, defaults to false when not defined.",
                            "value": {
                                "kind": "expression",
                                "type": "string | Function"
                            }
                        },
                        {
                            "name": "optionGroupChildren",
                            "default": "null",
                            "description": "Property name or getter function that refers to the children options of option group.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "optionGroupLabel",
                            "default": "null",
                            "description": "Property name or getter function to use as the label of an option group.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "optionGroupTemplate",
                            "default": "null",
                            "description": "Template of an option group item.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "optionLabel",
                            "default": "null",
                            "description": "Name of the label field of an option when an arbitrary objects instead of SelectItems are used as options.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "optionValue",
                            "default": "null",
                            "description": "Name of the value field of an option when arbitrary objects are used as options instead of SelectItems.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "options",
                            "default": "null",
                            "description": "An array of objects to display as the available options.",
                            "value": {
                                "kind": "expression",
                                "type": "SelectItemOptionsType"
                            }
                        },
                        {
                            "name": "tooltip",
                            "default": "null",
                            "description": "Content of the tooltip.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "tooltipOptions",
                            "default": "null",
                            "description": "Configuration of the tooltip, refer to the tooltip documentation for more information.",
                            "value": {
                                "kind": "expression",
                                "type": "TooltipOptions"
                            }
                        },
                        {
                            "name": "value",
                            "default": "null",
                            "description": "Selected value to display.",
                            "value": {
                                "kind": "expression",
                                "type": "any"
                            }
                        },
                        {
                            "name": "virtualScrollerOptions",
                            "default": "null",
                            "description": "Whether to use the virtualScroller feature. The properties of VirtualScroller component can be used like an object in it.",
                            "value": {
                                "kind": "expression",
                                "type": "VirtualScrollerProps"
                            }
                        },
                        {
                            "name": "autoOptionFocus",
                            "default": "false",
                            "description": "Whether to focus on the first visible or selected element.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "selectOnFocus",
                            "default": "false",
                            "description": "When enabled, the focused option is selected.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "focusOnHover",
                            "default": "true",
                            "description": "When enabled, the focus is placed on the hovered option.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ListboxPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": [
                        {
                            "name": "onChange",
                            "description": "Callback to invoke when value of listbox changes.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "ListBoxChangeEvent",
                                    "description": "Custom change event."
                                }
                            ]
                        },
                        {
                            "name": "onFilterValueChange",
                            "description": "Callback to invoke when filter value changes.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "ListBoxFilterValueChangeEvent",
                                    "description": "Custom filter value change event."
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "Megamenu",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Megamenu"
                    },
                    "description": "MegaMenu is navigation component that displays submenus together.\n\n[Live Demo](https://www.primereact.org/megamenu/)",
                    "doc-url": "https://www.primereact.org/megamenu/",
                    "attributes": [
                        {
                            "name": "model",
                            "default": "null",
                            "description": "An array of menuitems.",
                            "value": {
                                "kind": "expression",
                                "type": "MenuItem[]"
                            }
                        },
                        {
                            "name": "orientation",
                            "default": "horizontal",
                            "description": "Defines the orientation, valid values are horizontal and vertical.",
                            "value": {
                                "kind": "expression",
                                "type": "\"horizontal\" | \"vertical\""
                            }
                        },
                        {
                            "name": "start",
                            "default": "null",
                            "description": "The template of starting element.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "breakpoint",
                            "default": "null",
                            "description": "The breakpoint to define the maximum width boundary when responsiveness is enabled.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "scrollHeight",
                            "default": "400px",
                            "description": "Maximum height of the options panel on responsive mode.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "submenuIcon",
                            "default": "null",
                            "description": "Icon of the submenu.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<MegaMenuProps>"
                            }
                        },
                        {
                            "name": "menuIcon",
                            "default": "null",
                            "description": "Icon to display in the horizontal menu.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<MegaMenuProps>"
                            }
                        },
                        {
                            "name": "tabIndex",
                            "default": "null",
                            "description": "Index of the element in tabbing order.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "end",
                            "default": "null",
                            "description": "The template of trailing element",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "MegaMenuPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": [
                        {
                            "name": "onFocus",
                            "description": "Callback to invoke when menu receives focus.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "SyntheticEvent<Element, Event>",
                                    "description": "Browser event."
                                }
                            ]
                        },
                        {
                            "name": "onBlur",
                            "description": "Callback to invoke when menu loses focus.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "SyntheticEvent<Element, Event>",
                                    "description": "Browser event."
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "Mention",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Mention"
                    },
                    "description": "Mention component is used to refer someone or something.\n\n[Live Demo](https://www.primereact.org/mention/)",
                    "doc-url": "https://www.primereact.org/mention/",
                    "attributes": [
                        {
                            "name": "autoHighlight",
                            "default": "true",
                            "description": "When enabled, highlights the first item in the list by default.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "autoResize",
                            "default": "null",
                            "description": "When present, height of textarea changes as being typed.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "delay",
                            "default": "0",
                            "description": "Delay between keystrokes to wait before sending a query.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "field",
                            "default": "null",
                            "description": "Field of a suggested object to resolve and display.",
                            "value": {
                                "kind": "expression",
                                "type": "string | string[]"
                            }
                        },
                        {
                            "name": "footerTemplate",
                            "default": "null",
                            "description": "Custom template of footer.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "headerTemplate",
                            "default": "null",
                            "description": "Custom template of header.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "inputClassName",
                            "default": "null",
                            "description": "Style class of the input field.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "inputId",
                            "default": "null",
                            "description": "Identifier of the input element.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "inputRef",
                            "default": "null",
                            "description": "Reference of the input element.",
                            "value": {
                                "kind": "expression",
                                "type": "Ref<HTMLInputElement>"
                            }
                        },
                        {
                            "name": "inputStyle",
                            "default": "null",
                            "description": "Inline style of the input field.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSProperties"
                            }
                        },
                        {
                            "name": "itemTemplate",
                            "default": "null",
                            "description": "Custom template for the items.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "panelClassName",
                            "default": "null",
                            "description": "Style class of the overlay panel element.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "panelStyle",
                            "default": "null",
                            "description": "Inline style of the overlay panel element.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSProperties"
                            }
                        },
                        {
                            "name": "scrollHeight",
                            "default": "200px",
                            "description": "Maximum height of the suggestions panel.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "suggestions",
                            "default": "null",
                            "description": "An array of suggestions to display.",
                            "value": {
                                "kind": "expression",
                                "type": "any[]"
                            }
                        },
                        {
                            "name": "transitionOptions",
                            "default": "null",
                            "description": "The properties of CSSTransition can be customized, except for \"nodeRef\" and \"in\" properties.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSTransitionProps"
                            }
                        },
                        {
                            "name": "trigger",
                            "default": "\"@\"",
                            "description": "Set trigger keyword.",
                            "value": {
                                "kind": "expression",
                                "type": "string | string[]"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "MentionPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": [
                        {
                            "name": "onBlur",
                            "description": "Callback to invoke when the element loses focus.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "FocusEvent<HTMLInputElement, Element>",
                                    "description": "Browser event"
                                }
                            ]
                        },
                        {
                            "name": "onChange",
                            "description": "Callback to invoke when value changes.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "FormEvent<HTMLInputElement>",
                                    "description": "Browser event"
                                }
                            ]
                        },
                        {
                            "name": "onFocus",
                            "description": "Callback to invoke when the element receives focus.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "FocusEvent<HTMLInputElement, Element>",
                                    "description": "Browser event"
                                }
                            ]
                        },
                        {
                            "name": "onHide",
                            "description": "Callback to invoke when overlay panel becomes hidden.",
                            "arguments": []
                        },
                        {
                            "name": "onInput",
                            "description": "Callback to invoke on input event of input field.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "FormEvent<HTMLInputElement>",
                                    "description": "Browser event"
                                }
                            ]
                        },
                        {
                            "name": "onSearch",
                            "description": "Callback to invoke when search.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "MentionSearchEvent",
                                    "description": "Custom search event"
                                }
                            ]
                        },
                        {
                            "name": "onSelect",
                            "description": "Callback to invoke when selection changes.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "MentionSelectEvent",
                                    "description": "Custom select event"
                                }
                            ]
                        },
                        {
                            "name": "onShow",
                            "description": "Callback to invoke when overlay panel becomes visible.",
                            "arguments": []
                        }
                    ]
                },
                {
                    "name": "Menu",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Menu"
                    },
                    "description": "Menu is a navigation/command component that supports dynamic and static positioning.\n\n[Live Demo](https://www.primereact.org/menu/)",
                    "doc-url": "https://www.primereact.org/menu/",
                    "attributes": [
                        {
                            "name": "model",
                            "default": "null",
                            "description": "An array of menuitems.",
                            "value": {
                                "kind": "expression",
                                "type": "MenuItem[]"
                            }
                        },
                        {
                            "name": "popup",
                            "default": "false",
                            "description": "Defines if menu would displayed as a popup.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "popupAlignment",
                            "default": "left",
                            "description": "In popup mode determines how the overlay is aligned with its target. Values either 'left' or 'right'.",
                            "value": {
                                "kind": "expression",
                                "type": "\"left\" | \"right\""
                            }
                        },
                        {
                            "name": "autoZIndex",
                            "default": "true",
                            "description": "Whether to automatically manage layering.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "baseZIndex",
                            "default": "0",
                            "description": "Base zIndex value to use in layering.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "appendTo",
                            "default": "document.body",
                            "description": "DOM element instance where the overlay panel should be mounted. Valid values are any DOM Element and 'self'. The self value is used to render a component where it is located.",
                            "value": {
                                "kind": "expression",
                                "type": "null | HTMLElement | \"self\" | Function"
                            }
                        },
                        {
                            "name": "transitionOptions",
                            "default": "null",
                            "description": "The properties of CSSTransition can be customized, except for \"nodeRef\" and \"in\" properties.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSTransitionProps"
                            }
                        },
                        {
                            "name": "tabIndex",
                            "default": "null",
                            "description": "Index of the element in tabbing order.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "MenuPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "closeOnEscape",
                            "default": "true",
                            "description": "Specifies if pressing escape key should hide the Menu Popup.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": [
                        {
                            "name": "onShow",
                            "description": "Callback to invoke when a popup menu is shown.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "SyntheticEvent<Element, Event>",
                                    "description": "Browser event."
                                }
                            ]
                        },
                        {
                            "name": "onHide",
                            "description": "Callback to invoke when a popup menu is hidden.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "SyntheticEvent<Element, Event>",
                                    "description": "Browser event."
                                }
                            ]
                        },
                        {
                            "name": "onFocus",
                            "description": "Callback to invoke when menu receives focus.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "SyntheticEvent<Element, Event>",
                                    "description": "Browser event."
                                }
                            ]
                        },
                        {
                            "name": "onBlur",
                            "description": "Callback to invoke when menu loses focus.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "SyntheticEvent<Element, Event>",
                                    "description": "Browser event."
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "Menubar",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Menubar"
                    },
                    "description": "Manubar is an input component that provides real-time suggestions when being typed.\n\n[Live Demo](https://www.primereact.org/menubar/)",
                    "doc-url": "https://www.primereact.org/menubar/",
                    "attributes": [
                        {
                            "name": "model",
                            "default": "null",
                            "description": "An array of menuitems.",
                            "value": {
                                "kind": "expression",
                                "type": "MenuItem[]"
                            }
                        },
                        {
                            "name": "start",
                            "default": "null",
                            "description": "The template of starting element.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "submenuIcon",
                            "default": "null",
                            "description": "Icon of the submenu.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<MenubarProps>"
                            }
                        },
                        {
                            "name": "menuIcon",
                            "default": "null",
                            "description": "Icon of the menu.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<MenubarProps>"
                            }
                        },
                        {
                            "name": "ariaLabel",
                            "default": "null",
                            "description": "Used to define a string that labels the component.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "ariaLabelledBy",
                            "default": "null",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "end",
                            "default": "null",
                            "description": "The template of trailing element.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "MenubarPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": [
                        {
                            "name": "onFocus",
                            "description": "Callback to invoke when menu receives focus.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "SyntheticEvent<Element, Event>",
                                    "description": "Browser event."
                                }
                            ]
                        },
                        {
                            "name": "onBlur",
                            "description": "Callback to invoke when menu loses focus.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "SyntheticEvent<Element, Event>",
                                    "description": "Browser event."
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "Menuitem",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Menuitem"
                    },
                    "description": "PrimeReact menus components share a common api to specify the menuitems and submenus.\n\n[Live Demo](https://www.primereact.org/menumodel/)",
                    "doc-url": "https://www.primereact.org/menumodel/"
                },
                {
                    "name": "Message",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Message"
                    },
                    "description": "Message is used to display inline message with various severities.\n\n[Live Demo](https://www.primereact.org/message)",
                    "doc-url": "https://www.primereact.org/message",
                    "attributes": [
                        {
                            "name": "text",
                            "default": "null",
                            "description": "Text of the message.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "severity",
                            "default": "null",
                            "description": "Severity level of the message.",
                            "value": {
                                "kind": "expression",
                                "type": "\"error\" | \"success\" | \"secondary\" | \"info\" | \"warn\" | \"contrast\""
                            }
                        },
                        {
                            "name": "content",
                            "default": "null",
                            "description": "Custom template of the message.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "icon",
                            "default": "based on severity",
                            "description": "Icon for the message. If not set it will default to severity icon.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<MessageProps>"
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "MessagePassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": []
                },
                {
                    "name": "Messages",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Messages"
                    },
                    "description": "Messages is used to display inline messages with various severities.\n\n[Live Demo](https://www.primereact.org/messages)",
                    "doc-url": "https://www.primereact.org/messages",
                    "attributes": [
                        {
                            "name": "transitionOptions",
                            "default": "null",
                            "description": "The properties of CSSTransition can be customized, except for \"nodeRef\" and \"in\" properties.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSTransitionProps"
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "MessagesPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        }
                    ],
                    "events": [
                        {
                            "name": "onRemove",
                            "description": "Callback to invoke when a message is removed.",
                            "arguments": [
                                {
                                    "name": "message",
                                    "type": "MessagesMessage",
                                    "description": "Removed message."
                                }
                            ]
                        },
                        {
                            "name": "onClick",
                            "description": "Callback to invoke when a message gets clicked.",
                            "arguments": [
                                {
                                    "name": "message",
                                    "type": "MessagesMessage",
                                    "description": "Clicked message."
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "Metergroup",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Metergroup"
                    },
                    "description": "MeterGroup displays scalar measurements within a known range.\n\n[Live Demo](https://www.primereact.org/metergroup/)",
                    "doc-url": "https://www.primereact.org/metergroup/",
                    "attributes": [
                        {
                            "name": "className",
                            "default": "null",
                            "description": "Additional CSS classes to apply to the MeterGroup.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "values",
                            "default": "null",
                            "description": "An array of values to be represented by the MeterGroup.",
                            "value": {
                                "kind": "expression",
                                "type": "MeterGroupValue[]"
                            }
                        },
                        {
                            "name": "min",
                            "default": "0",
                            "description": "The minimum value for the MeterGroup.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "max",
                            "default": "100",
                            "description": "The maximum value for the MeterGroup.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "orientation",
                            "default": "'horizontal'",
                            "description": "The orientation of the MeterGroup. Can be either 'horizontal' or 'vertical'.",
                            "value": {
                                "kind": "expression",
                                "type": "\"horizontal\" | \"vertical\""
                            }
                        },
                        {
                            "name": "labelPosition",
                            "default": "'end'",
                            "description": "The position of the label. Can be either 'start' or 'end'.",
                            "value": {
                                "kind": "expression",
                                "type": "\"end\" | \"start\""
                            }
                        },
                        {
                            "name": "labelOrientation",
                            "default": "'horizontal'",
                            "description": "The orientation of the label. Can be either 'horizontal' or 'vertical'.",
                            "value": {
                                "kind": "expression",
                                "type": "\"horizontal\" | \"vertical\""
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "MeterGroupPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "start",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "Function"
                            }
                        },
                        {
                            "name": "end",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "Function"
                            }
                        },
                        {
                            "name": "meter",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "Function"
                            }
                        },
                        {
                            "name": "labelList",
                            "default": "null",
                            "value": {
                                "kind": "expression",
                                "type": "Function"
                            }
                        }
                    ],
                    "events": []
                },
                {
                    "name": "Multiselect",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Multiselect"
                    },
                    "description": "MultiSelect is used to select multiple items from a collection.\n\n[Live Demo](https://www.primereact.org/multiselect/)",
                    "doc-url": "https://www.primereact.org/multiselect/",
                    "attributes": [
                        {
                            "name": "appendTo",
                            "default": "document.body",
                            "description": "DOM element instance where the overlay panel should be mounted. Valid values are any DOM Element and 'self'. The self value is used to render a component where it is located.",
                            "value": {
                                "kind": "expression",
                                "type": "null | HTMLElement | \"self\" | Function"
                            }
                        },
                        {
                            "name": "ariaLabelledBy",
                            "default": "null",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "checkboxIcon",
                            "default": "null",
                            "description": "Icon of the checkbox when checked.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<MultiSelectProps>"
                            }
                        },
                        {
                            "name": "className",
                            "default": "null",
                            "description": "Style class of the element.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "closeIcon",
                            "default": "null",
                            "description": "Close icon of the multiselect panel header.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<MultiSelectProps>"
                            }
                        },
                        {
                            "name": "clearIcon",
                            "default": "null",
                            "description": "Clear icon of the multiselect input.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<MultiSelectProps>"
                            }
                        },
                        {
                            "name": "dataKey",
                            "default": "null",
                            "description": "A property to uniquely match the value in options for better performance.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "disabled",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "display",
                            "default": "comma",
                            "description": "Used mode to display the selected item. Valid values are 'comma' and 'chip'.",
                            "value": {
                                "kind": "expression",
                                "type": "\"comma\" | \"chip\""
                            }
                        },
                        {
                            "name": "dropdownIcon",
                            "default": "null",
                            "description": "Icon class of the dropdown icon.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<MultiSelectProps>"
                            }
                        },
                        {
                            "name": "emptyFilterMessage",
                            "default": "No records found",
                            "description": "Template to display when filtering does not return any results.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "emptyMessage",
                            "default": "null",
                            "description": "Text to display when there are no options available. Defaults to global value in Locale configuration.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "filter",
                            "default": "true",
                            "description": "When specified, displays an input field to filter the items on keyup.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "filterBy",
                            "default": "label",
                            "description": "When filtering is enabled, filterBy decides which field or fields (comma separated) to search against.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "filterInputAutoFocus",
                            "default": "true",
                            "description": "When the panel is opened, it specifies that the filter input should focus automatically.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "filterIcon",
                            "default": "null",
                            "description": "Icon of the filter icon.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<MultiSelect>"
                            }
                        },
                        {
                            "name": "filterLocale",
                            "default": "undefined",
                            "description": "Locale to use in filtering. The default locale is the host environment's current locale.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "filterMatchMode",
                            "default": "contains",
                            "description": "Defines how the items are filtered, valid values are \"contains\", (default) \"startsWith\", \"endsWith\", \"equals\" and \"notEquals\".",
                            "value": {
                                "kind": "expression",
                                "type": "\"endsWith\" | \"startsWith\" | \"contains\" | \"equals\" | \"notEquals\""
                            }
                        },
                        {
                            "name": "filterPlaceholder",
                            "default": "null",
                            "description": "Placeholder text to show when filter input is empty.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "filterTemplate",
                            "default": "null",
                            "description": "The template of filter element.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "fixedPlaceholder",
                            "default": "false",
                            "description": "Whether to display selected items in the label section or always display the placeholder as the default label.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "flex",
                            "default": "false",
                            "description": "Use flex layout for the items panel.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "id",
                            "default": "null",
                            "description": "Unique identifier of the element.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "inline",
                            "default": "false",
                            "description": "Render the items panel inline.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "inputId",
                            "default": "null",
                            "description": "Identifier of the focusable input.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "inputRef",
                            "default": "null",
                            "description": "Reference of the input element.",
                            "value": {
                                "kind": "expression",
                                "type": "Ref<HTMLSelectElement>"
                            }
                        },
                        {
                            "name": "itemClassName",
                            "default": "null",
                            "description": "Style class of the items.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "itemCheckboxIcon",
                            "default": "null",
                            "description": "The icon displayed in the header when all checkboxes are checked.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<MultiSelect>"
                            }
                        },
                        {
                            "name": "itemTemplate",
                            "default": "null",
                            "description": "Function that gets the option and returns the content for it.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "loading",
                            "default": "false",
                            "description": "Displays a loader to indicate data load is in progress.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "loadingIcon",
                            "default": "null",
                            "description": "The icon to show while indicating data load is in progress.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<MultiSelectProps>"
                            }
                        },
                        {
                            "name": "maxSelectedLabels",
                            "default": "null",
                            "description": "Decides how many selected item labels to show at most.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "name",
                            "default": "null",
                            "description": "Name of the input element.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "optionDisabled",
                            "default": "null",
                            "description": "Property name or getter function to use as the disabled flag of an option, defaults to false when not defined.",
                            "value": {
                                "kind": "expression",
                                "type": "string | Function"
                            }
                        },
                        {
                            "name": "optionGroupChildren",
                            "default": "null",
                            "description": "Property name or getter function that refers to the children options of option group.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "optionGroupLabel",
                            "default": "null",
                            "description": "Property name or getter function to use as the label of an option group.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "optionGroupTemplate",
                            "default": "null",
                            "description": "Template of an option group item.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "optionLabel",
                            "default": "null",
                            "description": "Name of the label field of an option when an arbitrary objects instead of SelectItems are used as options.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "optionValue",
                            "default": "null",
                            "description": "Property name or getter function to use as the value of an option, defaults to the option itself when not defined.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "options",
                            "default": "null",
                            "description": "An array of selectitems to display as the available options.",
                            "value": {
                                "kind": "expression",
                                "type": "SelectItemOptionsType"
                            }
                        },
                        {
                            "name": "overlayVisible",
                            "default": "false",
                            "description": "Specifies the visibility of the overlay panel.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "panelClassName",
                            "default": "null",
                            "description": "Style class of the overlay panel element.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "panelFooterTemplate",
                            "default": "null",
                            "description": "Template of the panel footer.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "panelHeaderTemplate",
                            "default": "null",
                            "description": "Template of the panel header.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "panelStyle",
                            "default": "null",
                            "description": "Inline style of the overlay panel element.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSProperties"
                            }
                        },
                        {
                            "name": "placeholder",
                            "default": "null",
                            "description": "Label to display when there are no selections.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "invalid",
                            "default": "false",
                            "description": "When present, it specifies that the component should have invalid state style.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "variant",
                            "default": "outlined",
                            "description": "Specifies the input variant of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "\"filled\" | \"outlined\""
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "MultiSelectPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "removeIcon",
                            "default": "null",
                            "description": "Icon of the remove chip element.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<MultiSelectProps>"
                            }
                        },
                        {
                            "name": "resetFilterOnHide",
                            "default": "false",
                            "description": "Clears the filter value when hiding the dropdown.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "scrollHeight",
                            "default": "200px",
                            "description": "Height of the viewport in pixels, a scrollbar is defined if height of list exceeds this value.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "selectAll",
                            "default": "false",
                            "description": "Whether all data is selected.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "selectedItemTemplate",
                            "default": "null",
                            "description": "Function that gets an item in the value and returns the content for it.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "selectedItemsLabel",
                            "default": "items selected",
                            "description": "Label to display after exceeding max selected labels.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "selectionLimit",
                            "default": "null",
                            "description": "Number of maximum options that can be selected.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "showClear",
                            "default": "false",
                            "description": "When enabled, a clear icon is displayed to clear the value.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "showSelectAll",
                            "default": "true",
                            "description": "Whether to show the select all checkbox inside the panel's header.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "selectAllLabel",
                            "default": "null",
                            "description": "Label to display if showSelectAll is true",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "style",
                            "default": "null",
                            "description": "Inline style of the element.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSProperties"
                            }
                        },
                        {
                            "name": "tabIndex",
                            "default": "null",
                            "description": "Index of the element in tabbing order.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "selectOnFocus",
                            "default": "false",
                            "description": "When enabled, the focused tab is activated.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "focusOnHover",
                            "default": "true",
                            "description": "When enabled, the focus is placed on the hovered option.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "autoOptionFocus",
                            "default": "false",
                            "description": "Whether to focus on the first visible or selected element.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "tooltip",
                            "default": "null",
                            "description": "Content of the tooltip.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "tooltipOptions",
                            "default": "null",
                            "description": "Configuration of the tooltip, refer to the tooltip documentation for more information.",
                            "value": {
                                "kind": "expression",
                                "type": "TooltipOptions"
                            }
                        },
                        {
                            "name": "transitionOptions",
                            "default": "null",
                            "description": "The properties of CSSTransition can be customized, except for \"nodeRef\" and \"in\" properties.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSTransitionProps"
                            }
                        },
                        {
                            "name": "useOptionAsValue",
                            "default": "null",
                            "description": "Whether the option should be used as the value for the select element.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "value",
                            "default": "null",
                            "description": "Value of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "any"
                            }
                        },
                        {
                            "name": "virtualScrollerOptions",
                            "default": "null",
                            "description": "Whether to use the virtualScroller feature. The properties of VirtualScroller component can be used like an object in it.",
                            "value": {
                                "kind": "expression",
                                "type": "VirtualScrollerProps"
                            }
                        }
                    ],
                    "events": [
                        {
                            "name": "onBlur",
                            "description": "Callback to invoke when the element loses focus.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "FocusEvent<HTMLInputElement, Element>",
                                    "description": "Browser event."
                                }
                            ]
                        },
                        {
                            "name": "onChange",
                            "description": "Callback to invoke when value changes.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "MultiSelectChangeEvent",
                                    "description": "Custom change event."
                                }
                            ]
                        },
                        {
                            "name": "onFilter",
                            "description": "Callback to invoke on filtering.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "MultiSelectFilterEvent",
                                    "description": "Custom filter event."
                                }
                            ]
                        },
                        {
                            "name": "onFocus",
                            "description": "Callback to invoke when the element receives focus.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "FocusEvent<HTMLInputElement, Element>",
                                    "description": "Browser event."
                                }
                            ]
                        },
                        {
                            "name": "onHide",
                            "description": "Callback to invoke when overlay panel becomes hidden.",
                            "arguments": []
                        },
                        {
                            "name": "onRemove",
                            "description": "Callback to invoke when a chip is removed.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "MultiSelectRemoveEvent",
                                    "description": "Custom remove event"
                                }
                            ]
                        },
                        {
                            "name": "onSelectAll",
                            "description": "Callback to invoke when all data is selected.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "MultiSelectAllEvent",
                                    "description": "Custom select event."
                                }
                            ]
                        },
                        {
                            "name": "onShow",
                            "description": "Callback to invoke when overlay panel becomes visible.",
                            "arguments": []
                        }
                    ]
                },
                {
                    "name": "Multistatecheckbox",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Multistatecheckbox"
                    },
                    "description": "MultiStateCheckbox is used to select a state from given multiple states.\n\n[Live Demo](https://www.primereact.org/multistatecheckbox/)",
                    "doc-url": "https://www.primereact.org/multistatecheckbox/",
                    "attributes": [
                        {
                            "name": "autoFocus",
                            "default": "false",
                            "description": "When present, it specifies that the component should automatically get focus on load.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "value",
                            "default": "null",
                            "description": "Value of the MultiStateCheckbox.",
                            "value": {
                                "kind": "expression",
                                "type": "any"
                            }
                        },
                        {
                            "name": "options",
                            "default": "null",
                            "description": "An array to display as the available options.",
                            "value": {
                                "kind": "expression",
                                "type": "any[] | MultiStateCheckboxOption[]"
                            }
                        },
                        {
                            "name": "optionValue",
                            "default": "null",
                            "description": "Property name to use as the value of an option, defaults to the option itself when not defined.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "optionLabel",
                            "default": "null",
                            "description": "Property name to refer to the option label, used by screen readers only. Defaults to optionValue.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "optionIcon",
                            "default": "null",
                            "description": "Property name to use as the icon of an option, defaults to the icon property.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "iconTemplate",
                            "default": "null",
                            "description": "Template of icon for the selected option.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "dataKey",
                            "default": "null",
                            "description": "A property to uniquely identify an option.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "disabled",
                            "default": "false",
                            "description": "When present, it specifies that the element value cannot be altered.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "readOnly",
                            "default": "false",
                            "description": "When present, it specifies that the value cannot be changed.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "empty",
                            "default": "true",
                            "description": "If false, the empty state is skipped in the chekbox.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "tooltip",
                            "default": "null",
                            "description": "Content of the tooltip.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "tooltipOptions",
                            "default": "null",
                            "description": "Configuration of the tooltip, refer to the tooltip documentation for more information.",
                            "value": {
                                "kind": "expression",
                                "type": "TooltipOptions"
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "MultiStateCheckboxPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": [
                        {
                            "name": "onChange",
                            "description": "Callback to invoke on value change",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "MultiStateCheckboxChangeEvent",
                                    "description": "Custom change event."
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "Orderlist",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Orderlist"
                    },
                    "description": "OrderList is used to sort a collection.\n\n[Live Demo](https://www.primereact.org/orderlist/)",
                    "doc-url": "https://www.primereact.org/orderlist/",
                    "attributes": [
                        {
                            "name": "value",
                            "default": "null",
                            "description": "An array of objects to reorder.",
                            "value": {
                                "kind": "expression",
                                "type": "any[]"
                            }
                        },
                        {
                            "name": "header",
                            "default": "null",
                            "description": "Text for the caption.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "autoOptionFocus",
                            "default": "true",
                            "description": "Whether to focus on the first visible or selected element.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "focusOnHover",
                            "default": "true",
                            "description": "When enabled, the focus is placed on the hovered option.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "listStyle",
                            "default": "null",
                            "description": "Inline style of the list element.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSProperties"
                            }
                        },
                        {
                            "name": "dragdrop",
                            "default": "false",
                            "description": "Whether to enable dragdrop based reordering.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "ariaLabel",
                            "default": "null",
                            "description": "Used to define a string that labels the component.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "ariaLabelledBy",
                            "default": "null",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "dataKey",
                            "default": "null",
                            "description": "Name of the field that uniquely identifies the a record in the data.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "breakpoint",
                            "default": "'960px'.",
                            "description": "The breakpoint to define the maximum width boundary when responsiveness is enabled.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "moveUpIcon",
                            "default": "null",
                            "description": "Icon of the move up icon.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<OrderListProps>"
                            }
                        },
                        {
                            "name": "moveTopIcon",
                            "default": "null",
                            "description": "Icon of the move top icon.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<OrderListProps>"
                            }
                        },
                        {
                            "name": "moveDownIcon",
                            "default": "null",
                            "description": "Icon of the move down icon.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<OrderListProps>"
                            }
                        },
                        {
                            "name": "moveBottomIcon",
                            "default": "null",
                            "description": "Icon of the move bottom icon.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<OrderListProps>"
                            }
                        },
                        {
                            "name": "filterIcon",
                            "default": "null",
                            "description": "Icon of the filter.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<OrderListProps>"
                            }
                        },
                        {
                            "name": "filter",
                            "default": "label",
                            "description": "When filtering is enabled, filterBy decides which field or fields (comma separated) to search against.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "filterBy",
                            "default": "label",
                            "description": "When filtering is enabled, filterBy decides which field or fields (comma separated) to search against.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "filterMatchMode",
                            "default": "contains",
                            "description": "Defines how the items are filtered, valid values are \"contains\", (default) \"startsWith\", \"endsWith\", \"equals\" and \"notEquals\".",
                            "value": {
                                "kind": "expression",
                                "type": "\"endsWith\" | \"startsWith\" | \"contains\" | \"equals\" | \"notEquals\""
                            }
                        },
                        {
                            "name": "filterPlaceholder",
                            "default": "null",
                            "description": "Placeholder text to show when filter input is empty.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "filterLocale",
                            "default": "undefined",
                            "description": "Locale to use in filtering. The default locale is the host environment's current locale.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "filterTemplate",
                            "default": "null",
                            "description": "Custom template of filter element.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "OrderListPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": [
                        {
                            "name": "onFocus",
                            "description": "Callback to invoke when menu receives focus.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "SyntheticEvent<Element, Event>",
                                    "description": "Browser event."
                                }
                            ]
                        },
                        {
                            "name": "onBlur",
                            "description": "Callback to invoke when menu loses focus.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "SyntheticEvent<Element, Event>",
                                    "description": "Browser event."
                                }
                            ]
                        },
                        {
                            "name": "onChange",
                            "description": "Callback to invoke to when a mouse button is pressed.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "OrderListChangeEvent",
                                    "description": "Browser event."
                                }
                            ]
                        },
                        {
                            "name": "itemTemplate",
                            "description": "The template of each item",
                            "arguments": [
                                {
                                    "name": "item",
                                    "type": "any",
                                    "description": "Current item"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "Organizationchart",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Organizationchart"
                    },
                    "description": "OrganizationChart visualizes hierarchical organization data.\n\n[Live Demo](https://www.primereact.org/organizationchart/)",
                    "doc-url": "https://www.primereact.org/organizationchart/",
                    "attributes": [
                        {
                            "name": "value",
                            "default": "null",
                            "description": "An array of nested TreeNodes.",
                            "value": {
                                "kind": "expression",
                                "type": "OrganizationChartNodeData[]"
                            }
                        },
                        {
                            "name": "togglerIcon",
                            "default": "null",
                            "description": "Toggle icon of an expanded and collapsed node.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<OrganizationChartProps>"
                            }
                        },
                        {
                            "name": "selectionMode",
                            "default": "null",
                            "description": "Defines the selection mode, valid values \"single\" and \"multiple\".",
                            "value": {
                                "kind": "expression",
                                "type": "\"multiple\" | \"single\""
                            }
                        },
                        {
                            "name": "selection",
                            "default": "null",
                            "description": "A single treenode instance or an array to refer to the selections.",
                            "value": {
                                "kind": "expression",
                                "type": "null | OrganizationChartNodeData | OrganizationChartNodeData[]"
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "OrganizationChartPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": [
                        {
                            "name": "nodeTemplate",
                            "description": "Template function that gets a node as a parameter and returns a content.",
                            "arguments": [
                                {
                                    "name": "node",
                                    "type": "OrganizationChartNodeData",
                                    "description": "A node instance."
                                }
                            ]
                        },
                        {
                            "name": "onSelectionChange",
                            "description": "Callback to invoke when node selection changes.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "OrganizationChartSelectionChangeEvent",
                                    "description": "Custom selection changed event."
                                }
                            ]
                        },
                        {
                            "name": "onNodeSelect",
                            "description": "Callback to invoke when a node is selected.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "OrganizationChartNodeSelectEvent",
                                    "description": "Custom node select event."
                                }
                            ]
                        },
                        {
                            "name": "onNodeUnselect",
                            "description": "Callback to invoke when a node is unselected.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "OrganizationChartNodeUnselectEvent",
                                    "description": "Custom node unselect event."
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "Overlaypanel",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Overlaypanel"
                    },
                    "description": "OverlayPanel, also known as Popover, is a container component that can overlay other components on page.\n\n[Live Demo](https://www.primereact.org/overlaypanel)",
                    "doc-url": "https://www.primereact.org/overlaypanel",
                    "attributes": [
                        {
                            "name": "dismissable",
                            "default": "true",
                            "description": "Enables to hide the overlay when outside is clicked.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "showCloseIcon",
                            "default": "false",
                            "description": "When enabled, displays a close icon at top right corner.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "closeIcon",
                            "default": "null",
                            "description": "Icon to display as close icon.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<OverlayPanelProps>"
                            }
                        },
                        {
                            "name": "closeOnEscape",
                            "default": "true",
                            "description": "Specifies if pressing escape key should hide the preview.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "appendTo",
                            "default": "document.body",
                            "description": "DOM element instance where the overlay panel should be mounted. Valid values are any DOM Element and 'self'. The self value is used to render a component where it is located.",
                            "value": {
                                "kind": "expression",
                                "type": "null | HTMLElement | \"self\" | Function"
                            }
                        },
                        {
                            "name": "ariaCloseLabel",
                            "default": "close",
                            "description": "Aria label of the close icon.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "breakpoints",
                            "default": "null",
                            "description": "Object literal to define widths per screen size.",
                            "value": {
                                "kind": "expression",
                                "type": "OverlayPanelBreakpoints"
                            }
                        },
                        {
                            "name": "transitionOptions",
                            "default": "null",
                            "description": "The properties of CSSTransition can be customized, except for \"nodeRef\" and \"in\" properties.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSTransitionProps"
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "OverlayPanelPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": [
                        {
                            "name": "onShow",
                            "description": "Callback to invoke when overlay becomes visible.",
                            "arguments": []
                        },
                        {
                            "name": "onHide",
                            "description": "Callback to invoke when overlay becomes hidden.",
                            "arguments": []
                        }
                    ]
                },
                {
                    "name": "Overlayservice",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Overlayservice"
                    },
                    "description": "OverlayService allows all overlay components to communicate with each other.\n\n[Live Demo](https://www.primereact.org/dropdown/)",
                    "doc-url": "https://www.primereact.org/dropdown/"
                },
                {
                    "name": "Paginator",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Paginator"
                    },
                    "description": "Paginator is a generic widget to display content in paged format.\n\n[Live Demo](https://www.primereact.org/paginator/)",
                    "doc-url": "https://www.primereact.org/paginator/",
                    "attributes": [
                        {
                            "name": "totalRecords",
                            "default": "0",
                            "description": "Number of total records.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "rows",
                            "default": "0",
                            "description": "Data count to display per page.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "first",
                            "default": "0",
                            "description": "Zero-relative number of the first row to be displayed.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "pageLinkSize",
                            "default": "5",
                            "description": "Number of page links to display.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "rowsPerPageOptions",
                            "default": "null",
                            "description": "Array of integer values to display inside rows per page dropdown.",
                            "value": {
                                "kind": "expression",
                                "type": "number[]"
                            }
                        },
                        {
                            "name": "alwaysShow",
                            "default": "null",
                            "description": "Whether to show it even there is only one page.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "template",
                            "default": "FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown",
                            "description": "Custom template of the paginator.",
                            "value": {
                                "kind": "expression",
                                "type": "string | PaginatorTemplateOptions"
                            }
                        },
                        {
                            "name": "leftContent",
                            "default": "null",
                            "description": "Content to inject into the left side of the paginator.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "rightContent",
                            "default": "null",
                            "description": "Content to inject into the right side of the paginator.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "firstPageLinkIcon",
                            "default": "null",
                            "description": "Icon of the first page link icon template.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<PaginatorProps>"
                            }
                        },
                        {
                            "name": "prevPageLinkIcon",
                            "default": "null",
                            "description": "Icon of the prev page link icon template.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<PaginatorProps>"
                            }
                        },
                        {
                            "name": "nextPageLinkIcon",
                            "default": "null",
                            "description": "Icon of the next page link icon template.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<PaginatorProps>"
                            }
                        },
                        {
                            "name": "lastPageLinkIcon",
                            "default": "null",
                            "description": "Icon of the last page link icon template.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<PaginatorProps>"
                            }
                        },
                        {
                            "name": "currentPageReportTemplate",
                            "default": "({currentPage} of {totalPages})",
                            "description": "Template of the current page report element. Available placeholders are {currentPage}, {totalPages}, {rows}, {first}, {last} and {totalRecords}",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "dropdownAppendTo",
                            "default": "document.body",
                            "description": "DOM element instance where the overlay panel should be mounted. Valid values are any DOM Element and 'self'. The self value is used to render a component where it is located.",
                            "value": {
                                "kind": "expression",
                                "type": "null | HTMLElement | \"self\" | Function"
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PaginatorPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": [
                        {
                            "name": "onPageChange",
                            "description": "Callback to invoke when page changes, the event object contains information about the new state.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "PaginatorPageChangeEvent",
                                    "description": "Custom page change event."
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "Panel",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Panel"
                    },
                    "description": "Panel is a grouping component providing with content toggle feature.\n\n[Live Demo](https://www.primereact.org/panel/)",
                    "doc-url": "https://www.primereact.org/panel/",
                    "attributes": [
                        {
                            "name": "header",
                            "default": "null",
                            "description": "Custom header template of the panel.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "footer",
                            "default": "null",
                            "description": "Custom footer template of the panel.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "headerTemplate",
                            "default": "null",
                            "description": "Header template of the panel to customize more.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "footerTemplate",
                            "default": "null",
                            "description": "Footer template of the panel to customize more.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "toggleable",
                            "default": "false",
                            "description": "Defines if content of panel can be expanded and collapsed.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "collapsed",
                            "default": "false",
                            "description": "Defines the initial state of panel content, supports one or two-way binding as well.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "expandIcon",
                            "default": "null",
                            "description": "Icon of a expanded tab.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<PanelProps>"
                            }
                        },
                        {
                            "name": "collapseIcon",
                            "default": "null",
                            "description": "Icon of a collapsed tab.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<PanelProps>"
                            }
                        },
                        {
                            "name": "icons",
                            "default": "null",
                            "description": "Custom icons template for the header.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "transitionOptions",
                            "default": "null",
                            "description": "The properties of CSSTransition can be customized, except for \"nodeRef\" and \"in\" properties.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSTransitionProps"
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PanelPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": [
                        {
                            "name": "onExpand",
                            "description": "Callback to invoke when a tab gets expanded.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "SyntheticEvent<Element, Event>",
                                    "description": "Browser event."
                                }
                            ]
                        },
                        {
                            "name": "onCollapse",
                            "description": "Callback to invoke when an active tab is collapsed by clicking on the header.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "SyntheticEvent<Element, Event>",
                                    "description": "Browser event."
                                }
                            ]
                        },
                        {
                            "name": "onToggle",
                            "description": "Callback to invoke when a tab gets expanded.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "PanelToggleEvent",
                                    "description": "Custom toggle event."
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "Panelmenu",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Panelmenu"
                    },
                    "description": "PanelMenu is a hybrid of accordion-tree components.\n\n[Live Demo](https://www.primereact.org/panelmenu/)",
                    "doc-url": "https://www.primereact.org/panelmenu/",
                    "attributes": [
                        {
                            "name": "model",
                            "default": "null",
                            "description": "An array of menuitems.",
                            "value": {
                                "kind": "expression",
                                "type": "MenuItem[]"
                            }
                        },
                        {
                            "name": "expandedKeys",
                            "default": "null",
                            "description": "A map of keys to represent the expansion state in controlled mode.",
                            "value": {
                                "kind": "expression",
                                "type": "PanelMenuExpandedKeys"
                            }
                        },
                        {
                            "name": "multiple",
                            "default": "false",
                            "description": "Whether multiple tabs can be activated at the same time or not.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "submenuIcon",
                            "default": "null",
                            "description": "Icon of the submenu.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<PanelMenuProps>"
                            }
                        },
                        {
                            "name": "transitionOptions",
                            "default": "null",
                            "description": "The properties of CSSTransition can be customized, except for \"nodeRef\" and \"in\" properties.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSTransitionProps"
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PanelMenuPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": [
                        {
                            "name": "onShow",
                            "description": "Callback to invoke when a panel gets expanded.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "PanelMenuHeaderItemClickEvent",
                                    "description": "custom event."
                                }
                            ]
                        },
                        {
                            "name": "onHide",
                            "description": "Callback to invoke when a panel gets collapsed.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "PanelMenuHeaderItemClickEvent",
                                    "description": "custom event."
                                }
                            ]
                        },
                        {
                            "name": "onExpandedKeysChange",
                            "description": "Callback to when the expandedKeys changes.",
                            "arguments": [
                                {
                                    "name": "value",
                                    "type": "any",
                                    "description": "New value."
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "Passthrough",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Passthrough"
                    },
                    "doc-url": ""
                },
                {
                    "name": "Passthrough/tailwind",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Passthrough/tailwind"
                    },
                    "doc-url": ""
                },
                {
                    "name": "Password",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Password"
                    },
                    "description": "Password displays strength indicator for password fields.\n\n[Live Demo](https://www.primereact.org/password/)",
                    "doc-url": "https://www.primereact.org/password/",
                    "attributes": [
                        {
                            "name": "inputId",
                            "default": "null",
                            "description": "Identifier of the input element.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "inputRef",
                            "default": "null",
                            "description": "Reference of the input element.",
                            "value": {
                                "kind": "expression",
                                "type": "Ref<HTMLInputElement>"
                            }
                        },
                        {
                            "name": "inputStyle",
                            "default": "null",
                            "description": "Inline style of the input field.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSProperties"
                            }
                        },
                        {
                            "name": "inputClassName",
                            "default": "null",
                            "description": "Style class of the input field.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "invalid",
                            "default": "false",
                            "description": "When present, it specifies that the component should have invalid state style.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "variant",
                            "default": "outlined",
                            "description": "Specifies the input variant of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "\"filled\" | \"outlined\""
                            }
                        },
                        {
                            "name": "hideIcon",
                            "default": "null",
                            "description": "Hide icon template.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<PasswordProps>"
                            }
                        },
                        {
                            "name": "showIcon",
                            "default": "null",
                            "description": "Show icon template.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<PasswordProps>"
                            }
                        },
                        {
                            "name": "promptLabel",
                            "default": "Please enter a password",
                            "description": "Text to prompt password entry.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "weakLabel",
                            "default": "Weak",
                            "description": "Text for a weak password.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "mediumLabel",
                            "default": "Medium",
                            "description": "Text for a medium password.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "strongLabel",
                            "default": "Strong",
                            "description": "Text for a strong password.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "mediumRegex",
                            "default": "^(((?=.*[a-z])(?=.*[A-Z]))|((?=.*[a-z])(?=.*[0-9]))|((?=.*[A-Z])(?=.*[0-9])))(?=.{6,}).",
                            "description": "Regex for a medium level password.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "strongRegex",
                            "default": "^(?=.*[a-z])(?=.*[A-Z])(?=.*[0-9])(?=.{8,})",
                            "description": "Regex for a strong level password.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "feedback",
                            "default": "true",
                            "description": "Whether to show the strength indicator or not.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "toggleMask",
                            "default": "false",
                            "description": "Whether to show an icon to display the password as plain text.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "appendTo",
                            "default": "document.body",
                            "description": "DOM element instance where the overlay panel should be mounted. Valid values are any DOM Element and 'self'. The self value is used to render a component where it is located.",
                            "value": {
                                "kind": "expression",
                                "type": "null | HTMLElement | \"self\" | Function"
                            }
                        },
                        {
                            "name": "header",
                            "default": "null",
                            "description": "Template of panel header if \"feedback\" is enabled.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "content",
                            "default": "null",
                            "description": "Template of panel content if \"feedback\" is enabled.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "footer",
                            "default": "null",
                            "description": "Template of panel footer if \"feedback\" is enabled.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "icon",
                            "default": "null",
                            "description": "Template of mask icon if \"toggleMask\" is enabled.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "tooltip",
                            "default": "null",
                            "description": "Content of the tooltip.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "tooltipOptions",
                            "default": "null",
                            "description": "Configuration of the tooltip, refer to the tooltip documentation for more information.",
                            "value": {
                                "kind": "expression",
                                "type": "TooltipOptions"
                            }
                        },
                        {
                            "name": "keyfilter",
                            "default": "null",
                            "description": "Format definition of the keys to block.",
                            "value": {
                                "kind": "expression",
                                "type": "KeyFilterType"
                            }
                        },
                        {
                            "name": "panelStyle",
                            "default": "null",
                            "description": "Inline style of the overlay panel element.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSProperties"
                            }
                        },
                        {
                            "name": "panelClassName",
                            "default": "null",
                            "description": "Style class of the overlay panel element.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "transitionOptions",
                            "default": "null",
                            "description": "The properties of CSSTransition can be customized, except for \"nodeRef\" and \"in\" properties.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSTransitionProps"
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PasswordPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": [
                        {
                            "name": "onInput",
                            "description": "Callback to invoke on input event of input field.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "FormEvent<HTMLInputElement>",
                                    "description": "Browser event"
                                },
                                {
                                    "name": "validatePattern",
                                    "type": "boolean",
                                    "description": "Whether to validate the value"
                                }
                            ]
                        },
                        {
                            "name": "onShow",
                            "description": "Callback to invoke when overlay becomes visible.",
                            "arguments": []
                        },
                        {
                            "name": "onHide",
                            "description": "Callback to invoke when overlay becomes hidden.",
                            "arguments": []
                        }
                    ]
                },
                {
                    "name": "Picklist",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Picklist"
                    },
                    "description": "PickList is used to reorder items between different lists.\n\n[Live Demo](https://www.primereact.org/picklist/)",
                    "doc-url": "https://www.primereact.org/picklist/",
                    "attributes": [
                        {
                            "name": "id",
                            "default": "null",
                            "description": "Unique identifier of the element.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "source",
                            "default": "null",
                            "description": "An array of objects for the source list.",
                            "value": {
                                "kind": "expression",
                                "type": "any[]"
                            }
                        },
                        {
                            "name": "target",
                            "default": "null",
                            "description": "An array of objects for the target list.",
                            "value": {
                                "kind": "expression",
                                "type": "any[]"
                            }
                        },
                        {
                            "name": "sourceHeader",
                            "default": "null",
                            "description": "Template for the source list caption.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "targetHeader",
                            "default": "null",
                            "description": "Template for the target list caption.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "autoOptionFocus",
                            "default": "true",
                            "description": "Whether to focus on the first visible or selected element.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "focusOnHover",
                            "default": "true",
                            "description": "When enabled, the focus is placed on the hovered option.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "style",
                            "default": "null",
                            "description": "Inline style of the element.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSProperties"
                            }
                        },
                        {
                            "name": "className",
                            "default": "null",
                            "description": "Style class of the element.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "sourceStyle",
                            "default": "null",
                            "description": "Inline style of the source list element.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSProperties"
                            }
                        },
                        {
                            "name": "targetStyle",
                            "default": "null",
                            "description": "Inline style of the target list element.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSProperties"
                            }
                        },
                        {
                            "name": "sourceSelection",
                            "default": "null",
                            "description": "Selected item in the source list.",
                            "value": {
                                "kind": "expression",
                                "type": "any"
                            }
                        },
                        {
                            "name": "targetSelection",
                            "default": "null",
                            "description": "Selected items in the target list.",
                            "value": {
                                "kind": "expression",
                                "type": "any"
                            }
                        },
                        {
                            "name": "showSourceControls",
                            "default": "true",
                            "description": "Whether to show buttons of source list.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "showTargetControls",
                            "default": "true",
                            "description": "Whether to show buttons of target list.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "metaKeySelection",
                            "default": "true",
                            "description": "Defines how multiple items can be selected, when true metaKey needs to be pressed to select or unselect an item and when set to false selection of each item can be toggled individually. On touch enabled devices, metaKeySelection is turned off automatically.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "filter",
                            "default": "false",
                            "description": "When specified, displays an input field to filter the items on keyup.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "targetFilterIcon",
                            "default": "null",
                            "description": "Icon of the target list filter.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<PickListProps>"
                            }
                        },
                        {
                            "name": "sourceFilterIcon",
                            "default": "null",
                            "description": "Icon of the source list filter.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<PickListProps>"
                            }
                        },
                        {
                            "name": "moveAllToSourceIcon",
                            "default": "null",
                            "description": "Icon for moving all items to the source list.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<PickListProps>"
                            }
                        },
                        {
                            "name": "moveToSourceIcon",
                            "default": "null",
                            "description": "Icon for moving an item to the source list.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<PickListProps>"
                            }
                        },
                        {
                            "name": "moveAllToTargetIcon",
                            "default": "null",
                            "description": "Icon for moving all items to the target list.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<PickListProps>"
                            }
                        },
                        {
                            "name": "moveToTargetIcon",
                            "default": "null",
                            "description": "Icon for moving an item to the target list.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<PickListProps>"
                            }
                        },
                        {
                            "name": "moveUpIcon",
                            "default": "null",
                            "description": "Icon of the move up icon.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<PickListProps>"
                            }
                        },
                        {
                            "name": "moveTopIcon",
                            "default": "null",
                            "description": "Icon of the move top icon.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<PickListProps>"
                            }
                        },
                        {
                            "name": "moveDownIcon",
                            "default": "null",
                            "description": "Icon of the move down icon.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<PickListProps>"
                            }
                        },
                        {
                            "name": "moveBottomIcon",
                            "default": "null",
                            "description": "Icon of the move bottom icon.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<PickListProps>"
                            }
                        },
                        {
                            "name": "filterBy",
                            "default": "null",
                            "description": "When specified displays an input field to filter the items on keyup and decides which field to search (Accepts multiple fields with a comma).",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "filterMatchMode",
                            "default": "contains",
                            "description": "Defines how the items are filtered, valid values are \"contains\", (default) \"startsWith\", \"endsWith\", \"equals\" and \"notEquals\".",
                            "value": {
                                "kind": "expression",
                                "type": "\"endsWith\" | \"startsWith\" | \"contains\" | \"equals\" | \"notEquals\""
                            }
                        },
                        {
                            "name": "filterLocale",
                            "default": "undefined",
                            "description": "Locale to use in filtering. The default locale is the host environment's current locale.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "sourceFilterValue",
                            "default": "null",
                            "description": "Filter value in the target list.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "targetFilterValue",
                            "default": "null",
                            "description": "Filter value in the source list.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "showSourceFilter",
                            "default": "true",
                            "description": "Whether to show filter input for source list when filterBy is enabled.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "showTargetFilter",
                            "default": "true",
                            "description": "Whether to show filter input for target list when filterBy is enabled.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "sourceFilterPlaceholder",
                            "default": "null",
                            "description": "Placeholder text on source filter input.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "targetFilterPlaceholder",
                            "default": "null",
                            "description": "Placeholder text on target filter input.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "sourceFilterTemplate",
                            "default": "null",
                            "description": "Template for the source filter content.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "targetFilterTemplate",
                            "default": "null",
                            "description": "Placeholder text on target filter input.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "tabIndex",
                            "default": "null",
                            "description": "Index of the element in tabbing order.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "dataKey",
                            "default": "null",
                            "description": "Name of the field that uniquely identifies the a record in the data.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "breakpoint",
                            "default": "'960px'.",
                            "description": "The breakpoint to define the maximum width boundary when responsiveness is enabled.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "itemTemplate",
                            "default": "null",
                            "description": "Template that gets the options for both source and target items and returns the content for it. Useful if you want the same template for both lists else use the custom sourceItemTemplate or targetItemTemplate properties.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "sourceItemTemplate",
                            "default": "null",
                            "description": "Template that gets the options for the source items and returns the content for it.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "targetItemTemplate",
                            "default": "null",
                            "description": "Template that gets the options for the target items and returns the content for it.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PickListPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": [
                        {
                            "name": "onFocus",
                            "description": "Callback to invoke when menu receives focus.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "SyntheticEvent<Element, Event>",
                                    "description": "Browser event."
                                }
                            ]
                        },
                        {
                            "name": "onBlur",
                            "description": "Callback to invoke when menu loses focus.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "SyntheticEvent<Element, Event>",
                                    "description": "Browser event."
                                }
                            ]
                        },
                        {
                            "name": "onChange",
                            "description": "Callback to invoke when items are moved from source to target.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "PickListChangeEvent",
                                    "description": "Custom change event."
                                }
                            ]
                        },
                        {
                            "name": "onMoveToSource",
                            "description": "Callback to invoke when items are moved from target to source.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "PickListEvent",
                                    "description": "Custom picklist event."
                                }
                            ]
                        },
                        {
                            "name": "onMoveAllToSource",
                            "description": "Callback to invoke when all items are moved from target to source.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "PickListEvent",
                                    "description": "Custom picklist event."
                                }
                            ]
                        },
                        {
                            "name": "onMoveToTarget",
                            "description": "Callback to invoke when items are moved from source to target.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "PickListEvent",
                                    "description": "Custom picklist event."
                                }
                            ]
                        },
                        {
                            "name": "onMoveAllToTarget",
                            "description": "Callback to invoke when all items are moved from source to target.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "PickListEvent",
                                    "description": "Custom picklist event."
                                }
                            ]
                        },
                        {
                            "name": "onSourceSelectionChange",
                            "description": "Callback to invoke when items are selected within source list.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "PickListEvent",
                                    "description": "Custom picklist event."
                                }
                            ]
                        },
                        {
                            "name": "onTargetSelectionChange",
                            "description": "Callback to invoke when items are selected within target list.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "PickListEvent",
                                    "description": "Custom picklist event."
                                }
                            ]
                        },
                        {
                            "name": "onSourceFilterChange",
                            "description": "Callback to invoke when items are filtered within source list.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "PickListEvent",
                                    "description": "Custom picklist event."
                                }
                            ]
                        },
                        {
                            "name": "onTargetFilterChange",
                            "description": "Callback to invoke when items are filtered within target list.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "PickListEvent",
                                    "description": "Custom picklist event."
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "Progressbar",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Progressbar"
                    },
                    "description": "ProgressBar is a process status indicator.\n\n[Live Demo](https://www.primereact.org/progressbar)",
                    "doc-url": "https://www.primereact.org/progressbar",
                    "attributes": [
                        {
                            "name": "value",
                            "default": "null",
                            "description": "Current value of the progress.",
                            "value": {
                                "kind": "expression",
                                "type": "null | string | number"
                            }
                        },
                        {
                            "name": "showValue",
                            "default": "true",
                            "description": "Show or hide progress bar value.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "unit",
                            "default": "%",
                            "description": "Unit sign appended to the value.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "mode",
                            "default": "determinate",
                            "description": "Defines the mode of the progress, valid values are \"determinate\" and \"indeterminate\".",
                            "value": {
                                "kind": "expression",
                                "type": "\"determinate\" | \"indeterminate\""
                            }
                        },
                        {
                            "name": "color",
                            "default": "null",
                            "description": "Color for the background of the progress.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ProgressBarPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": [
                        {
                            "name": "displayValueTemplate",
                            "description": "Custom display value template",
                            "arguments": [
                                {
                                    "name": "value",
                                    "type": "undefined | null | string | number"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "Progressspinner",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Progressspinner"
                    },
                    "description": "ProgressSpinner is a process status indicator.\n\n[Live Demo](https://www.primereact.org/progressspinner)",
                    "doc-url": "https://www.primereact.org/progressspinner",
                    "attributes": [
                        {
                            "name": "strokeWidth",
                            "default": "2",
                            "description": "Width of the circle stroke.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "fill",
                            "default": "null",
                            "description": "Color for the background of the circle.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "animationDuration",
                            "default": "2s",
                            "description": "Duration of the rotate animation.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ProgressSpinnerPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": []
                },
                {
                    "name": "Radiobutton",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Radiobutton"
                    },
                    "description": "RadioButton is an extension to standard radio button element with theming.\n\n[Live Demo](https://www.primereact.org/radiobutton/)",
                    "doc-url": "https://www.primereact.org/radiobutton/",
                    "attributes": [
                        {
                            "name": "autoFocus",
                            "default": "false",
                            "description": "When present, it specifies that the component should automatically get focus on load.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "inputRef",
                            "default": "null",
                            "description": "Reference of the input element.",
                            "value": {
                                "kind": "expression",
                                "type": "Ref<HTMLInputElement>"
                            }
                        },
                        {
                            "name": "inputId",
                            "default": "null",
                            "description": "Unique identifier of the inner native radiobutton.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "name",
                            "default": "null",
                            "description": "Name of the checkbox element.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "value",
                            "default": "null",
                            "description": "Value of the radio.",
                            "value": {
                                "kind": "expression",
                                "type": "any"
                            }
                        },
                        {
                            "name": "checked",
                            "default": "false",
                            "description": "Specifies whether a checkbox should be checked or not.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "invalid",
                            "default": "false",
                            "description": "When present, it specifies that the component should have invalid state style.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "disabled",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "variant",
                            "default": "outlined",
                            "description": "Specifies the input variant of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "\"filled\" | \"outlined\""
                            }
                        },
                        {
                            "name": "readonly",
                            "default": "null",
                            "description": "When present, it specifies that an input field is read-only.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "required",
                            "default": "false",
                            "description": "When present, it specifies that an input field must be filled out before submitting the form.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "tooltip",
                            "default": "null",
                            "description": "Content of the tooltip.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "tooltipOptions",
                            "default": "null",
                            "description": "Configuration of the tooltip, refer to the tooltip documentation for more information.",
                            "value": {
                                "kind": "expression",
                                "type": "TooltipOptions"
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "RadioButtonPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": [
                        {
                            "name": "onChange",
                            "description": "Callback to invoke on value change",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "RadioButtonChangeEvent",
                                    "description": "Custom change event."
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "Rating",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Rating"
                    },
                    "description": "Rating component is a star based selection input.\n\n[Live Demo](https://www.primereact.org/rating/)",
                    "doc-url": "https://www.primereact.org/rating/",
                    "attributes": [
                        {
                            "name": "value",
                            "default": "null",
                            "description": "Value of the rating.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "disabled",
                            "default": "false",
                            "description": "When present, it specifies that the element should be disabled.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "readOnly",
                            "default": "false",
                            "description": "When present, it specifies that the input cannot be typed.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "stars",
                            "default": "5",
                            "description": "Number of stars.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "cancel",
                            "default": "true",
                            "description": "When specified a cancel icon is displayed to allow removing the value.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "tooltip",
                            "default": "null",
                            "description": "Content of the tooltip.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "tooltipOptions",
                            "default": "null",
                            "description": "Configuration of the tooltip, refer to the tooltip documentation for more information.",
                            "value": {
                                "kind": "expression",
                                "type": "TooltipOptions"
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "onIcon",
                            "default": "null",
                            "description": "Icon for the on state.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<RatingProps>"
                            }
                        },
                        {
                            "name": "offIcon",
                            "default": "null",
                            "description": "Icon for the off state.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<RatingProps>"
                            }
                        },
                        {
                            "name": "cancelIcon",
                            "default": "null",
                            "description": "Icon for the cancelable state.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<RatingProps>"
                            }
                        },
                        {
                            "name": "cancelIconProps",
                            "default": "null",
                            "description": "Properties of the cancel icon.",
                            "value": {
                                "kind": "expression",
                                "type": "HTMLAttributes<HTMLSpanElement>"
                            }
                        },
                        {
                            "name": "onIconProps",
                            "default": "null",
                            "description": "Properties of the on icon.",
                            "value": {
                                "kind": "expression",
                                "type": "HTMLAttributes<HTMLSpanElement>"
                            }
                        },
                        {
                            "name": "offIconProps",
                            "default": "null",
                            "description": "Properties of the off icon.",
                            "value": {
                                "kind": "expression",
                                "type": "HTMLAttributes<HTMLSpanElement>"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "RatingPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": [
                        {
                            "name": "onChange",
                            "description": "Callback to invoke on value change.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "RatingChangeEvent",
                                    "description": "Custom change event."
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "Ripple",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Ripple"
                    },
                    "description": "Ripple component adds ripple effect to the host element.\n\n[Live Demo](https://www.primereact.org/ripple)",
                    "doc-url": "https://www.primereact.org/ripple",
                    "attributes": [
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "RipplePassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        }
                    ],
                    "events": []
                },
                {
                    "name": "Row",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Row"
                    },
                    "description": "Row component is a helper component used to create grouping structures in DataTable.\n\n[Live Demo](https://www.primereact.org/datatable/)",
                    "doc-url": "https://www.primereact.org/datatable/",
                    "attributes": [
                        {
                            "name": "style",
                            "default": "null",
                            "description": "Inline style of the element.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSProperties"
                            }
                        },
                        {
                            "name": "className",
                            "default": "null",
                            "description": "Style class of the row.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "RowPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": []
                },
                {
                    "name": "Scrollpanel",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Scrollpanel"
                    },
                    "description": "ScrollPanel is a cross browser, lightweight and skinnable alternative to native browser scrollbar.\n\n[Live Demo](https://www.primereact.org/scrollpanel/)",
                    "doc-url": "https://www.primereact.org/scrollpanel/",
                    "attributes": [
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ScrollPanelPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": []
                },
                {
                    "name": "Scrolltop",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Scrolltop"
                    },
                    "description": "ScrollTop gets displayed after a certain scroll position and used to navigates to the top of the page quickly.\n\n[Live Demo](https://www.primereact.org/scrolltop/)",
                    "doc-url": "https://www.primereact.org/scrolltop/",
                    "attributes": [
                        {
                            "name": "target",
                            "default": "window",
                            "description": "Target of the ScrollTop, valid values are \"window\" and \"parent\".",
                            "value": {
                                "kind": "expression",
                                "type": "\"window\" | \"parent\""
                            }
                        },
                        {
                            "name": "threshold",
                            "default": "400",
                            "description": "Defines the threshold value of the vertical scroll position of the target to toggle the visibility.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "icon",
                            "default": "null",
                            "description": "Name of the icon or JSX.Element for icon.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<ScrollTopProps>"
                            }
                        },
                        {
                            "name": "behavior",
                            "default": "smooth",
                            "description": "Defines the scrolling behavior, \"smooth\" adds an animation and \"auto\" scrolls with a jump.",
                            "value": {
                                "kind": "expression",
                                "type": "\"auto\" | \"smooth\""
                            }
                        },
                        {
                            "name": "className",
                            "default": "null",
                            "description": "Style class of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "style",
                            "default": "null",
                            "description": "Inline style of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSProperties"
                            }
                        },
                        {
                            "name": "transitionOptions",
                            "default": "null",
                            "description": "The properties of CSSTransition can be customized, except for \"nodeRef\" and \"in\" properties.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSTransitionProps"
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ScrollTopPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": [
                        {
                            "name": "onShow",
                            "description": "Callback to invoke when overlay panel becomes visible.",
                            "arguments": []
                        },
                        {
                            "name": "onHide",
                            "description": "Callback to invoke when overlay becomes hidden.",
                            "arguments": []
                        }
                    ]
                },
                {
                    "name": "Selectbutton",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Selectbutton"
                    },
                    "description": "SelectButton is used to choose single or multiple items from a list using buttons.\n\n[Live Demo](https://www.primereact.org/selectbutton/)",
                    "doc-url": "https://www.primereact.org/selectbutton/",
                    "attributes": [
                        {
                            "name": "value",
                            "default": "null",
                            "description": "Value of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "any"
                            }
                        },
                        {
                            "name": "options",
                            "default": "null",
                            "description": "An array of objects to display as the available options.",
                            "value": {
                                "kind": "expression",
                                "type": "SelectItemOptionsType"
                            }
                        },
                        {
                            "name": "optionLabel",
                            "default": "null",
                            "description": "Name of the label field of an option when an arbitrary objects instead of SelectItems are used as options.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "optionValue",
                            "default": "null",
                            "description": "Name of the value field of an option when arbitrary objects are used as options instead of SelectItems.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "optionDisabled",
                            "default": "null",
                            "description": "Property name or getter function to use as the disabled flag of an option, defaults to false when not defined.",
                            "value": {
                                "kind": "expression",
                                "type": "string | Function"
                            }
                        },
                        {
                            "name": "tabIndex",
                            "default": "null",
                            "description": "Index of the element in tabbing order.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "multiple",
                            "default": "false",
                            "description": "When specified, allows selecting multiple values.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "invalid",
                            "default": "false",
                            "description": "When present, it specifies that the component should have invalid state style.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "unselectable",
                            "default": "true",
                            "description": "Whether selection can be cleared.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "allowEmpty",
                            "default": "true",
                            "description": "Whether selection can not be cleared.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "disabled",
                            "default": "false",
                            "description": "When present, it specifies that the element should be disabled.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "dataKey",
                            "default": "null",
                            "description": "A property to uniquely match the value in options for better performance.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "tooltip",
                            "default": "null",
                            "description": "Content of the tooltip.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "tooltipOptions",
                            "default": "null",
                            "description": "Configuration of the tooltip, refer to the tooltip documentation for more information.",
                            "value": {
                                "kind": "expression",
                                "type": "TooltipOptions"
                            }
                        },
                        {
                            "name": "ariaLabelledBy",
                            "default": "null",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "SelectButtonPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": [
                        {
                            "name": "itemTemplate",
                            "description": "Function that gets the option and returns the content.",
                            "arguments": [
                                {
                                    "name": "item",
                                    "type": "any",
                                    "description": "Current item"
                                }
                            ]
                        },
                        {
                            "name": "onChange",
                            "description": "Callback to invoke on value change.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "SelectButtonChangeEvent",
                                    "description": "Custom change event."
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "Selectitem",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Selectitem"
                    },
                    "description": "This module contains the interface and types for options in a select component.",
                    "doc-url": ""
                },
                {
                    "name": "Sidebar",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Sidebar"
                    },
                    "description": "Sidebar is a panel component displayed as an overlay.\n\n[Live Demo](https://www.primereact.org/sidebar/)",
                    "doc-url": "https://www.primereact.org/sidebar/",
                    "attributes": [
                        {
                            "name": "maskStyle",
                            "default": "null",
                            "description": "Inline style of the mask.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSProperties"
                            }
                        },
                        {
                            "name": "maskClassName",
                            "default": "null",
                            "description": "Style class of the mask.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "visible",
                            "default": "false",
                            "description": "Specifies the visibility of the dialog.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "position",
                            "default": "left",
                            "description": "Specifies the position of the sidebar, valid values are \"left\" and \"right\".",
                            "value": {
                                "kind": "expression",
                                "type": "\"left\" | \"top\" | \"bottom\" | \"right\""
                            }
                        },
                        {
                            "name": "fullScreen",
                            "default": "false",
                            "description": "Adds a close icon to the header to hide the dialog.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "blockScroll",
                            "default": "false",
                            "description": "Whether to block scrolling of the document when sidebar is active.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "baseZIndex",
                            "default": "0",
                            "description": "Base zIndex value to use in layering.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "dismissable",
                            "default": "true",
                            "description": "Whether to dismiss sidebar on click of the mask.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "showCloseIcon",
                            "default": "true",
                            "description": "Whether to display a close icon inside the panel.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "closeIcon",
                            "default": "null",
                            "description": "Icon of the close button.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<SidebarProps>"
                            }
                        },
                        {
                            "name": "ariaCloseLabel",
                            "default": "close",
                            "description": "Aria label of the close icon.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "closeOnEscape",
                            "default": "true",
                            "description": "Specifies if pressing escape key should hide the sidebar.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "header",
                            "default": "true",
                            "description": "Custom template for the header.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "icons",
                            "default": "true",
                            "description": "Custom icons template for the header.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "modal",
                            "default": "true",
                            "description": "Whether to a modal layer behind the sidebar.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "appendTo",
                            "default": "document.body",
                            "description": "DOM element instance where the overlay panel should be mounted. Valid values are any DOM Element and self. The self value is used to render a component where it is located.",
                            "value": {
                                "kind": "expression",
                                "type": "null | HTMLElement | \"self\" | Function"
                            }
                        },
                        {
                            "name": "transitionOptions",
                            "default": "null",
                            "description": "The properties of CSSTransition can be customized, except for \"nodeRef\" and \"in\" properties.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSTransitionProps"
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "SidebarPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "content",
                            "default": "null",
                            "description": "Specifies a custom content for the sidebar. For more complex markup, use the \"content\" slot instead.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        }
                    ],
                    "events": [
                        {
                            "name": "onShow",
                            "description": "Callback to invoke when sidebar gets shown.",
                            "arguments": []
                        },
                        {
                            "name": "onHide",
                            "description": "Callback to invoke when the actions used to close the sidebar are triggered. Exp; close icon, mask and esc key.",
                            "arguments": []
                        }
                    ]
                },
                {
                    "name": "Skeleton",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Skeleton"
                    },
                    "description": "Skeleton is a placeholder to display instead of the actual content.\n\n[Live Demo](https://www.primereact.org/skeleton/)",
                    "doc-url": "https://www.primereact.org/skeleton/",
                    "attributes": [
                        {
                            "name": "shape",
                            "default": "rectangle",
                            "description": "It specifies an alternate text for an image, if the image cannot be displayed.",
                            "value": {
                                "kind": "expression",
                                "type": "\"circle\" | \"rectangle\""
                            }
                        },
                        {
                            "name": "size",
                            "default": "null",
                            "description": "Size of the Circle or Square.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "width",
                            "default": "100%",
                            "description": "Width of the element.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "height",
                            "default": "1rem",
                            "description": "Height of the element.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "borderRadius",
                            "default": "null",
                            "description": "Border radius of the element, defaults to value from theme.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "animation",
                            "default": "wave",
                            "description": "Type of the animation, valid options are \"wave\" and \"none\".",
                            "value": {
                                "kind": "expression",
                                "type": "\"none\" | \"wave\""
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "SkeletonPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": []
                },
                {
                    "name": "Slidemenu",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Slidemenu"
                    },
                    "description": "SlideMenu displays submenus with a slide animation.\n\n[Live Demo](https://www.primereact.org/slidemenu/)",
                    "doc-url": "https://www.primereact.org/slidemenu/",
                    "attributes": [
                        {
                            "name": "appendTo",
                            "default": "document.body",
                            "description": "DOM element instance where the overlay panel should be mounted. Valid values are any DOM Element and 'self'. The self value is used to render a component where it is located.",
                            "value": {
                                "kind": "expression",
                                "type": "null | HTMLElement | \"self\" | Function"
                            }
                        },
                        {
                            "name": "autoZIndex",
                            "default": "true",
                            "description": "Whether to automatically manage layering.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "backIcon",
                            "default": "null",
                            "description": "Defines the backward icon.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<SlideMenuProps>"
                            }
                        },
                        {
                            "name": "backLabel",
                            "default": "Back",
                            "description": "Label of element to navigate back.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "baseZIndex",
                            "default": "0",
                            "description": "Base zIndex value to use in layering.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "easing",
                            "default": "ease-out",
                            "description": "Easing animation to use for sliding.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "effectDuration",
                            "default": "250",
                            "description": "Duration of the sliding animation in milliseconds.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "menuWidth",
                            "default": "190",
                            "description": "Width of the submenus.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "model",
                            "default": "null",
                            "description": "An array of menuitems.",
                            "value": {
                                "kind": "expression",
                                "type": "MenuItem[]"
                            }
                        },
                        {
                            "name": "popup",
                            "default": "false",
                            "description": "Defines if menu would displayed as a popup.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "SlideMenuPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "submenuIcon",
                            "default": "null",
                            "description": "Icon of the submenu.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<SlideMenuProps>"
                            }
                        },
                        {
                            "name": "transitionOptions",
                            "default": "null",
                            "description": "The properties of CSSTransition can be customized, except for \"nodeRef\" and \"in\" properties.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSTransitionProps"
                            }
                        },
                        {
                            "name": "viewportHeight",
                            "default": "175",
                            "description": "Height of the scrollable area, a scrollbar appears if a menu height is longer than this value.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "closeOnEscape",
                            "default": "true",
                            "description": "Specifies if pressing escape key should hide the SlideMenu Popup.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": [
                        {
                            "name": "onShow",
                            "description": "Callback to invoke when a popup menu is shown.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "SyntheticEvent<Element, Event>",
                                    "description": "Browser event."
                                }
                            ]
                        },
                        {
                            "name": "onHide",
                            "description": "Callback to invoke when a popup menu is hidden.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "SyntheticEvent<Element, Event>",
                                    "description": "Browser event."
                                }
                            ]
                        },
                        {
                            "name": "onNavigate",
                            "description": "Callback to invoke when a menu is navigated to.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "SlideMenuNavigateEvent",
                                    "description": "Navigate event."
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "Slider",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Slider"
                    },
                    "description": "Slider is a component to provide input with a drag handle.\n\n[Live Demo](https://www.primereact.org/slider/)",
                    "doc-url": "https://www.primereact.org/slider/",
                    "attributes": [
                        {
                            "name": "value",
                            "default": "0",
                            "description": "Value of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "number | [number, number]"
                            }
                        },
                        {
                            "name": "min",
                            "default": "0",
                            "description": "Mininum boundary value.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "max",
                            "default": "100",
                            "description": "Maximum boundary value.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "orientation",
                            "default": "horizontal",
                            "description": "Orientation of the slider, valid values are horizontal and vertical.",
                            "value": {
                                "kind": "expression",
                                "type": "\"horizontal\" | \"vertical\""
                            }
                        },
                        {
                            "name": "step",
                            "default": "1",
                            "description": "Step factor to increment/decrement the value.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "range",
                            "default": "false",
                            "description": "When speficed, allows two boundary values to be picked.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "disabled",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "ariaLabelledBy",
                            "default": "null",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "SliderPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": [
                        {
                            "name": "onChange",
                            "description": "Callback to invoke on value change via slide.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "SliderChangeEvent",
                                    "description": "Custom change event"
                                }
                            ]
                        },
                        {
                            "name": "onSlideEnd",
                            "description": "Callback to invoke when slide ends.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "SliderSlideEndEvent",
                                    "description": "Custom slide event"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "Speeddial",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Speeddial"
                    },
                    "description": "When pressed, a floating action button can display multiple primary actions that can be performed on a page.\n\n[Live Demo](https://www.primereact.org/speeddial/)",
                    "doc-url": "https://www.primereact.org/speeddial/",
                    "attributes": [
                        {
                            "name": "model",
                            "default": "null",
                            "description": "MenuModel instance to define the action items.",
                            "value": {
                                "kind": "expression",
                                "type": "MenuItem[]"
                            }
                        },
                        {
                            "name": "visible",
                            "default": "false",
                            "description": "Specifies the visibility of the overlay.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "direction",
                            "default": "up",
                            "description": "Specifies the opening direction of actions. Valid values are 'up', 'down', 'left', 'right', 'up-left', 'up-right', 'down-left' and 'down-right'",
                            "value": {
                                "kind": "expression",
                                "type": "\"left\" | \"right\" | \"up\" | \"down\" | \"up-left\" | \"up-right\" | \"down-left\" | \"down-right\""
                            }
                        },
                        {
                            "name": "transitionDelay",
                            "default": "30",
                            "description": "Transition delay step for each action item.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "type",
                            "default": "linear",
                            "description": "Specifies the opening type of actions.",
                            "value": {
                                "kind": "expression",
                                "type": "\"linear\" | \"circle\" | \"semi-circle\" | \"quarter-circle\""
                            }
                        },
                        {
                            "name": "radius",
                            "default": "0",
                            "description": "Radius for *circle types.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "mask",
                            "default": "false",
                            "description": "Whether to show a mask element behind the speeddial.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "disabled",
                            "default": "false",
                            "description": "Whether the component is disabled.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "hideOnClickOutside",
                            "default": "true",
                            "description": "Whether the actions close when clicked outside.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "buttonStyle",
                            "default": "null",
                            "description": "Inline style of the button element.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSProperties"
                            }
                        },
                        {
                            "name": "buttonClassName",
                            "default": "null",
                            "description": "Style class of the button element.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "buttonTemplate",
                            "default": "null",
                            "description": "Template of button element.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "maskStyle",
                            "default": "null",
                            "description": "Inline style of the mask element.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSProperties"
                            }
                        },
                        {
                            "name": "maskClassName",
                            "default": "null",
                            "description": "Style class of the mask element.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "showIcon",
                            "default": "null",
                            "description": "Show icon of the button element.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<SpeedDialProps>"
                            }
                        },
                        {
                            "name": "hideIcon",
                            "default": "null",
                            "description": "Hide icon of the button element.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<SpeedDialProps>"
                            }
                        },
                        {
                            "name": "rotateAnimation",
                            "default": "true",
                            "description": "Defined to rotate showIcon when hideIcon is not present.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "SpeedDialPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": [
                        {
                            "name": "onVisibleChange",
                            "description": "Fired when the visibility of element changed.",
                            "arguments": [
                                {
                                    "name": "visible",
                                    "type": "boolean",
                                    "description": "Custom visible change event"
                                }
                            ]
                        },
                        {
                            "name": "onClick",
                            "description": "Fired when the button element clicked.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "MouseEvent<HTMLElement, MouseEvent>",
                                    "description": "Browser event."
                                }
                            ]
                        },
                        {
                            "name": "onShow",
                            "description": "Fired when the actions are visible.",
                            "arguments": []
                        },
                        {
                            "name": "onHide",
                            "description": "Fired when the actions are hidden.",
                            "arguments": []
                        }
                    ]
                },
                {
                    "name": "Splitbutton",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Splitbutton"
                    },
                    "description": "SplitButton groups a set of commands in an overlay with a default command.\n\n[Live Demo](https://www.primereact.org/splitbutton/)",
                    "doc-url": "https://www.primereact.org/splitbutton/",
                    "attributes": [
                        {
                            "name": "label",
                            "default": "null",
                            "description": "Text of the button.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "icon",
                            "default": "null",
                            "description": "Name of the icon.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<SplitButtonProps>"
                            }
                        },
                        {
                            "name": "text",
                            "default": "false",
                            "description": "Add a textual class to the button without a background initially.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "rounded",
                            "default": "false",
                            "description": "Add a circular border radius to the button.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "raised",
                            "default": "false",
                            "description": "Add a shadow to indicate elevation.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "outlined",
                            "default": "false",
                            "description": "Add a border class without a background initially.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "severity",
                            "default": "null",
                            "description": "Defines the style of the button, valid values are \"secondary\", \"success\", \"info\", \"warning\", \"danger\", \"contrast\".",
                            "value": {
                                "kind": "expression",
                                "type": "\"success\" | \"warning\" | \"secondary\" | \"info\" | \"danger\" | \"contrast\""
                            }
                        },
                        {
                            "name": "size",
                            "default": "null",
                            "description": "Defines the size of the button, valid values are \"small\" and \"large\".",
                            "value": {
                                "kind": "expression",
                                "type": "\"small\" | \"large\""
                            }
                        },
                        {
                            "name": "loading",
                            "default": "false",
                            "description": "Display loading icon of the button",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "loadingIcon",
                            "default": "null",
                            "description": "Name of the loading icon or JSX.Element for loading icon.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<SplitButtonProps>"
                            }
                        },
                        {
                            "name": "model",
                            "default": "null",
                            "description": "MenuModel instance to define the overlay items.",
                            "value": {
                                "kind": "expression",
                                "type": "MenuItem[]"
                            }
                        },
                        {
                            "name": "disabled",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "visible",
                            "default": "true",
                            "description": "When present, it specifies that the element should be visible.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "buttonClassName",
                            "default": "null",
                            "description": "ClassName of the button.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "menuStyle",
                            "default": "null",
                            "description": "Inline style of the overlay menu.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSProperties"
                            }
                        },
                        {
                            "name": "menuClassName",
                            "default": "null",
                            "description": "ClassName class of the overlay menu.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "menuButtonClassName",
                            "default": "null",
                            "description": "ClassName of the menu dropdown button.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "buttonProps",
                            "default": "null",
                            "description": "Props for the main button, any prop is passed implicity to the button element.",
                            "value": {
                                "kind": "expression",
                                "type": "any"
                            }
                        },
                        {
                            "name": "menuButtonProps",
                            "default": "null",
                            "description": "Props for the dropdown button, any prop is passed implicity to the dropdown button element.",
                            "value": {
                                "kind": "expression",
                                "type": "any"
                            }
                        },
                        {
                            "name": "appendTo",
                            "default": "document.body",
                            "description": "DOM element instance where the overlay panel should be mounted. Valid values are any DOM Element and 'self'. The self value is used to render a component where it is located.",
                            "value": {
                                "kind": "expression",
                                "type": "null | HTMLElement | \"self\" | Function"
                            }
                        },
                        {
                            "name": "tooltip",
                            "default": "null",
                            "description": "Content of the tooltip.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "tooltipOptions",
                            "default": "null",
                            "description": "Configuration of the tooltip, refer to the tooltip documentation for more information.",
                            "value": {
                                "kind": "expression",
                                "type": "TooltipOptions"
                            }
                        },
                        {
                            "name": "buttonTemplate",
                            "default": "null",
                            "description": "Template of the default button.",
                            "value": {
                                "kind": "expression",
                                "type": "TemplateType<SplitButtonProps>"
                            }
                        },
                        {
                            "name": "transitionOptions",
                            "default": "null",
                            "description": "The properties of CSSTransition can be customized, except for \"nodeRef\" and \"in\" properties.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSTransitionProps"
                            }
                        },
                        {
                            "name": "dropdownIcon",
                            "default": "null",
                            "description": "Name of the dropdown icon or JSX.Element for dropdown icon.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<SplitButtonProps>"
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "SplitButtonPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": [
                        {
                            "name": "onClick",
                            "description": "Callback to invoke when main button is clicked.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "MouseEvent<HTMLElement, MouseEvent>",
                                    "description": "Browser event"
                                }
                            ]
                        },
                        {
                            "name": "onShow",
                            "description": "Callback to invoke when overlay panel becomes visible.",
                            "arguments": []
                        },
                        {
                            "name": "onHide",
                            "description": "Callback to invoke when overlay panel becomes hidden.",
                            "arguments": []
                        }
                    ]
                },
                {
                    "name": "Splitter",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Splitter"
                    },
                    "description": "Splitter is utilized to separate and resize panels.\n\n[Live Demo](https://www.primereact.org/splitter/)\n\nHelper Components:\n\n-  SplitterPanel",
                    "doc-url": "https://www.primereact.org/splitter/",
                    "attributes": [
                        {
                            "name": "layout",
                            "default": "horizontal",
                            "description": "Orientation of the panels, valid values are \"horizontal\" and \"vertical\".",
                            "value": {
                                "kind": "expression",
                                "type": "\"horizontal\" | \"vertical\""
                            }
                        },
                        {
                            "name": "gutterSize",
                            "default": "4",
                            "description": "Size of the divider in pixels.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "stateKey",
                            "default": "null",
                            "description": "Storage identifier of a stateful Splitter.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "stateStorage",
                            "default": "session",
                            "description": "Defines where a stateful splitter keeps its state, valid values are \"session\" for sessionStorage and \"local\" for localStorage.",
                            "value": {
                                "kind": "expression",
                                "type": "\"local\" | \"session\""
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "step",
                            "default": "5",
                            "description": "Step factor to increment/decrement the size of the panels while pressing the arrow keys.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "SplitterPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": [
                        {
                            "name": "onResizeEnd",
                            "description": "Callback to invoke when resize ends.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "SplitterResizeEndEvent",
                                    "description": "Custom resize end event."
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "Stepper",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Stepper"
                    },
                    "description": "Stepper is a component that streamlines a wizard-like workflow, organizing content into coherent steps and visually guiding users through a numbered progression in a multi-step process.\n\n[Live Demo](https://www.primereact.org/stepper/)",
                    "doc-url": "https://www.primereact.org/stepper/",
                    "attributes": [
                        {
                            "name": "activeStep",
                            "default": "0",
                            "description": "Active step index of stepper.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "orientation",
                            "default": "horizontal",
                            "description": "Orientation of the stepper.",
                            "value": {
                                "kind": "expression",
                                "type": "\"horizontal\" | \"vertical\""
                            }
                        },
                        {
                            "name": "linear",
                            "default": "false",
                            "description": "Whether the steps are clickable or not.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "StepperPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": [
                        {
                            "name": "onChangeStep",
                            "description": "Callback to invoke when an active panel is changed.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "StepperChangeEvent"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "Stepperpanel",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Stepperpanel"
                    },
                    "description": "StepperPanel is a helper component for Stepper component.\n\n[Live Demo](https://www.primereact.org/stepper/)",
                    "doc-url": "https://www.primereact.org/stepper/",
                    "attributes": [
                        {
                            "name": "header",
                            "default": "null",
                            "description": "Orientation of tab headers.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Used to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "StepperPanelPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        }
                    ],
                    "events": []
                },
                {
                    "name": "Steps",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Steps"
                    },
                    "description": "Steps also known as Stepper, is an indicator for the steps in a workflow. Layout of steps component is optimized for responsive design.\n\n[Live Demo](https://www.primereact.org/steps/)",
                    "doc-url": "https://www.primereact.org/steps/",
                    "attributes": [
                        {
                            "name": "model",
                            "default": "null",
                            "description": "An array of menuitems.",
                            "value": {
                                "kind": "expression",
                                "type": "undefined | MenuItem[]"
                            }
                        },
                        {
                            "name": "activeIndex",
                            "default": "0",
                            "description": "Index of the active item.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "readOnly",
                            "default": "true",
                            "description": "Whether the items are clickable or not.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "StepsPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": [
                        {
                            "name": "onSelect",
                            "description": "Callback to invoke when the new step is selected.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "StepsSelectEvent",
                                    "description": "Custom select event"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "Styleclass",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Styleclass"
                    },
                    "description": "StyleClass manages css classes declaratively to during enter/leave animations or just to toggle classes on an element.\n\n[Live Demo](https://www.primereact.org/styleclass)",
                    "doc-url": "https://www.primereact.org/styleclass",
                    "attributes": [
                        {
                            "name": "nodeRef",
                            "default": "null",
                            "description": "A React reference to DOM element that need to specify. Required.",
                            "value": {
                                "kind": "expression",
                                "type": "MutableRefObject<ReactNode>"
                            }
                        },
                        {
                            "name": "selector",
                            "default": "null",
                            "description": "Selector to define the target element.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "enterClassName",
                            "default": "null",
                            "description": "Style class to add when item begins to get displayed.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "enterFromClassName",
                            "default": "null",
                            "description": "Style class to add when item begins to get displayed.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "enterActiveClassName",
                            "default": "null",
                            "description": "Style class to add during enter animation.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "enterToClassName",
                            "default": "null",
                            "description": "Style class to add when item begins to get displayed.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "leaveClassName",
                            "default": "null",
                            "description": "Style class to add when item begins to get hidden.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "leaveFromClassName",
                            "default": "null",
                            "description": "Style class to add when item begins to get hidden.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "leaveActiveClassName",
                            "default": "null",
                            "description": "Style class to add during leave animation.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "leaveToClassName",
                            "default": "null",
                            "description": "Style class to add when leave animation is completed.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "hideOnOutsideClick",
                            "default": "false",
                            "description": "Whether to trigger leave animation when outside of the element is clicked.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "toggleClassName",
                            "default": "null",
                            "description": "Adds or removes a class when no enter-leave animation is required.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        }
                    ],
                    "events": []
                },
                {
                    "name": "Tabmenu",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Tabmenu"
                    },
                    "description": "TabMenu is a navigation/command component that displays items as tab headers.\n\n[Live Demo](https://www.primereact.org/tabmenu/)",
                    "doc-url": "https://www.primereact.org/tabmenu/",
                    "attributes": [
                        {
                            "name": "model",
                            "default": "null",
                            "description": "An array of menuitems.",
                            "value": {
                                "kind": "expression",
                                "type": "MenuItem[]"
                            }
                        },
                        {
                            "name": "activeIndex",
                            "default": "0",
                            "description": "Active index of menuitem.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "TabMenuPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": [
                        {
                            "name": "onTabChange",
                            "description": "Callback to invoke when active tab changes.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "TabMenuTabChangeEvent",
                                    "description": "Custom tab change event."
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "Tabview",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Tabview"
                    },
                    "description": "TabView is a container component to group content with tabs.\n\n[Live Demo](https://www.primereact.org/tabview/)\n\nHelper Components:\n\n-  TabPanel",
                    "doc-url": "https://www.primereact.org/tabview/",
                    "attributes": [
                        {
                            "name": "activeIndex",
                            "default": "0",
                            "description": "Active index of the TabView.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "panelContainerClassName",
                            "default": "null",
                            "description": "Style class of the panels container of the tabview.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "panelContainerStyle",
                            "default": "null",
                            "description": "Inline style of the panels container of the tabview.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSProperties"
                            }
                        },
                        {
                            "name": "renderActiveOnly",
                            "default": "true",
                            "description": "Whether to render the contents of the selected tab or all tabs.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "scrollable",
                            "default": "false",
                            "description": "When enabled displays buttons at each side of the tab headers to scroll the tab list.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "TabViewPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": [
                        {
                            "name": "onBeforeTabChange",
                            "description": "Callback to invoke before an active tab is changed. Return false to prevent tab from changing.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "TabViewTabChangeEvent",
                                    "description": "Custom tab change event."
                                }
                            ]
                        },
                        {
                            "name": "onBeforeTabClose",
                            "description": "Callback to invoke before an active tab is close. Return false to prevent tab from closing.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "TabViewTabCloseEvent",
                                    "description": "Custom tab close event."
                                }
                            ]
                        },
                        {
                            "name": "onTabChange",
                            "description": "Callback to invoke when an active tab is changed.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "TabViewTabChangeEvent",
                                    "description": "Custom tab change event."
                                }
                            ]
                        },
                        {
                            "name": "onTabClose",
                            "description": "Callback to invoke when an active tab is closed.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "TabViewTabCloseEvent",
                                    "description": "Custom tab close event."
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "Tag",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Tag"
                    },
                    "description": "Tag component is used to categorize content.\n\n[Live Demo](https://www.primereact.org/tag)",
                    "doc-url": "https://www.primereact.org/tag",
                    "attributes": [
                        {
                            "name": "value",
                            "default": "null",
                            "description": "Value to display inside the tag.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "severity",
                            "default": "null",
                            "description": "Severity type of the tag.",
                            "value": {
                                "kind": "expression",
                                "type": "null | \"success\" | \"warning\" | \"info\" | \"danger\""
                            }
                        },
                        {
                            "name": "rounded",
                            "default": "false",
                            "description": "Whether the corners of the tag are rounded.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "icon",
                            "default": "null",
                            "description": "Icon of the tag to display next to the value.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<TagProps>"
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "TagPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": []
                },
                {
                    "name": "Terminal",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Terminal"
                    },
                    "description": "Terminal is a text based user interface.\n\n[Live Demo](https://www.primereact.org/terminal)",
                    "doc-url": "https://www.primereact.org/terminal",
                    "attributes": [
                        {
                            "name": "welcomeMessage",
                            "default": "null",
                            "description": "Initial text to display on terminal.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "prompt",
                            "default": "null",
                            "description": "Prompt text for each command.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "TerminalPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": []
                },
                {
                    "name": "Terminalservice",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Terminalservice"
                    },
                    "description": "Terminal is a text based user interface.\n\n[Live Demo](https://www.primereact.org/terminal/)",
                    "doc-url": "https://www.primereact.org/terminal/",
                    "attributes": [],
                    "events": []
                },
                {
                    "name": "Tieredmenu",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Tieredmenu"
                    },
                    "description": "TieredMenu is an input component that provides real-time suggestions when being typed.\n\n[Live Demo](https://www.primereact.org/tieredmenu/)",
                    "doc-url": "https://www.primereact.org/tieredmenu/",
                    "attributes": [
                        {
                            "name": "model",
                            "default": "null",
                            "description": "An array of menuitems.",
                            "value": {
                                "kind": "expression",
                                "type": "MenuItem[]"
                            }
                        },
                        {
                            "name": "popup",
                            "default": "false",
                            "description": "Defines if menu would displayed as a popup.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "autoZIndex",
                            "default": "true",
                            "description": "Whether to automatically manage layering.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "breakpoint",
                            "default": "null",
                            "description": "The breakpoint to define the maximum width boundary when responsiveness is enabled.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "scrollHeight",
                            "default": "400px",
                            "description": "Maximum height of the options panel on responsive mode.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "baseZIndex",
                            "default": "0",
                            "description": "Whether to automatically manage layering.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "appendTo",
                            "default": "document.body",
                            "description": "DOM element instance where the overlay panel should be mounted. Valid values are any DOM Element and 'self'. The self value is used to render a component where it is located.",
                            "value": {
                                "kind": "expression",
                                "type": "null | HTMLElement | \"self\" | Function"
                            }
                        },
                        {
                            "name": "transitionOptions",
                            "default": "null",
                            "description": "The properties of CSSTransition can be customized, except for \"nodeRef\" and \"in\" properties.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSTransitionProps"
                            }
                        },
                        {
                            "name": "submenuIcon",
                            "default": "null",
                            "description": "Icon of the submenu.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<TieredMenuProps>"
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "TieredMenuPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": [
                        {
                            "name": "onShow",
                            "description": "Callback to invoke when a popup menu is shown.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "SyntheticEvent<Element, Event>",
                                    "description": "Browser event."
                                }
                            ]
                        },
                        {
                            "name": "onHide",
                            "description": "Callback to invoke when a popup menu is hidden.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "SyntheticEvent<Element, Event>",
                                    "description": "Browser event."
                                }
                            ]
                        },
                        {
                            "name": "onFocus",
                            "description": "Callback to invoke when menu receives focus.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "SyntheticEvent<Element, Event>",
                                    "description": "Browser event."
                                }
                            ]
                        },
                        {
                            "name": "onBlur",
                            "description": "Callback to invoke when menu loses focus.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "SyntheticEvent<Element, Event>",
                                    "description": "Browser event."
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "Timeline",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Timeline"
                    },
                    "description": "Timeline visualizes a series of chained events.\n\n[Live Demo](https://www.primereact.org/timeline/)",
                    "doc-url": "https://www.primereact.org/timeline/",
                    "attributes": [
                        {
                            "name": "align",
                            "default": "left",
                            "description": "Position of the timeline bar relative to the content. Valid values are \"left\", \"right for vertical layout and \"top\", \"bottom\" for horizontal layout.",
                            "value": {
                                "kind": "expression",
                                "type": "\"alternate\" | \"left\" | \"top\" | \"bottom\" | \"right\""
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "content",
                            "default": "null",
                            "description": "Template of the content.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "dataKey",
                            "default": "null",
                            "description": "Name of the field that uniquely identifies a record in the data. Should be a unique business key to prevent re-rendering.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "layout",
                            "default": "vertical",
                            "description": "Orientation of the timeline, valid values are \"vertical\" and \"horizontal\".",
                            "value": {
                                "kind": "expression",
                                "type": "\"horizontal\" | \"vertical\""
                            }
                        },
                        {
                            "name": "marker",
                            "default": "null",
                            "description": "Template content allows placing a custom event marker instead of the default one.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "opposite",
                            "default": "null",
                            "description": "Template content to be placed at the other side of the bar.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "value",
                            "default": "null",
                            "description": "An array of events to display.",
                            "value": {
                                "kind": "expression",
                                "type": "any[]"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "TimelinePassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": []
                },
                {
                    "name": "Toast",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Toast"
                    },
                    "description": "Toast is used to display messages in an overlay.\n\n[Live Demo](https://www.primereact.org/toast/)",
                    "doc-url": "https://www.primereact.org/toast/",
                    "attributes": [
                        {
                            "name": "baseZIndex",
                            "default": "0",
                            "description": "Base zIndex value to add to initial layering of PrimeReact components which start from 1000.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "position",
                            "default": "top-right",
                            "description": "Position of the toast in viewport, valid values are 'center', 'top-center', 'top-left', 'top-right', 'bottom-center', 'bottom-left', 'bottom-right'.",
                            "value": {
                                "kind": "expression",
                                "type": "\"center\" | \"bottom-right\" | \"bottom-left\" | \"top-right\" | \"top-left\" | \"top-center\" | \"bottom-center\""
                            }
                        },
                        {
                            "name": "transitionOptions",
                            "default": "null",
                            "description": "The properties of CSSTransition can be customized, except for \"nodeRef\" and \"in\" properties.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSTransitionProps"
                            }
                        },
                        {
                            "name": "appendTo",
                            "default": "self",
                            "description": "DOM element instance where the component should be mounted. Valid values are any DOM Element and 'self'. The self value is used to render a component where it is located.",
                            "value": {
                                "kind": "expression",
                                "type": "null | HTMLElement | \"self\" | Function"
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ToastPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "content",
                            "default": "null",
                            "description": "Specifies a custom content for the toast. For more complex markup, use the \"content\" slot instead.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        }
                    ],
                    "events": [
                        {
                            "name": "onClick",
                            "description": "Callback to invoke when an active tab is collapsed by clicking on the header.",
                            "arguments": [
                                {
                                    "name": "message",
                                    "type": "ToastMessage",
                                    "description": "Clicked message"
                                }
                            ]
                        },
                        {
                            "name": "onRemove",
                            "description": "Callback to invoke when a message is removed.",
                            "arguments": [
                                {
                                    "name": "message",
                                    "type": "ToastMessage",
                                    "description": "Removed message"
                                }
                            ]
                        },
                        {
                            "name": "onShow",
                            "description": "Callback to invoke when message becomes visible.",
                            "arguments": []
                        },
                        {
                            "name": "onHide",
                            "description": "Callback to invoke when message becomes hidden.",
                            "arguments": []
                        }
                    ]
                },
                {
                    "name": "Togglebutton",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Togglebutton"
                    },
                    "description": "ToggleButton is used to select a boolean value using a button.\n\n[Live Demo](https://www.primereact.org/togglebutton/)",
                    "doc-url": "https://www.primereact.org/togglebutton/",
                    "attributes": [
                        {
                            "name": "checked",
                            "default": "false",
                            "description": "Specifies the on/off state of the button.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "iconPos",
                            "default": "left",
                            "description": "Position of the icon, valid values are \"left\" and \"right\".",
                            "value": {
                                "kind": "expression",
                                "type": "\"left\" | \"right\""
                            }
                        },
                        {
                            "name": "invalid",
                            "default": "false",
                            "description": "When present, it specifies that the component should have invalid state style.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "disabled",
                            "default": "false",
                            "description": "When present, it specifies that the element should be disabled.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "readonly",
                            "default": "null",
                            "description": "When present, it specifies that an input field is read-only.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "offIcon",
                            "default": "null",
                            "description": "Icon for the off state.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<ToggleButtonProps>"
                            }
                        },
                        {
                            "name": "offLabel",
                            "default": "no",
                            "description": "Label for the off state.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "onIcon",
                            "default": "null",
                            "description": "Icon for the on state.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<ToggleButtonProps>"
                            }
                        },
                        {
                            "name": "onLabel",
                            "default": "yes",
                            "description": "Label for the on state.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "tooltip",
                            "default": "null",
                            "description": "Content of the tooltip.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "tooltipOptions",
                            "default": "null",
                            "description": "Configuration of the tooltip, refer to the tooltip documentation for more information.",
                            "value": {
                                "kind": "expression",
                                "type": "TooltipOptions"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ToggleButtonPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": [
                        {
                            "name": "onBlur",
                            "description": "Callback to invoke when autocomplete loses focus.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "FocusEvent<HTMLElement, Element>",
                                    "description": "Browser event."
                                }
                            ]
                        },
                        {
                            "name": "onChange",
                            "description": "Callback to invoke on value change.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "ToggleButtonChangeEvent",
                                    "description": "Browser event."
                                }
                            ]
                        },
                        {
                            "name": "onFocus",
                            "description": "Callback to invoke when autocomplete gets focus.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "FocusEvent<HTMLElement, Element>",
                                    "description": "Browser event."
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "Toolbar",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Toolbar"
                    },
                    "description": "Toolbar is a grouping component for buttons and other content.\n\n[Live Demo](https://www.primereact.org/toolbar/)",
                    "doc-url": "https://www.primereact.org/toolbar/",
                    "attributes": [
                        {
                            "name": "left",
                            "default": "null",
                            "description": "The template of left section.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "right",
                            "default": "null",
                            "description": "The template of right section.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "start",
                            "default": "null",
                            "description": "The template of start section.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "center",
                            "default": "null",
                            "description": "The template of center section.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "end",
                            "default": "null",
                            "description": "The template of end section.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ToolbarPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": []
                },
                {
                    "name": "Tooltip",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Tooltip"
                    },
                    "description": "Tooltip functionality is integrated within various PrimeReact components.\n\n[Live Demo](https://www.primereact.org/tooltip/)",
                    "doc-url": "https://www.primereact.org/tooltip/",
                    "attributes": [
                        {
                            "name": "id",
                            "default": "null",
                            "description": "Unique identifier of the element.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "target",
                            "default": "null",
                            "description": "Target element on global tooltip option.",
                            "value": {
                                "kind": "expression",
                                "type": "string | string[] | HTMLElement | RefObject<HTMLElement>"
                            }
                        },
                        {
                            "name": "content",
                            "default": "null",
                            "description": "Content to be displayed in tooltip.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "TooltipPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "appendTo",
                            "default": "document.body",
                            "description": "DOM element instance where the overlay panel should be mounted. Valid values are any DOM Element and 'self'. The self value is used to render a component where it is located.",
                            "value": {
                                "kind": "expression",
                                "type": "null | HTMLElement | \"self\" | Function"
                            }
                        },
                        {
                            "name": "at",
                            "default": "null",
                            "description": "Defines which position on the target element to align the positioned tooltip.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "autoHide",
                            "default": "true",
                            "description": "Whether to hide tooltip when hovering over tooltip content.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "autoZIndex",
                            "default": "true",
                            "description": "Whether to automatically manage layering.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "baseZIndex",
                            "default": "0",
                            "description": "Base zIndex value to use in layering.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "className",
                            "default": "null",
                            "description": "Style class of the tooltip.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "disabled",
                            "default": "false",
                            "description": "When present, it specifies that the tooltip should be hidden.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "event",
                            "default": "hover",
                            "description": "Event to show the tooltip.",
                            "value": {
                                "kind": "expression",
                                "type": "\"both\" | \"focus\" | \"hover\""
                            }
                        },
                        {
                            "name": "hideDelay",
                            "default": "0",
                            "description": "Delay to hide the tooltip in milliseconds.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "hideEvent",
                            "default": "mouseleave",
                            "description": "Event to hide the tooltip if the event property is empty.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "mouseTrack",
                            "default": "false",
                            "description": "Whether the tooltip will follow the mouse.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "mouseTrackLeft",
                            "default": "5",
                            "description": "Defines left position of the tooltip in relation to the mouse when the mouseTrack is enabled.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "mouseTrackTop",
                            "default": "5",
                            "description": "Defines top position of the tooltip in relation to the mouse when the mouseTrack is enabled.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "my",
                            "default": "null",
                            "description": "Defines which position on the tooltip being positioned to align with the target element.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "position",
                            "default": "right",
                            "description": "Position of the tooltip.",
                            "value": {
                                "kind": "expression",
                                "type": "\"left\" | \"top\" | \"bottom\" | \"right\" | \"mouse\""
                            }
                        },
                        {
                            "name": "showDelay",
                            "default": "0",
                            "description": "Delay to show the tooltip in milliseconds.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "showEvent",
                            "default": "mouseenter",
                            "description": "Event to show the tooltip if the event property is empty.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "showOnDisabled",
                            "default": "false",
                            "description": "Whether to show tooltip for disabled elements.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "style",
                            "default": "null",
                            "description": "Style of the tooltip.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSProperties"
                            }
                        },
                        {
                            "name": "updateDelay",
                            "default": "0",
                            "description": "Delay to update the tooltip in milliseconds.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": [
                        {
                            "name": "onBeforeShow",
                            "description": "Callback to invoke before the tooltip is shown.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "TooltipEvent",
                                    "description": "Browser event"
                                }
                            ]
                        },
                        {
                            "name": "onBeforeHide",
                            "description": "Callback to invoke before the tooltip is hidden.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "TooltipEvent",
                                    "description": "Browser event"
                                }
                            ]
                        },
                        {
                            "name": "onShow",
                            "description": "Callback to invoke when the tooltip is shown.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "TooltipEvent",
                                    "description": "Browser event"
                                }
                            ]
                        },
                        {
                            "name": "onHide",
                            "description": "Callback to invoke when the tooltip is hidden.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "TooltipEvent",
                                    "description": "Browser event"
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "Tooltipoptions",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Tooltipoptions"
                    },
                    "description": "This module contains the common options and events of Tooltip.",
                    "doc-url": ""
                },
                {
                    "name": "Tree",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Tree"
                    },
                    "description": "Tree is used to display hierarchical data.\n\n[Live Demo](https://www.primereact.org/tree/)",
                    "doc-url": "https://www.primereact.org/tree/",
                    "attributes": [
                        {
                            "name": "id",
                            "default": "null",
                            "description": "Unique identifier of the element.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "value",
                            "default": "null",
                            "description": "An array of treenodes.",
                            "value": {
                                "kind": "expression",
                                "type": "TreeNode[]"
                            }
                        },
                        {
                            "name": "disabled",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "selectionMode",
                            "default": "null",
                            "description": "Defines the selection mode, valid values \"single\", \"multiple\", and \"checkbox\".",
                            "value": {
                                "kind": "expression",
                                "type": "\"multiple\" | \"checkbox\" | \"single\""
                            }
                        },
                        {
                            "name": "selectionKeys",
                            "default": "null",
                            "description": "A single or an array of keys to control the selection state.",
                            "value": {
                                "kind": "expression",
                                "type": "null | string | TreeMultipleSelectionKeys | TreeCheckboxSelectionKeys"
                            }
                        },
                        {
                            "name": "contextMenuSelectionKey",
                            "default": "null",
                            "description": "A single key to control the selection with the context menu.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "expandedKeys",
                            "default": "null",
                            "description": "An array of keys to represent the state of the tree expansion state in controlled mode.",
                            "value": {
                                "kind": "expression",
                                "type": "TreeExpandedKeysType"
                            }
                        },
                        {
                            "name": "style",
                            "default": "null",
                            "description": "Inline style of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSProperties"
                            }
                        },
                        {
                            "name": "className",
                            "default": "null",
                            "description": "Style class of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "contentStyle",
                            "default": "null",
                            "description": "Inline style of the tree content.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSProperties"
                            }
                        },
                        {
                            "name": "contentClassName",
                            "default": "null",
                            "description": "Style class of the tree content.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "metaKeySelection",
                            "default": "true",
                            "description": "Defines how multiple items can be selected, when true metaKey needs to be pressed to select or unselect an item and when set to false selection of each item can be toggled individually. On touch enabled devices, metaKeySelection is turned off automatically.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "propagateSelectionUp",
                            "default": "true",
                            "description": "Whether checkbox selections propagate to ancestor nodes.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "propagateSelectionDown",
                            "default": "true",
                            "description": "Whether checkbox selections propagate to descendant nodes.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "loading",
                            "default": "false",
                            "description": "Whether to display loading indicator.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "loadingIcon",
                            "default": "null",
                            "description": "Icon to display when tree is loading.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<TreeProps>"
                            }
                        },
                        {
                            "name": "checkboxIcon",
                            "default": "null",
                            "description": "Icon to display in the checkbox.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<TreeProps>"
                            }
                        },
                        {
                            "name": "collapseIcon",
                            "default": "null",
                            "description": "Icon of an expanded tab.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<TreeProps>"
                            }
                        },
                        {
                            "name": "expandIcon",
                            "default": "null",
                            "description": "Icon of an collapsed tab.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<TreeProps>"
                            }
                        },
                        {
                            "name": "dragdropScope",
                            "default": "false",
                            "description": "Unique key to enable dragdrop functionality.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "header",
                            "default": "null",
                            "description": "The template of header.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "footer",
                            "default": "null",
                            "description": "The template of header.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "filterTemplate",
                            "default": "null",
                            "description": "Template of filter element.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "showHeader",
                            "default": "true",
                            "description": "Whether to show the header or not.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "filter",
                            "default": "false",
                            "description": "When specified, displays an input field to filter the items.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "filterIcon",
                            "default": "null",
                            "description": "Icon of the filter.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<TreeProps>"
                            }
                        },
                        {
                            "name": "filterValue",
                            "default": "null",
                            "description": "When filtering is enabled, the value of input field.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "filterBy",
                            "default": "label",
                            "description": "When filtering is enabled, filterBy decides which field or fields (comma separated) to search against.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "filterMode",
                            "default": "lenient",
                            "description": "Mode for filtering valid values are \"lenient\" and \"strict\". Default is lenient.",
                            "value": {
                                "kind": "expression",
                                "type": "\"strict\" | \"lenient\""
                            }
                        },
                        {
                            "name": "filterPlaceholder",
                            "default": "null",
                            "description": "Placeholder text to show when filter input is empty.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "filterLocale",
                            "default": "undefined",
                            "description": "Locale to use in filtering. The default locale is the host environment's current locale.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "emptyMessage",
                            "default": "No results found",
                            "description": "Template to display when filtering does not return any results.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "ariaLabel",
                            "default": "null",
                            "description": "Defines a string value that labels an interactive element.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "ariaLabelledby",
                            "default": "null",
                            "description": "Identifier of the underlying menu element.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "togglerTemplate",
                            "default": "null",
                            "description": "Template of toggler element.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "nodeTemplate",
                            "default": "false",
                            "description": "Template of node element.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "TreePassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": [
                        {
                            "name": "onSelectionChange",
                            "description": "Callback to invoke when selection changes.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "TreeSelectionEvent",
                                    "description": "Custom select event."
                                }
                            ]
                        },
                        {
                            "name": "onContextMenuSelectionChange",
                            "description": "Callback to invoke when selection changes with a context menu.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "TreeSelectionEvent",
                                    "description": "Custom select event."
                                }
                            ]
                        },
                        {
                            "name": "onSelect",
                            "description": "Callback to invoke when a node is selected.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "TreeEventNodeEvent",
                                    "description": "Custom node event."
                                }
                            ]
                        },
                        {
                            "name": "onUnselect",
                            "description": "Callback to invoke when a node is unselected.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "TreeEventNodeEvent",
                                    "description": "Custom node event."
                                }
                            ]
                        },
                        {
                            "name": "onExpand",
                            "description": "Callback to invoke when a node is expanded.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "TreeEventNodeEvent",
                                    "description": "Custom node event."
                                }
                            ]
                        },
                        {
                            "name": "onCollapse",
                            "description": "Callback to invoke when a node is collapsed.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "TreeEventNodeEvent",
                                    "description": "Custom node event."
                                }
                            ]
                        },
                        {
                            "name": "onToggle",
                            "description": "Callback to invoke when a node is toggled.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "TreeExpandedEvent",
                                    "description": "Custom expand event."
                                }
                            ]
                        },
                        {
                            "name": "onDragDrop",
                            "description": "Callback to invoke when a node is selected.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "TreeDragDropEvent",
                                    "description": "Custom dragdrop event."
                                }
                            ]
                        },
                        {
                            "name": "onContextMenu",
                            "description": "Callback to invoke when a node is selected with a context menu.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "TreeEventNodeEvent",
                                    "description": "Custom node event."
                                }
                            ]
                        },
                        {
                            "name": "onFilterValueChange",
                            "description": "Callback to invoke when filter value changes.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "TreeFilterValueChangeEvent",
                                    "description": "Custom filter value change event."
                                }
                            ]
                        },
                        {
                            "name": "onNodeClick",
                            "description": "Callback to invoke when the node is clicked.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "TreeNodeClickEvent",
                                    "description": "Custom click event."
                                }
                            ]
                        },
                        {
                            "name": "onNodeDoubleClick",
                            "description": "Callback to invoke when the node is double-clicked.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "TreeNodeDoubleClickEvent",
                                    "description": "Custom doubleclick event."
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "Treenode",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Treenode"
                    },
                    "description": "This module contains the data interface for nodes in tree components.",
                    "doc-url": ""
                },
                {
                    "name": "Treeselect",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Treeselect"
                    },
                    "description": "TreeSelect is a form component to choose from hierarchical data.\n\n[Live Demo](https://www.primereact.org/treeselect/)",
                    "doc-url": "https://www.primereact.org/treeselect/",
                    "attributes": [
                        {
                            "name": "appendTo",
                            "default": "document.body",
                            "description": "DOM element instance where the overlay panel should be mounted. Valid values are any DOM Element and 'self'. The self value is used to render a component where it is located.",
                            "value": {
                                "kind": "expression",
                                "type": "null | HTMLElement | \"self\" | Function"
                            }
                        },
                        {
                            "name": "ariaLabel",
                            "default": "null",
                            "description": "Used to define a string that labels the component.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "ariaLabelledBy",
                            "default": "null",
                            "description": "Establishes relationships between the component and label(s) where its value should be one or more element IDs.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "autoFocus",
                            "default": "false",
                            "description": "When present, it specifies that the component should automatically get focus on load.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "clearIcon",
                            "default": "null",
                            "description": "Icon of the dropdown.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<TreeSelectProps>"
                            }
                        },
                        {
                            "name": "closeIcon",
                            "default": "null",
                            "description": "Icon of the close button.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<TreeSelectProps>"
                            }
                        },
                        {
                            "name": "disabled",
                            "default": "false",
                            "description": "When present, it specifies that the component should be disabled.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "display",
                            "default": "comma",
                            "description": "Defines how the selected items are displayed, valid values are \"comma\" and \"chip\".",
                            "value": {
                                "kind": "expression",
                                "type": "\"comma\" | \"chip\""
                            }
                        },
                        {
                            "name": "dropdownIcon",
                            "default": "null",
                            "description": "Icon of the dropdown.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<TreeSelectProps>"
                            }
                        },
                        {
                            "name": "emptyMessage",
                            "default": "No available options",
                            "description": "Text to display when there is no data.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "expandedKeys",
                            "default": "null",
                            "description": "An array of keys to represent the state of the treeselect expansion state in controlled mode.",
                            "value": {
                                "kind": "expression",
                                "type": "TreeSelectExpandedKeysType"
                            }
                        },
                        {
                            "name": "filter",
                            "default": "false",
                            "description": "When specified, displays an input field to filter the items.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "filterBy",
                            "default": "label",
                            "description": "When filtering is enabled, filterBy decides which field or fields (comma separated) to search against.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "filterIcon",
                            "default": "null",
                            "description": "Icon of the filter.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<TreeSelectProps>"
                            }
                        },
                        {
                            "name": "filterInputAutoFocus",
                            "default": "true",
                            "description": "When the panel is opened, it specifies that the filter input should focus automatically.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "filterLocale",
                            "default": "undefined",
                            "description": "Locale to use in filtering. The default locale is the host environment's current locale.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "filterMode",
                            "default": "lenient",
                            "description": "Mode for filtering valid values are \"lenient\" and \"strict\". Default is lenient.",
                            "value": {
                                "kind": "expression",
                                "type": "\"strict\" | \"lenient\""
                            }
                        },
                        {
                            "name": "filterPlaceholder",
                            "default": "null",
                            "description": "Placeholder text to show when filter input is empty.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "filterTemplate",
                            "default": "null",
                            "description": "Custom template for the filter element.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "filterValue",
                            "default": "null",
                            "description": "When filtering is enabled, the value of input field.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "inputId",
                            "default": "null",
                            "description": "Identifier of the input element.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "inputRef",
                            "default": "null",
                            "description": "Reference of the input element.",
                            "value": {
                                "kind": "expression",
                                "type": "Ref<HTMLInputElement>"
                            }
                        },
                        {
                            "name": "metaKeySelection",
                            "default": "true",
                            "description": "Defines how multiple items can be selected, when true metaKey needs to be pressed to select or unselect an item and when set to false selection of each item can be toggled individually. On touch enabled devices, metaKeySelection is turned off automatically.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "name",
                            "default": "null",
                            "description": "Name of the input element.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "nodeTemplate",
                            "default": "false",
                            "description": "Template of internally used tree component node element.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "options",
                            "default": "null",
                            "description": "An array of options to display.",
                            "value": {
                                "kind": "expression",
                                "type": "TreeNode[]"
                            }
                        },
                        {
                            "name": "panelClassName",
                            "default": "null",
                            "description": "Style class of the overlay panel element.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "panelFooterTemplate",
                            "default": "null",
                            "description": "The template of footer.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "panelHeaderTemplate",
                            "default": "null",
                            "description": "The template of header.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "panelStyle",
                            "default": "null",
                            "description": "Inline style of the overlay panel element.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSProperties"
                            }
                        },
                        {
                            "name": "placeholder",
                            "default": "null",
                            "description": "Hint text for the input field.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "variant",
                            "default": "outlined",
                            "description": "Specifies the input variant of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "\"filled\" | \"outlined\""
                            }
                        },
                        {
                            "name": "invalid",
                            "default": "false",
                            "description": "When present, it specifies that the component should have invalid state style.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "TreeSelectPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "resetFilterOnHide",
                            "default": "null",
                            "description": "Resets the filter when the overlay is hidden.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "scrollHeight",
                            "default": "400px",
                            "description": "Maximum height of the options panel.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "showClear",
                            "default": "false",
                            "description": "When enabled, a clear icon is displayed to clear the value.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "selectionMode",
                            "default": "null",
                            "description": "Defines the selection mode, valid values \"single\", \"multiple\", and \"checkbox\".",
                            "value": {
                                "kind": "expression",
                                "type": "\"multiple\" | \"checkbox\" | \"single\""
                            }
                        },
                        {
                            "name": "tooltip",
                            "default": "null",
                            "description": "Content of the tooltip.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "tooltipOptions",
                            "default": "null",
                            "description": "Configuration of the tooltip, refer to the tooltip documentation for more information.",
                            "value": {
                                "kind": "expression",
                                "type": "TooltipOptions"
                            }
                        },
                        {
                            "name": "transitionOptions",
                            "default": "null",
                            "description": "The properties of CSSTransition can be customized, except for \"nodeRef\" and \"in\" properties.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSTransitionProps"
                            }
                        },
                        {
                            "name": "togglerTemplate",
                            "default": "null",
                            "description": "Template of toggler element.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "value",
                            "default": "null",
                            "description": "A single or an object of keys to control the selection state.",
                            "value": {
                                "kind": "expression",
                                "type": "null | string | TreeSelectSelectionKeysType | TreeSelectSelectionKeysType[]"
                            }
                        },
                        {
                            "name": "valueTemplate",
                            "default": "null",
                            "description": "The template of selected values.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        }
                    ],
                    "events": [
                        {
                            "name": "onChange",
                            "description": "Callback to invoke when selection changes.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "TreeSelectChangeEvent",
                                    "description": "Custom change event."
                                }
                            ]
                        },
                        {
                            "name": "onFilterValueChange",
                            "description": "Callback to invoke when filter value changes.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "TreeSelectFilterValueChangeEvent",
                                    "description": "Custom filter change event."
                                }
                            ]
                        },
                        {
                            "name": "onHide",
                            "description": "Used to hide the overlay.",
                            "arguments": []
                        },
                        {
                            "name": "onNodeCollapse",
                            "description": "Callback to invoke when a node is collapsed.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "TreeSelectEventNodeEvent",
                                    "description": "Custom change event."
                                }
                            ]
                        },
                        {
                            "name": "onNodeExpand",
                            "description": "Callback to invoke when a node is expanded.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "TreeSelectEventNodeEvent",
                                    "description": "Custom change event."
                                }
                            ]
                        },
                        {
                            "name": "onNodeSelect",
                            "description": "Callback to invoke when a node is selected.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "TreeSelectEventNodeEvent",
                                    "description": "Custom change event."
                                }
                            ]
                        },
                        {
                            "name": "onNodeUnselect",
                            "description": "Callback to invoke when a node is unselected.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "TreeSelectEventNodeEvent",
                                    "description": "Custom change event."
                                }
                            ]
                        },
                        {
                            "name": "onShow",
                            "description": "Used to show the overlay.",
                            "arguments": []
                        },
                        {
                            "name": "onToggle",
                            "description": "Callback to invoke when a node is toggled.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "TreeSelectExpandedEvent",
                                    "description": "Custom toggle event."
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "Treetable",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Treetable"
                    },
                    "description": "TreeTable is used to display hierarchical data in tabular format.\n\n[Live Demo](https://www.primereact.org/treetable/)",
                    "doc-url": "https://www.primereact.org/treetable/",
                    "attributes": [
                        {
                            "name": "alwaysShowPaginator",
                            "default": "true",
                            "description": "Whether to show it even there is only one page.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "checkboxIcon",
                            "default": "null",
                            "description": "Icon of the checkbox when checked.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<TreeTableProps>"
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "TreeTablePassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "className",
                            "default": "null",
                            "description": "Style class of the node.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "columnResizeMode",
                            "default": "fit",
                            "description": "Defines whether the overall table width should change on column resize, valid values are \"fit\" and \"expand\".",
                            "value": {
                                "kind": "expression",
                                "type": "\"expand\" | \"fit\""
                            }
                        },
                        {
                            "name": "contextMenuSelectionKey",
                            "default": "null",
                            "description": "A single key to control the selection with the context menu.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "currentPageReportTemplate",
                            "default": "({currentPage} of {totalPages})",
                            "description": "Template of the current page report element. Available placeholders are {currentPage}, {totalPages}, {rows}, {first}, {last} and {totalRecords}",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "defaultSortOrder",
                            "default": "1",
                            "description": "Default sort order of an unsorted column.",
                            "value": {
                                "kind": "expression",
                                "type": "null | 0 | 1 | -1"
                            }
                        },
                        {
                            "name": "emptyMessage",
                            "default": "No results found",
                            "description": "Text to display when there is no data.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "expandedKeys",
                            "default": "null",
                            "description": "An array of keys to represent the state of the tree expansion state in controlled mode.",
                            "value": {
                                "kind": "expression",
                                "type": "TreeTableExpandedKeysType"
                            }
                        },
                        {
                            "name": "filterDelay",
                            "default": "300",
                            "description": "Delay in milliseconds before filtering the data.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "filterLocale",
                            "default": "undefined",
                            "description": "Locale to use in filtering. The default locale is the host environment's current locale.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "filterMode",
                            "default": "lenient",
                            "description": "Mode for filtering valid values are lenient and strict. Default is lenient.",
                            "value": {
                                "kind": "expression",
                                "type": "\"strict\" | \"lenient\""
                            }
                        },
                        {
                            "name": "filters",
                            "default": "null",
                            "description": "An array of FilterMetadata objects to provide external filters.",
                            "value": {
                                "kind": "expression",
                                "type": "TreeTableFilterMeta"
                            }
                        },
                        {
                            "name": "first",
                            "default": "0",
                            "description": "Index of the first row to be displayed.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "footer",
                            "default": "null",
                            "description": "Footer content of the table.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "footerColumnGroup",
                            "default": "null",
                            "description": "ColumnCroup component for footer.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactElement<any, string | JSXElementConstructor<any>>"
                            }
                        },
                        {
                            "name": "frozenFooterColumnGroup",
                            "default": "null",
                            "description": "ColumnCroup component for footer of frozen columns.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactElement<any, string | JSXElementConstructor<any>>"
                            }
                        },
                        {
                            "name": "frozenHeaderColumnGroup",
                            "default": "null",
                            "description": "ColumnCroup component for header of frozen columns.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactElement<any, string | JSXElementConstructor<any>>"
                            }
                        },
                        {
                            "name": "frozenWidth",
                            "default": "null",
                            "description": "Width of the frozen part in scrollable DataTable.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "globalFilter",
                            "default": "null",
                            "description": "Value of the global filter to use in filtering.",
                            "value": {
                                "kind": "expression",
                                "type": "null | string"
                            }
                        },
                        {
                            "name": "globalFilterMatchMode",
                            "default": "contains",
                            "description": "Defines filterMatchMode; \"startsWith\", \"contains\", \"endsWith\", \"equals\", \"notEquals\", \"in\", \"notIn\", \"lt\", \"lte\", \"gt\", \"gte\" and \"custom\".",
                            "value": {
                                "kind": "expression",
                                "type": "\"endsWith\" | \"startsWith\" | \"custom\" | \"contains\" | \"in\" | \"equals\" | \"notEquals\" | \"notContains\" | \"notIn\" | \"lt\" | \"lte\" | \"gt\" | \"gte\" | \"between\" | \"dateIs\" | \"dateIsNot\" | \"dateBefore\" | \"dateAfter\""
                            }
                        },
                        {
                            "name": "header",
                            "default": "null",
                            "description": "Header content of the table.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "headerColumnGroup",
                            "default": "null",
                            "description": "ColumnCroup component for header.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactElement<any, string | JSXElementConstructor<any>>"
                            }
                        },
                        {
                            "name": "id",
                            "default": "null",
                            "description": "Unique identifier of the element.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "lazy",
                            "default": "false",
                            "description": "Defines if data is loaded and interacted with in lazy manner.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "loading",
                            "default": "false",
                            "description": "Displays a loader to indicate data load is in progress.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "loadingIcon",
                            "default": "null",
                            "description": "The icon to show while indicating data load is in progress.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<TreeTableProps>"
                            }
                        },
                        {
                            "name": "metaKeySelection",
                            "default": "true",
                            "description": "Defines whether metaKey is requred or not for the selection. When true metaKey needs to be pressed to select or unselect an item and when set to false selection of each item can be toggled individually. On touch enabled devices, metaKeySelection is turned off automatically.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "multiSortMeta",
                            "default": "null",
                            "description": "An array of SortMeta objects to sort the data by default in multiple sort mode.",
                            "value": {
                                "kind": "expression",
                                "type": "null | TreeTableSortMeta[]"
                            }
                        },
                        {
                            "name": "pageLinkSize",
                            "default": "5",
                            "description": "Number of page links to display.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "paginator",
                            "default": "false",
                            "description": "When specified as true, enables the pagination.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "paginatorClassName",
                            "default": "null",
                            "description": "Style class of the paginator element.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "paginatorDropdownAppendTo",
                            "default": "document.body",
                            "description": "DOM element instance where the overlay panel should be mounted. Valid values are any DOM Element and 'self'. The self value is used to render a component where it is located.",
                            "value": {
                                "kind": "expression",
                                "type": "null | HTMLElement | \"self\" | Function"
                            }
                        },
                        {
                            "name": "paginatorLeft",
                            "default": "null",
                            "description": "Content for the left side of the paginator.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "paginatorPosition",
                            "default": "bottom",
                            "description": "Position of the paginator, options are \"top\",\"bottom\" or \"both\".",
                            "value": {
                                "kind": "expression",
                                "type": "\"both\" | \"top\" | \"bottom\""
                            }
                        },
                        {
                            "name": "paginatorRight",
                            "default": "null",
                            "description": "Content for the right side of the paginator.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "paginatorTemplate",
                            "default": "FirstPageLink PrevPageLink PageLinks NextPageLink LastPageLink RowsPerPageDropdown",
                            "description": "Template of the paginator. For details, refer to the template section of the paginator documentation for further options.",
                            "value": {
                                "kind": "expression",
                                "type": "PaginatorTemplate"
                            }
                        },
                        {
                            "name": "propagateSelectionDown",
                            "default": "true",
                            "description": "Whether checkbox selections propagate to descendant nodes.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "propagateSelectionUp",
                            "default": "true",
                            "description": "Whether checkbox selections propagate to ancestor nodes.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "removableSort",
                            "default": "false",
                            "description": "When enabled, columns can have an un-sorted state.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "reorderableColumns",
                            "default": "false",
                            "description": "When enabled, columns can be reordered using drag and drop.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "reorderIndicatorDownIcon",
                            "default": "null",
                            "description": "Defines the reorder indicator down icon.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<TreeTableProps>"
                            }
                        },
                        {
                            "name": "reorderIndicatorUpIcon",
                            "default": "null",
                            "description": "Defines the reorder indicator up icon.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<TreeTableProps>"
                            }
                        },
                        {
                            "name": "resizableColumns",
                            "default": "false",
                            "description": "When enabled, columns can be resized using drag and drop.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "rowHover",
                            "default": "false",
                            "description": "When enabled, background of the rows change on hover.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "rows",
                            "default": "null",
                            "description": "Number of rows to display per page.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "rowsPerPageOptions",
                            "default": "null",
                            "description": "Array of integer values to display inside rows per page dropdown.",
                            "value": {
                                "kind": "expression",
                                "type": "number[]"
                            }
                        },
                        {
                            "name": "scrollHeight",
                            "default": "null",
                            "description": "Height of the scroll viewport.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "scrollable",
                            "default": "false",
                            "description": "When specified, enables horizontal and/or vertical scrolling.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "selectOnEdit",
                            "default": "true",
                            "description": "Determines whether the cell editor will be opened when clicking to select any row on Selection and Cell Edit modes.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "selectionKeys",
                            "default": "null",
                            "description": "A single or an array of keys to control the selection state.",
                            "value": {
                                "kind": "expression",
                                "type": "null | string | TreeTableSelectionKeysType | TreeTableSelectionKeysType[]"
                            }
                        },
                        {
                            "name": "selectionMode",
                            "default": "null",
                            "description": "Defines the selection mode, valid values \"single\", \"multiple\", and \"checkbox\".",
                            "value": {
                                "kind": "expression",
                                "type": "\"multiple\" | \"checkbox\" | \"single\""
                            }
                        },
                        {
                            "name": "showGridlines",
                            "default": "false",
                            "description": "Whether to show grid lines between cells.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "sortField",
                            "default": "null",
                            "description": "Name of the field to sort data by default.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "sortIcon",
                            "default": "null",
                            "description": "Icon to display the current sorting status.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<TreeTableProps>"
                            }
                        },
                        {
                            "name": "sortMode",
                            "default": "single",
                            "description": "Defines whether sorting works on single column or on multiple columns.",
                            "value": {
                                "kind": "expression",
                                "type": "\"multiple\" | \"single\""
                            }
                        },
                        {
                            "name": "sortOrder",
                            "default": "null",
                            "description": "Order to sort the data by default.",
                            "value": {
                                "kind": "expression",
                                "type": "null | 0 | 1 | -1"
                            }
                        },
                        {
                            "name": "stripedRows",
                            "default": "false",
                            "description": "Whether to displays rows with alternating colors.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "style",
                            "default": "null",
                            "description": "Inline style of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSProperties"
                            }
                        },
                        {
                            "name": "tabIndex",
                            "default": "null",
                            "description": "Index of the element in tabbing order.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "tableClassName",
                            "default": "null",
                            "description": "Style class of the table element.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "tableStyle",
                            "default": "null",
                            "description": "Inline style of the table element.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSProperties"
                            }
                        },
                        {
                            "name": "togglerTemplate",
                            "default": "null",
                            "description": "Template of toggler element.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "totalRecords",
                            "default": "null",
                            "description": "Number of total records, defaults to length of value when not defined.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "value",
                            "default": "null",
                            "description": "An array of treenodes to display.",
                            "value": {
                                "kind": "expression",
                                "type": "TreeNode[]"
                            }
                        }
                    ],
                    "events": [
                        {
                            "name": "onColReorder",
                            "description": "Callback to invoke when a column is reordered.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "TreeTableColReorderEvent",
                                    "description": "Custom column reorder event."
                                }
                            ]
                        },
                        {
                            "name": "onCollapse",
                            "description": "Callback to invoke when a node is collapsed.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "TreeTableEvent",
                                    "description": "Custom treetable event."
                                }
                            ]
                        },
                        {
                            "name": "onColumnResizeEnd",
                            "description": "Callback to invoke when a column is resized.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "TreeTableColumnResizeEndEvent",
                                    "description": "Custom resize event."
                                }
                            ]
                        },
                        {
                            "name": "onContextMenu",
                            "description": "Callback to invoke when a context menu is clicked.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "TreeTableEvent",
                                    "description": "Custom treetable event."
                                }
                            ]
                        },
                        {
                            "name": "onContextMenuSelectionChange",
                            "description": "Callback to invoke when selection changes with a context menu.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "TreeTableSelectionEvent",
                                    "description": "Custom selection event."
                                }
                            ]
                        },
                        {
                            "name": "onExpand",
                            "description": "Callback to invoke when a node is expanded.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "TreeTableEvent",
                                    "description": "Custom treetable event."
                                }
                            ]
                        },
                        {
                            "name": "onFilter",
                            "description": "Callback to invoke on filtering.",
                            "arguments": [
                                {
                                    "name": "filters",
                                    "type": "TreeTableFilterMeta[]",
                                    "description": "Custom treetable event."
                                }
                            ]
                        },
                        {
                            "name": "onPage",
                            "description": "Callback to invoke on pagination.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "TreeTablePageEvent",
                                    "description": "Custom page event."
                                }
                            ]
                        },
                        {
                            "name": "onRowClick",
                            "description": "Callback to invoke when a row is clicked.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "TreeTableEvent",
                                    "description": "Custom treetable event."
                                }
                            ]
                        },
                        {
                            "name": "onRowMouseEnter",
                            "description": "Callback to invoke when a row is hovered with mouse.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "TreeTableRowMouseEvent",
                                    "description": "Custom row mouse event."
                                }
                            ]
                        },
                        {
                            "name": "onRowMouseLeave",
                            "description": "Callback to invoke when a row is navigated away from with mouse.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "TreeTableRowMouseEvent",
                                    "description": "Custom row mouse event."
                                }
                            ]
                        },
                        {
                            "name": "onSelect",
                            "description": "Callback to invoke when a node is selected.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "TreeTableEvent",
                                    "description": "Custom treetable event."
                                }
                            ]
                        },
                        {
                            "name": "onSelectionChange",
                            "description": "Callback to invoke when selection changes.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "TreeTableSelectionEvent",
                                    "description": "Custom selection event."
                                }
                            ]
                        },
                        {
                            "name": "onSort",
                            "description": "Callback to invoke on sort.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "TreeTableSortEvent",
                                    "description": "Custom sort event."
                                }
                            ]
                        },
                        {
                            "name": "onToggle",
                            "description": "Callback to invoke when a node is toggled.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "TreeTableToggleEvent",
                                    "description": "Custom toggle event."
                                }
                            ]
                        },
                        {
                            "name": "onUnselect",
                            "description": "Callback to invoke when a node is unselected.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "TreeTableEvent",
                                    "description": "Custom treetable event."
                                }
                            ]
                        },
                        {
                            "name": "onValueChange",
                            "description": "Callback to invoke after filtering and sorting to pass the rendered value.",
                            "arguments": [
                                {
                                    "name": "value",
                                    "type": "undefined | TreeNode[]",
                                    "description": "Value displayed by the table."
                                }
                            ]
                        },
                        {
                            "name": "rowClassName",
                            "description": "Function that takes the row data and returns an object in {'styleclass' : condition} format to define a classname for a particular now.",
                            "arguments": [
                                {
                                    "name": "data",
                                    "type": "TreeNode",
                                    "description": "Value displayed by the treetable."
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "Tristatecheckbox",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Tristatecheckbox"
                    },
                    "description": "TriStateCheckbox is used to select either \"true\", \"false\" or \"null\" as the value.\n\n[Live Demo](https://www.primereact.org/tristatecheckbox/)",
                    "doc-url": "https://www.primereact.org/tristatecheckbox/",
                    "attributes": [
                        {
                            "name": "autoFocus",
                            "default": "false",
                            "description": "When present, it specifies that the component should automatically get focus on load.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "value",
                            "default": "null",
                            "description": "Value of the TriStateCheckbox.",
                            "value": {
                                "kind": "expression",
                                "type": "null | boolean"
                            }
                        },
                        {
                            "name": "invalid",
                            "default": "false",
                            "description": "When present, it specifies that the component should have invalid state style.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "disabled",
                            "default": "false",
                            "description": "When present, it specifies that the element value cannot be altered.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "variant",
                            "default": "outlined",
                            "description": "Specifies the input variant of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "\"filled\" | \"outlined\""
                            }
                        },
                        {
                            "name": "readOnly",
                            "default": "false",
                            "description": "When present, it specifies that the value cannot be changed.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "checkIcon",
                            "default": "null",
                            "description": "Icon of the checkbox when checked.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<TriStateCheckboxProps>"
                            }
                        },
                        {
                            "name": "uncheckIcon",
                            "default": "null",
                            "description": "Icon of the checkbox when unchecked.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<TriStateCheckboxProps>"
                            }
                        },
                        {
                            "name": "tooltip",
                            "default": "null",
                            "description": "Content of the tooltip.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "tooltipOptions",
                            "default": "null",
                            "description": "Configuration of the tooltip, refer to the tooltip documentation for more information.",
                            "value": {
                                "kind": "expression",
                                "type": "TooltipOptions"
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "TriStateCheckboxPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        },
                        {
                            "name": "unstyled",
                            "default": "false",
                            "description": "When enabled, it removes component related styles in the core.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        }
                    ],
                    "events": [
                        {
                            "name": "onChange",
                            "description": "Callback to invoke on value change",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "TriStateCheckboxChangeEvent",
                                    "description": "Browser event."
                                }
                            ]
                        }
                    ]
                },
                {
                    "name": "Ts-helpers",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Ts-helpers"
                    },
                    "doc-url": ""
                },
                {
                    "name": "Utils",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Utils"
                    },
                    "description": "",
                    "doc-url": ""
                },
                {
                    "name": "Virtualscroller",
                    "source": {
                        "module": "PrimeReact",
                        "symbol": "Virtualscroller"
                    },
                    "description": "VirtualScroller is a performant approach to handle huge data efficiently.\n\n[Live Demo](https://www.primereact.org/virtualscroller/)",
                    "doc-url": "https://www.primereact.org/virtualscroller/",
                    "attributes": [
                        {
                            "name": "id",
                            "default": "null",
                            "description": "Unique identifier of the element.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "style",
                            "default": "null",
                            "description": "Inline style of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "CSSProperties"
                            }
                        },
                        {
                            "name": "className",
                            "default": "null",
                            "description": "Style class of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "tabIndex",
                            "default": "0",
                            "description": "Index of the element in tabbing order.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "items",
                            "default": "null",
                            "description": "An array of objects to display.",
                            "value": {
                                "kind": "expression",
                                "type": "null | any[] | any[][]"
                            }
                        },
                        {
                            "name": "itemSize",
                            "default": "null",
                            "description": "The height/width of item according to orientation.",
                            "value": {
                                "kind": "expression",
                                "type": "number | number[]"
                            }
                        },
                        {
                            "name": "scrollHeight",
                            "default": "null",
                            "description": "Height of the scroll viewport.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "scrollWidth",
                            "default": "null",
                            "description": "Width of the scroll viewport.",
                            "value": {
                                "kind": "expression",
                                "type": "string"
                            }
                        },
                        {
                            "name": "orientation",
                            "default": "'vertical'",
                            "description": "The orientation of scrollbar, valid values are 'vertical', 'horizontal' and 'both'.",
                            "value": {
                                "kind": "expression",
                                "type": "\"both\" | \"horizontal\" | \"vertical\""
                            }
                        },
                        {
                            "name": "step",
                            "default": "0",
                            "description": "Used to specify how many items to load in each load method in lazy mode.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "numToleratedItems",
                            "default": "null",
                            "description": "Determines how many additional elements to add to the DOM outside of the view. According to the scrolls made up and down, extra items are added in a certain algorithm in the form of multiples of this number. Default value is half the number of items shown in the view.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "delay",
                            "default": "0",
                            "description": "Delay in scroll before new data is loaded.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "resizeDelay",
                            "default": "10",
                            "description": "Delay after window's resize finishes.",
                            "value": {
                                "kind": "expression",
                                "type": "number"
                            }
                        },
                        {
                            "name": "appendOnly",
                            "default": "false",
                            "description": "Used to append each loaded item to top without removing any items from the DOM. Using very large data may cause the browser to crash.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "inline",
                            "default": "false",
                            "description": "When enabled, positions the content as inline.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "lazy",
                            "default": "false",
                            "description": "Defines if data is loaded and interacted with in lazy manner.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "disabled",
                            "default": "false",
                            "description": "If disabled, the VirtualScroller feature is eliminated and the content is displayed directly.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "loaderDisabled",
                            "default": "false",
                            "description": "Used to implement a custom loader instead of using the loader feature in the VirtualScroller.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "columns",
                            "default": "null",
                            "description": "Columns of the virtual scroller for vertical option.",
                            "value": {
                                "kind": "expression",
                                "type": "any"
                            }
                        },
                        {
                            "name": "loading",
                            "default": "false",
                            "description": "Whether the data is loaded.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "autoSize",
                            "default": "false",
                            "description": "Whether to dynamically change the height or width of scrollable container.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "showSpacer",
                            "default": "true",
                            "description": "Used to implement a custom spacer instead of using the spacer feature in the VirtualScroller.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "showLoader",
                            "default": "false",
                            "description": "Whether to show loader.",
                            "value": {
                                "kind": "expression",
                                "type": "boolean"
                            }
                        },
                        {
                            "name": "loadingIcon",
                            "default": "null",
                            "description": "The icon to show while indicating data load is in progress.",
                            "value": {
                                "kind": "expression",
                                "type": "IconType<VirtualScrollerProps>"
                            }
                        },
                        {
                            "name": "loadingTemplate",
                            "default": "null",
                            "description": "The template of loader.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "loaderIconTemplate",
                            "default": "null",
                            "description": "The template of loader's icon.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "itemTemplate",
                            "default": "null",
                            "description": "The template of item.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "contentTemplate",
                            "default": "null",
                            "description": "The template of item's wrapper element.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode | Function"
                            }
                        },
                        {
                            "name": "children",
                            "default": "null",
                            "description": "Used to get the child elements of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "ReactNode"
                            }
                        },
                        {
                            "name": "pt",
                            "default": "null",
                            "description": "Uses to pass attributes to DOM elements inside the component.",
                            "value": {
                                "kind": "expression",
                                "type": "VirtualScrollerPassThroughOptions"
                            }
                        },
                        {
                            "name": "ptOptions",
                            "default": "null",
                            "description": "Used to configure passthrough(pt) options of the component.",
                            "value": {
                                "kind": "expression",
                                "type": "PassThroughOptions"
                            }
                        }
                    ],
                    "events": [
                        {
                            "name": "onScroll",
                            "description": "Callback to invoke when scroll position changes.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "UIEvent<HTMLElement, UIEvent>",
                                    "description": "Browser event"
                                }
                            ]
                        },
                        {
                            "name": "onScrollIndexChange",
                            "description": "Callback to invoke when scroll position and item's range in view changes.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "VirtualScrollerChangeEvent",
                                    "description": "Custom change event"
                                }
                            ]
                        },
                        {
                            "name": "onLazyLoad",
                            "description": "Callback to invoke in lazy mode to load new data.",
                            "arguments": [
                                {
                                    "name": "event",
                                    "type": "VirtualScrollerLazyEvent",
                                    "description": "Custom lazy load event."
                                }
                            ]
                        }
                    ]
                }
            ],
            "attributes": []
        }
    }
}